<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用 VPC Peering 連接不同 VPC 的 RDS</title>
    <url>/access-cross-db-by-vpc-peering/</url>
    <content><![CDATA[<h2 id="為何需要"><a href="#為何需要" class="headerlink" title="為何需要"></a>為何需要</h2><ul>
<li>不同 VPC 需要互相存取走 Internet 會比較貴且危險</li>
<li>設定 VPC Peering 功能，可以將兩個不同 VPC 的 CIDR 位址串連在一起，透過 Private IP Address 互相連結，走內網相較安全且便宜</li>
<li>支援同一個 Region 兩個 VPC 或不同 Region 各別 VPC，也支援多個 Account</li>
<li><strong>需要注意 VPC 的 CIDR 不同重複</strong></li>
</ul>
<h2 id="達成目標"><a href="#達成目標" class="headerlink" title="達成目標"></a>達成目標</h2><ul>
<li>從 A 帳戶 EC2 存取 B 帳戶的 RDS，每個帳戶會有各自 VPC</li>
</ul>
<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><p><strong>步驟一、在 A 帳戶建立 VPC</strong></p>
<ul>
<li>選擇 public&#x2F;private 各一個 subnet</li>
</ul>
<p><strong>步驟二、在 B 帳戶建立 VPC</strong></p>
<ul>
<li>選擇 public&#x2F;private 各一個 subnet</li>
</ul>
<p><strong>步驟三、在 A 帳戶建立 VPC Peering Connection</strong></p>
<ul>
<li><p>輸入 Peering 名稱</p>
</li>
<li><p>選擇 local vpc id 及 another vpc id (記得要填 region, account)</p>
</li>
<li><p>建立完後要啟動 DNS，才可以將 RDS Domain Name 解析為內網 IP</p>
<p>  <img src="/../images/aws/access_cross_db_by_vpc_peering1.png" alt="access_cross_db_by_vpc_peering1"></p>
</li>
</ul>
<p><strong>步驟四、在 B 帳戶的 VPC Peering Connection</strong></p>
<ul>
<li><p>點擊 Accept Request，狀態就會變成 Active</p>
<p>  <img src="/../images/aws/access_cross_db_by_vpc_peering2.png" alt="access_cross_db_by_vpc_peering2"></p>
</li>
<li><p>Accept 之後，再啟動 DNS</p>
<p>  <img src="/../images/aws/access_cross_db_by_vpc_peering3.png" alt="access_cross_db_by_vpc_peering3"></p>
</li>
</ul>
<p><strong>步驟五、在 A 帳戶修改 public subnet 的 route table</strong></p>
<ul>
<li><p>設定 private subnet 的 route table 會無效哦</p>
</li>
<li><p>設定 B 帳戶 VPC 的 CIDR</p>
<p>  <img src="/../images/aws/access_cross_db_by_vpc_peering4.png" alt="access_cross_db_by_vpc_peering4"></p>
</li>
</ul>
<p><strong>步驟六、在 B 帳戶修改 public subnet 的 route table</strong></p>
<ul>
<li><p>設定 A 帳戶 VPC 的 CIDR</p>
<p>  <img src="/../images/aws/access_cross_db_by_vpc_peering5.png" alt="access_cross_db_by_vpc_peering5"></p>
</li>
</ul>
<p><strong>步驟七、在 A, B 帳戶都建立 EC2</strong></p>
<ul>
<li>選擇 public subnet 並 auto assign ip</li>
<li>security group 開放 22, ICMP port (有 ICMP 才可以 ping 對方 IP)</li>
</ul>
<p><strong>步驟八、互相 Ping 對方內網 IP 進行測試</strong></p>
<ul>
<li><p>A 帳戶的 EC2</p>
<p>  <img src="/../images/aws/access_cross_db_by_vpc_peering6.png" alt="access_cross_db_by_vpc_peering6"></p>
</li>
<li><p>B 帳戶的 EC2</p>
<p>  <img src="/../images/aws/access_cross_db_by_vpc_peering7.png" alt="access_cross_db_by_vpc_peering7"></p>
</li>
</ul>
<p><strong>步驟九、在 B 帳戶修改 RDS 的 Security Group</strong></p>
<ul>
<li><p>新增 A 帳戶的 VPC CIDR 的 Inbound rule</p>
<p>  <img src="/../images/aws/access_cross_db_by_vpc_peering8.png" alt="access_cross_db_by_vpc_peering8"></p>
</li>
</ul>
<p><strong>步驟十、測試從 A 帳戶 EC2 連 B 帳戶的 RDS</strong></p>
<ul>
<li><p>使用 nslookup 解析 RDS endpoint 是否有轉換成內網 IP (如果沒有到步驟三啟動 DNS 設定)</p>
<p>  <img src="/../images/aws/access_cross_db_by_vpc_peering9.png" alt="access_cross_db_by_vpc_peering9"></p>
</li>
<li><p>安裝 mysql 進行連線</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安裝 mysql</span></span><br><span class="line">$ sudo yum install mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 mysql client 連線</span></span><br><span class="line">$ mysql -h &lt;endpoint&gt; -P 3306 -u &lt;mysql user&gt; --password &lt;mysql password&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ul>
<li><strong><strong><a href="https://rdpapa.tw/2022/09/10/aws-vpc-peering/">《AWS 教學–如何在不同的VPC建立一條可互通的通道》VPC PEERING操作分享 | 學習筆記</a></strong></strong></li>
<li><strong><strong><a href="https://aws.amazon.com/tw/premiumsupport/knowledge-center/vpc-peering-troubleshoot-dns-resolution/">為什麼我無法透過 VPC 對等互連解析網域名稱？</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>VPC</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用 VPC Gateway Endpoint 存取 S3 資源</title>
    <url>/access-s3-by-vpc-gateway-endpoint/</url>
    <content><![CDATA[<h2 id="VPC-Endpoint"><a href="#VPC-Endpoint" class="headerlink" title="VPC Endpoint"></a>VPC Endpoint</h2><ul>
<li>主要的功能是透過 private link 方式連接到 AWS Service</li>
<li>優點是節費又安全</li>
<li>其中的 Gateway Endpoint 存取 S3, DynamoDB 服務是完全免費</li>
</ul>
<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><p><strong>步驟一、建立 VPC</strong></p>
<ul>
<li>選擇一個 public subnet (對外開放 SSH port 的 EC2，當作跳板做測試)</li>
<li>選擇一個 private subnet (透過 private link 方式存取 S3)</li>
<li>勾選 S3 Gateway</li>
<li><strong>勾選 DNS hostnames 及 resolution</strong> (才可以使用私有域名的方式存取 AWS 服務，像是 <code>s3.us-west-2.amazonaws.com</code>)</li>
</ul>
<p><img src="/../images/aws/access_s3_by_vpc_gateway_endpoint1.png" alt="access_s3_by_vpc_gateway_endpoint1"></p>
<p><strong>步驟二、查看 Private Subnet 的 Route Table，可以路由到 VPC endpoint</strong></p>
<p><img src="/../images/aws/access_s3_by_vpc_gateway_endpoint2.png" alt="access_s3_by_vpc_gateway_endpoint2"></p>
<p><strong>步驟三、查看 VPC Endpoint 設定，可以看到存取的服務 (注意只能設定同一個 Region)</strong></p>
<ul>
<li>預設 Policy 為 Full access (會覆蓋掉 IAM Role 的權限)</li>
</ul>
<p><img src="/../images/aws/access_s3_by_vpc_gateway_endpoint3.png" alt="access_s3_by_vpc_gateway_endpoint3"></p>
<p><strong>步驟四、建立 Role，分配給 EC2 來限制存取 AWS 資源權限</strong></p>
<ul>
<li>除了設定 Permission 之外，更重要的是設定 Trust relationships (允許誰可以 assume 這個 role)</li>
</ul>
<p><img src="/../images/aws/access_s3_by_vpc_gateway_endpoint4.png" alt="access_s3_by_vpc_gateway_endpoint4"></p>
<p><strong>步驟五、建立對外開放 SSH Port 的 EC2</strong></p>
<ul>
<li>選擇 aws 官方 image (預設有 aws cli 指令)</li>
<li>選擇 public subnet，並自動分配對外 IP</li>
<li>建立 security group 的 inbound rule 只允許 ssh port</li>
</ul>
<p><strong>步驟六、建立對內 EC2</strong></p>
<ul>
<li>選擇 aws 官方 image (預設有 aws cli 指令)</li>
<li>選擇 private subnet</li>
<li>選擇前面建立好的 Role</li>
</ul>
<p><strong>步驟七、透過跳板機連線到對內 EC2</strong></p>
<ul>
<li>使用 <code>nslookup s3.us-west-2.amazonaws.com</code>  查看 S3 的 IP 位址</li>
<li>可以隨機 ping 一個 IP，有回應則連線成功</li>
</ul>
<p><img src="/../images/aws/access_s3_by_vpc_gateway_endpoint5.png" alt="access_s3_by_vpc_gateway_endpoint5"></p>
<ul>
<li>使用 aws s3 指令查看 bucket<ul>
<li><code>export AWS_DEFAULT_REGION=us-west-2</code></li>
<li><code>aws s3 ls s3://&#123;bucket-name&#125;</code></li>
</ul>
</li>
</ul>
<p><strong>步驟八、使用 VPC Reachability Analyzer 測試網路連線</strong></p>
<ul>
<li>狀態為 Reachable 代表連線成功</li>
<li>查看連線路徑</li>
</ul>
<p><img src="/../images/aws/access_s3_by_vpc_gateway_endpoint6.png" alt="access_s3_by_vpc_gateway_endpoint6"></p>
<h2 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h2><ul>
<li>VPC Endpoint policy 會覆蓋 IAM policy，使用情境會根據不同的 Policy 建立不同的 endpoint<ul>
<li>預設 quota 是每個 region 上限 20 個 VPC Gateway Endpoint，超過上限可在調整 &#x3D;&gt; <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html#vpc-limits-endpoints">link</a></li>
</ul>
</li>
<li>只能存取同一個 Region 的資源</li>
<li><strong>當指定服務走 VPC Endpoint，所有該服務的請求都會走 VPC Endpoint，不會走 NAT gateway</strong><ul>
<li>可以使用 VPC Endpoint Policy 做實驗</li>
</ul>
</li>
</ul>
<h2 id="EC2-狀況排除"><a href="#EC2-狀況排除" class="headerlink" title="EC2 狀況排除"></a>EC2 狀況排除</h2><p><strong>狀況一、打 <code>aws s3 ls</code> 指令會沒有回應</strong></p>
<p>解決方法</p>
<ul>
<li>設定預設 Region ⇒ <code>export AWS_DEFAULT_REGION=us-west-2</code></li>
</ul>
<p><strong>狀況二、下 aws cli 指令出現 Unable to locate credentials. 的錯誤</strong></p>
<p>解決方法</p>
<ul>
<li>開 EC2 要記得設定 IAM Role</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><strong><a href="https://docs.aws.amazon.com/vpc/latest/privatelink/vpc-endpoints-s3.html#create-gateway-endpoint-s3">Gateway endpoints for Amazon S3</a></strong></li>
<li><strong><strong><a href="https://tomgregory.com/when-to-use-an-aws-s3-vpc-endpoint/">When to use an AWS S3 VPC endpoint</a></strong></strong></li>
<li><strong><strong><a href="https://itnext.io/what-exactly-are-vpc-endpoints-and-why-they-need-real-inter-region-support-283a9987fe51">What Exactly are VPC Endpoints and Why They Need Real Inter-Region Support</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>VPC</tag>
        <tag>S3</tag>
      </tags>
  </entry>
  <entry>
    <title>如何設定跨帳戶存取 S3 權限</title>
    <url>/access-s3-from-cross-account/</url>
    <content><![CDATA[<h2 id="達成目標"><a href="#達成目標" class="headerlink" title="達成目標"></a>達成目標</h2><ul>
<li>A 帳戶的角色可以上傳檔案到 B 帳戶的 S3 Bucket 的資料夾內</li>
</ul>
<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><p><strong>步驟一、 繼承要用來操作 S3 的 A 帳戶角色</strong></p>
<ul>
<li>操作方式可以參考這篇文章 ⇒ <a href="/assume-role-by-sso">如何使用 SSO 角色再繼承 Role</a></li>
</ul>
<p> <strong>步驟二、修改 A 帳戶角色的 Policy</strong></p>
<ul>
<li><p>加上 S3 存取該 Bucket 權限</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Statement&quot;:</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Action&quot;:</span> <span class="string">&quot;s3:*&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Effect&quot;:</span> <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Resource&quot;:</span> [</span><br><span class="line">        <span class="string">&quot;arn:aws:s3:::&lt;another account bucket name&gt;/*&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;Version&quot;:</span> <span class="string">&quot;2012-10-17&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Statement&quot;:</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Action&quot;:</span> <span class="string">&quot;s3:*&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Effect&quot;:</span> <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Resource&quot;:</span> [</span><br><span class="line">        <span class="string">&quot;arn:aws:s3:::s3.rhinoshield.io/customcase/customer/*&quot;</span>,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;Version&quot;:</span> <span class="string">&quot;2012-10-17&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步驟三、修改 B 帳戶的 S3 Bucket Policy</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Sid&quot;:</span> <span class="string">&quot;GetCustomcaseCustomerData&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Effect&quot;:</span> <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Principal&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;AWS&quot;:</span> <span class="string">&quot;arn:aws:iam::&lt;account id&gt;:role/&lt;role name&gt;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;Action&quot;:</span> [</span><br><span class="line">    <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">    <span class="string">&quot;s3:PutObject&quot;</span>,</span><br><span class="line">    <span class="string">&quot;s3:DeleteObject&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;Resource&quot;:</span> <span class="string">&quot;arn:aws:s3:::&lt;bucket name&gt;/customcase/customer/*&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步驟四、測試存取權限</strong></p>
<ul>
<li><p>下載檔案</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aws s3 <span class="built_in">cp</span> s3://&lt;bucket name&gt;/customcase/customer/pdf/&lt;filename&gt;.pdf .</span><br></pre></td></tr></table></figure>
</li>
<li><p>上傳檔案</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws s3 cp &lt;filename&gt;.pdf s3://&lt;bucket name&gt;/customcase/customer/pdf/&lt;filename&gt;.pdf --acl bucket-owner-full-control</span><br></pre></td></tr></table></figure>

<p>  由於 Bucket 有設定 Object 擁有者是上傳的人，其他人會無法存取該檔案，所以需要加上 <code>--acl bucket-owner-full-control</code> 參數更改 Owner 人員</p>
<p>  <img src="/../images/aws/access_s3_from_cross_account1.png" alt="access_s3_from_cross_account1"></p>
</li>
</ul>
<h2 id="常見-S3-權限的小知識"><a href="#常見-S3-權限的小知識" class="headerlink" title="常見 S3 權限的小知識"></a>常見 S3 權限的小知識</h2><ul>
<li>ListBucket 用來顯示 Bucket 內的物件清單， 資源後面不用加 <code>/*</code></li>
<li>GetObject 用來顯示特定檔案，資源後面需加上 <code>/*</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">    &quot;Principal&quot;: &#123;</span><br><span class="line">        &quot;AWS&quot;: &quot;arn:aws:iam::xxxxxxxxxx:role/&lt;role name&gt;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;Action&quot;: &quot;s3:ListBucket&quot;,</span><br><span class="line">    &quot;Resource&quot;: &quot;arn:aws:s3:::ditto-stag&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">    &quot;Principal&quot;: &#123;</span><br><span class="line">        &quot;AWS&quot;: &quot;arn:aws:iam::xxxxxxxxxx:role/&lt;role name&gt;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;Action&quot;: [</span><br><span class="line">        &quot;s3:GetObject&quot;,</span><br><span class="line">        &quot;s3:PutObject&quot;,</span><br><span class="line">        &quot;s3:DeleteObject&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;Resource&quot;: &quot;arn:aws:s3:::ditto-stag/*&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ul>
<li><strong><strong><a href="https://awstip.com/how-to-access-s3-bucket-from-another-aws-account-55f1b0a878ed">How to access S3 bucket from another AWS account</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>S3</tag>
      </tags>
  </entry>
  <entry>
    <title>盤點存取 S3 圖片連結方式</title>
    <url>/access-s3-object-url-methods/</url>
    <content><![CDATA[<h2 id="方法一、設定-Object-Public-Access-最不建議"><a href="#方法一、設定-Object-Public-Access-最不建議" class="headerlink" title="方法一、設定 Object Public Access (最不建議)"></a>方法一、設定 Object Public Access (最不建議)</h2><p><img src="/../images/aws/access-s3-object-url-methods1.png" alt="access-s3-object-url-methods1"></p>
<h2 id="方法二、設定-Bucket-Policy"><a href="#方法二、設定-Bucket-Policy" class="headerlink" title="方法二、設定 Bucket Policy"></a>方法二、設定 Bucket Policy</h2><ul>
<li><p>用來取代方法一 ACL 方式</p>
</li>
<li><p>符合來源 role 或 user 才可以存取 (通常用在 <strong>EC2、Lambda 等運算資源</strong>)</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;EC2Role&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Principal&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;AWS&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;arn:aws:iam::&lt;account id&gt;:role/&lt;role name&gt;&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Resource&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;arn:aws:s3:::&lt;bucket name&gt;/customcase/customer/*&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>符合 Public IP 才可以存取 (通常用在<strong>公司內網</strong>)</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;PublicIP&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Principal&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;AWS&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Resource&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;arn:aws:s3:::&lt;bucket name&gt;/customcase/customer/*&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;IpAddress&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;aws:SourceIp&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;xxx.xxx.xxx.xxx/32&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>符合 VPC Private IP 才可以存取 (通常用在<strong>AWS VPC 中的 EC2 存取</strong>)</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;PrivateVPC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Principal&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;AWS&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:s3:::&lt;bucket name&gt;/customcase/customer/pdf/*&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;IpAddress&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;aws:VpcSourceIp&quot;</span>: <span class="string">&quot;10.0.0.0/16&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>符合來源 domain 才可以存取(通常用在<strong>該域名顯示圖片</strong>)</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;PrivateDomain&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Principal&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;AWS&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Resource&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;arn:aws:s3:::&lt;bucket name&gt;/customcase/customer/*&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;StringLike&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;aws:Referer&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;http://www.example.com/*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://example.com/*&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>符合 AWS 資源才可以存取(通常用在<strong>CloudFront</strong>)</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;AllowCloudFrontServicePrincipal&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Principal&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Service&quot;</span>: <span class="string">&quot;cloudfront.amazonaws.com&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:s3:::&lt;bucket name&gt;/*&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;StringEquals&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;AWS:SourceArn&quot;</span>: <span class="string">&quot;arn:aws:cloudfront::&lt;account id&gt;:distribution/&lt;distribution id&gt;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="方法三、設定-Presigned-URL"><a href="#方法三、設定-Presigned-URL" class="headerlink" title="方法三、設定 Presigned URL"></a>方法三、設定 Presigned URL</h2><ul>
<li><p>從 object action 建立 presigned url</p>
</li>
<li><p>最多設定 12 小時或 720 分鐘</p>
<p>  <img src="/../images/aws/access-s3-object-url-methods2.png" alt="access-s3-object-url-methods2"></p>
</li>
</ul>
<h2 id="方法四、CloudFront-WAF"><a href="#方法四、CloudFront-WAF" class="headerlink" title="方法四、CloudFront + WAF"></a>方法四、CloudFront + WAF</h2><p>參考文章 ⇒ 尚未完成</p>
<h2 id="方法五、CloudFront-Signed-URL"><a href="#方法五、CloudFront-Signed-URL" class="headerlink" title="方法五、CloudFront Signed URL"></a>方法五、CloudFront Signed URL</h2><p>參考文章 ⇒ 尚未完成</p>
<h2 id="方法六、CloudFront-Signed-Cookie"><a href="#方法六、CloudFront-Signed-Cookie" class="headerlink" title="方法六、CloudFront Signed Cookie"></a>方法六、CloudFront Signed Cookie</h2><p>參考文章 ⇒ 尚未完成</p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>S3</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用 VPC Interface Endpoint 存取 SQS 資源</title>
    <url>/access-sqs-by-vpc-internet-endpoint/</url>
    <content><![CDATA[<h2 id="完成示意圖"><a href="#完成示意圖" class="headerlink" title="完成示意圖"></a>完成示意圖</h2><p><img src="/../images/aws/access_sqs_by_vpc_internet_endpoint1.png" alt="access_sqs_by_vpc_internet_endpoint1"></p>
<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><p><strong>步驟一、建立 VPC</strong></p>
<ul>
<li>選擇一個 public subnet (對外開放 SSH port 的 EC2，當作跳板做測試)</li>
<li>選擇一個 private subnet (透過 private link 方式存取 AWS 服務)</li>
<li>取消勾選 S3 Gateway</li>
<li><strong>勾選 DNS hostnames 及 resolution</strong> (才可以使用私有域名的方式存取 AWS 服務)</li>
</ul>
<p><strong>步驟二、確認 default security</strong></p>
<ul>
<li>建立完 VPC，會預設建立內部溝通使用的 default security group</li>
<li>會在後面建立 vpc interface endpoint 使用到</li>
</ul>
<p><img src="/../images/aws/access_sqs_by_vpc_internet_endpoint2.png" alt="access_sqs_by_vpc_internet_endpoint2"></p>
<p><strong>步驟三、建立 Role，分配給 EC2 來限制存取 AWS 資源權限</strong></p>
<p><img src="/../images/aws/access_sqs_by_vpc_internet_endpoint3.png" alt="access_sqs_by_vpc_internet_endpoint3"></p>
<p><strong>步驟四、建立對外開放 SSH Port 的 EC2</strong></p>
<ul>
<li>選擇 aws 官方 image (預設有 aws cli 指令)</li>
<li>選擇 public subnet，並自動分配對外 IP</li>
<li>建立 security group 的 inbound rule 只允許 ssh port</li>
</ul>
<p><strong>步驟五、建立對內 EC2</strong></p>
<ul>
<li>選擇 aws 官方 image (預設有 aws cli 指令)</li>
<li>選擇 private subnet</li>
<li>選擇前面建立好的 Role、security group</li>
</ul>
<p><strong>步驟六、建立 Interface Endpoint</strong></p>
<ul>
<li>選擇 com.amazonaws.us-west-2.sqs 的 AWS 服務</li>
<li>選擇前面建立的 VPC</li>
<li><strong>勾選 DNS name (可以用 private link 與預設的 public endpoint 進行存取)</strong></li>
<li>選擇 private subnet 與 IPv4</li>
<li>選擇步驟二的 default security group 走 vpc 內網溝通</li>
<li>建立完後會看到 ENI 網卡</li>
</ul>
<p><img src="/../images/aws/access_sqs_by_vpc_internet_endpoint4.png" alt="access_sqs_by_vpc_internet_endpoint4"></p>
<p><strong>步驟七、修改 default security group</strong></p>
<ul>
<li>將前面建立好的 security group 加入到 inbound rule 中</li>
</ul>
<p><img src="/../images/aws/access_sqs_by_vpc_internet_endpoint5.png" alt="access_sqs_by_vpc_internet_endpoint5"></p>
<p><strong>步驟八、建立 SQS</strong></p>
<ul>
<li>輸入名稱為 vpc-endpoint-sqs</li>
<li>複製 SQS Details 的 URL</li>
</ul>
<p><strong>步驟九、發送 Message 到 Queue 中</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># default public DNS</span></span><br><span class="line"><span class="string">$</span> <span class="string">aws</span> <span class="string">sqs</span> <span class="string">send-message</span> <span class="string">--region</span> <span class="string">us-west-2</span> <span class="string">--endpoint-url</span> <span class="string">https://sqs.us-west-2.amazonaws.com/</span> <span class="string">--queue-url</span> <span class="string">https://sqs.us-west-2.amazonaws.com/&lt;account</span> <span class="string">id&gt;/vpc-endpoint-sqs</span> <span class="string">--message-body</span> <span class="string">&quot;Hello from Amazon SQS.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># interface private DNS</span></span><br><span class="line"><span class="string">$</span> <span class="string">aws</span> <span class="string">sqs</span> <span class="string">send-message</span> <span class="string">--region</span> <span class="string">us-west-2</span> <span class="string">--endpoint-url</span> <span class="string">https://vpce-028c733be6bb2e23a-ylx2ithw.sqs.us-west-2.vpce.amazonaws.com/</span> <span class="string">--queue-url</span> <span class="string">https://sqs.us-west-2.amazonaws.com/&lt;account</span> <span class="string">id&gt;/vpc-endpoint-sqs</span> <span class="string">--message-body</span> <span class="string">&quot;Hello from Amazon SQS.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 看到下方結果，即為成功</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;MD5OfMessageBody&quot;:</span> <span class="string">&quot;c5dba0dd8f89fe763f66cbddb9c37cb7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;MessageId&quot;:</span> <span class="string">&quot;70b7327e-e414-4cd2-adbb-b708bfc8a1d4&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><strong><strong><a href="https://www.youtube.com/watch?v=zlFmrT2Do74&ab_channel=CloudDeepDive">VPC Interface Endpoints - Demo</a></strong></strong></li>
<li><strong><a href="https://www.youtube.com/watch?v=fByROZKY0x0&ab_channel=NamrataHShah">AWS Tutorial - AWS SQS - Sending a Message using A VPC Endpoint (AWS Privatelink)</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>VPC</tag>
        <tag>SQS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用 SSO 角色再繼承 Role</title>
    <url>/assume-role-by-sso/</url>
    <content><![CDATA[<h2 id="AWS-SSO-簡介"><a href="#AWS-SSO-簡介" class="headerlink" title="AWS SSO 簡介"></a>AWS SSO 簡介</h2><ul>
<li><p>使用第三方服務(Google)認證身分，使用 AWS 資源</p>
</li>
<li><p>新增 user 才可以使用 sso</p>
</li>
<li><p>新增 group 設定使用者群組，用來設定 permission-set 的對象</p>
</li>
<li><p>使用 permission-set 限制存取權限，類似 AWS Role 元件</p>
</li>
<li><p>使用 assignments 指定各別 account 有的 permission set，並指定哪些 group 有權限</p>
<p>  <img src="/../images/aws/assume-role-by-sso1.png" alt="assume-role-by-sso1"></p>
</li>
</ul>
<h2 id="AWS-Role-簡介"><a href="#AWS-Role-簡介" class="headerlink" title="AWS Role 簡介"></a>AWS Role 簡介</h2><ul>
<li>設定操作 aws 資源的權限，通常設定給 EC2 或本地開發環境繼承使用</li>
<li><strong>繼承使用的前提需要先為 User 或是 SSO 的身分</strong></li>
</ul>
<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><ol>
<li><p>設定 sso 的 permission set 有 <code>sts:AssumeRole</code> 權限</p>
</li>
<li><p>設定 role 的 trust relationships 允許誰可以 assume 它</p>
<p> <img src="/../images/aws/assume-role-by-sso2.png" alt="assume-role-by-sso2"></p>
</li>
<li><p>使用 sso 登入</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">export</span> <span class="string">AWS_PROFILE=developer-659650500219</span></span><br><span class="line"><span class="string">aws</span> <span class="string">sso</span> <span class="string">login</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看登入人員</p>
<ul>
<li><code>aws sts get-caller-identity</code></li>
</ul>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;UserId&quot;:</span> <span class="string">&quot;xxx:jeffery.l@evolutivelabs.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Account&quot;:</span> <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Arn&quot;:</span> <span class="string">&quot;arn:aws:sts::xxx:assumed-role/AWSReservedSSO_developer_04371fb42c683a27/jeffery.l@evolutivelabs.com&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 assume-role 指令繼承 Role，並指定為環境變數</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">export</span> <span class="string">$(printf</span> <span class="string">&quot;AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s&quot;</span> <span class="string">\</span></span><br><span class="line"><span class="string">$(aws</span> <span class="string">sts</span> <span class="string">assume-role</span> <span class="string">\</span></span><br><span class="line"><span class="string">--role-arn</span> <span class="string">arn:aws:iam::xxx:role/amuse-creator-prod-sa-rhinoshield-stag-for-dev</span> <span class="string">\</span></span><br><span class="line"><span class="string">--role-session-name</span> <span class="string">amuse-creator-prod-sa-rhinoshield-stag-for-dev</span> <span class="string">\</span></span><br><span class="line"><span class="string">--query</span> <span class="string">&quot;Credentials.[AccessKeyId,SecretAccessKey,SessionToken]&quot;</span> <span class="string">\</span></span><br><span class="line"><span class="string">--output</span> <span class="string">text))</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看登入人員，就成功換成指定的 Role</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;UserId&quot;:</span> <span class="string">&quot;xxx:amuse-creator-prod-sa-rhinoshield-stag-for-dev&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Account&quot;:</span> <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Arn&quot;:</span> <span class="string">&quot;arn:aws:sts::xxx:assumed-role/amuse-creator-prod-sa-rhinoshield-stag-for-dev/amuse-creator-prod-sa-rhinoshield-stag-for-dev&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>Note: AWS 使用的身分會優先判斷 <strong>AWS_ACCESS_KEY_ID</strong>，所以容易直接替換 sso 的角色</p>
</blockquote>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>Role</tag>
      </tags>
  </entry>
  <entry>
    <title>SAA 證照筆記 - 準備到報考過程</title>
    <url>/aws-saa-prepare/</url>
    <content><![CDATA[<h2 id="為何會想考證照"><a href="#為何會想考證照" class="headerlink" title="為何會想考證照"></a>為何會想考證照</h2><ul>
<li>放在履歷上，增加職場競爭力</li>
<li>驗收自己的雲端知識</li>
</ul>
<h2 id="考前準備"><a href="#考前準備" class="headerlink" title="考前準備"></a>考前準備</h2><ul>
<li>模擬試題<ul>
<li>免費：<a href="https://www.examtopics.com/exams/amazon/aws-certified-solutions-architect-associate-saa-c02/view/2/">Amazon AWS Certified Solutions Architect - Associate SAA-C02</a></li>
<li>付費：<a href="https://www.udemy.com/course/practice-exams-aws-certified-solutions-architect-associate/">Practice Exams | AWS Certified Solutions Architect Associate</a></li>
</ul>
</li>
<li>做模擬試題至少都要 80 以上<ul>
<li>紀錄錯誤的題型，把該 AWS 服務的知識補足起來(建議直接看 FAQ 比較快)</li>
<li>把常見的<a href="https://www.notion.so/d1b41a2f0cec426e863476f7124f1f0f">英文單字</a>背起來，這樣才看得懂題目</li>
</ul>
</li>
<li>看 IT 邦幫忙文章<ul>
<li><a href="https://ithelp.ithome.com.tw/users/20100951/ironman/4671">無限手套 AWS 版：掌控一切的 5 + 1 雲端必學主題</a></li>
<li><a href="https://ithelp.ithome.com.tw/users/20129560/ironman/3159">AWS Certified Solution Architect</a></li>
<li><a href="https://ithelp.ithome.com.tw/users/20130683/ironman/3758?page=1">30天初探 Amazon Web Services</a></li>
<li><a href="https://ithelp.ithome.com.tw/users/20124610/ironman/3984?page=1">你用雲端，還敢談資安?AWS資安服務佈署之路</a></li>
</ul>
</li>
</ul>
<h2 id="線上報考"><a href="#線上報考" class="headerlink" title="線上報考"></a>線上報考</h2><ul>
<li><p>到 <a href="https://www.aws.training/Certification">AWS certification</a> 網站線上選考試日期及地點</p>
</li>
<li><p>我考試地點選考試中心，這樣就算中途去上廁所也不會被取消資格</p>
<ul>
<li>需要帶身分證跟護照</li>
<li>提前15分鐘到那邊填寫基本資料</li>
</ul>
</li>
<li><p>從 2023&#x2F;1&#x2F;1 開始不能選考試中心(PSI)，只能選擇自己的考試空間 QQ</p>
<p>  <img src="/../images/saa/aws-saa-prepare1.png" alt="aws-saa-prepare1"></p>
</li>
</ul>
<h2 id="考試期間"><a href="#考試期間" class="headerlink" title="考試期間"></a>考試期間</h2><ul>
<li>考試時間 120 分鐘，每題作答時間不要超過 2 分鐘，不然有可能做不完</li>
<li>注意題目是要多選或是單選<ul>
<li>多選也要注意要選幾個答案，不然少選一個也是錯</li>
</ul>
</li>
</ul>
<h2 id="成績公告"><a href="#成績公告" class="headerlink" title="成績公告"></a>成績公告</h2><ul>
<li><p>考完隔天就收到信件，或是可以到 <a href="https://www.aws.training/Certification">AWS certification</a>  網站線上查看分數</p>
</li>
<li><p>可以下載 PDF</p>
<p>  <img src="/../images/saa/aws-saa-prepare2.png" alt="aws-saa-prepare2"></p>
</li>
<li><p>也可以登入 <strong><a href="https://www.credly.com/users/sign_in">Credly Digital badges</a></strong> 拿到 badge 放在自己的個人 blog</p>
<p>  <img src="/../images/saa/aws-saa-prepare3.png" alt="aws-saa-prepare3"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>SAA</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 CloudFront 快取 S3 Image</title>
    <url>/cache-image-by-cloudfront/</url>
    <content><![CDATA[<h2 id="CloudFront-計費方式"><a href="#CloudFront-計費方式" class="headerlink" title="CloudFront 計費方式"></a>CloudFront 計費方式</h2><ul>
<li><p>圖片來源 ⇒ <a href="https://www.leyun.cloud/cc-91">圖解AWS CloudFront 收費模式 !</a></p>
<p>  <img src="/../images/aws/cache-image-by-cloudfront1.png" alt="cache-image-by-cloudfront1"></p>
</li>
<li><p>使用 Amazon S3 儲存貯體的儲存費用</p>
</li>
<li><p>收取從節點提供物件的費用 ⇒ 上方圖說明的”<strong>用戶端從節點下載</strong>“</p>
</li>
<li><p>收取提交資料費用 ⇒ 上方圖說明的”<strong>節點上傳到Origin Server</strong>”</p>
</li>
<li><p>可以參考 AWS 官方 <strong><a href="https://docs.aws.amazon.com/zh_tw/AmazonCloudFront/latest/DeveloperGuide/CloudFrontPricing.html">CloudFront 定價</a></strong> 說明</p>
</li>
</ul>
<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><p><strong>步驟一、建立 S3 Bucket 並上傳 Image</strong></p>
<p><img src="/../images/aws/cache-image-by-cloudfront2.png" alt="cache-image-by-cloudfront2"></p>
<p><strong>步驟二、建立 Cloudfront</strong></p>
<ul>
<li>設定 origin path 為 S3 資料夾路徑當作入口</li>
<li>origin access 選擇 Origin access control settings (recommended)</li>
</ul>
<p><img src="/../images/aws/cache-image-by-cloudfront3.png" alt="cache-image-by-cloudfront3"></p>
<p><strong>步驟三、建立 Response headers policy</strong></p>
<ul>
<li><p>CDN 回傳給 Client 端的 Response Header 加上 Cache-Control，max-age&#x3D;31536000(一年)</p>
</li>
<li><p>建立完後更新 CDN 的 Behaviors</p>
<p>  <img src="/../images/aws/cache-image-by-cloudfront4.png" alt="cache-image-by-cloudfront4"></p>
</li>
</ul>
<p><strong>步驟四、開啟瀏覽器進行測試</strong></p>
<ul>
<li><p>可以看到 response header 自動回傳 cache-control</p>
<p>  <img src="/../images/aws/cache-image-by-cloudfront5.png" alt="cache-image-by-cloudfront5"></p>
</li>
</ul>
<h2 id="Cache-Control-簡介"><a href="#Cache-Control-簡介" class="headerlink" title="Cache-Control 簡介"></a>Cache-Control 簡介</h2><ul>
<li>當我們瀏覽一個網頁時，瀏覽器會透過網路，找我們的伺服器抓取許多檔案，例如 html，js，image 等等，然後渲染出畫面給使用者看。</li>
<li>伺服器可以在回傳這些檔案時，多跟瀏覽器交代一下，請他短時間內如果使用者又要拿一樣的資料，那你就先用同一份，這個行為叫做 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control">Cache-Control</a></li>
<li>具體來說，如果伺服器回傳一張圖，並且在 header 加上 <code>Cache-Control: max-age=60</code>，那麼就算使用者瘋狂重新整理頁面，瀏覽器在 60 秒之內也不會一直找伺服器拿同一張圖</li>
<li><strong>優點：善用這個行為，使用者瀏覽網站時會感到比較流暢，我們也可以減少流量費用</strong></li>
<li>使用上要考慮檔案變更的時間，使用者要多快看到新的內容，這是成本與效能的權衡。</li>
<li>可以利用 cache buster 的機制，讓網頁和資源搭配出又省又能快速反應變動的方案，例如，網頁的 html, css, js 設定快取五分鐘，這樣子我們上 code 之後，可以預期使用者只少五分鐘後會來拿新的網頁，但是 image 我們可以設定快取一年，並且加上 cache buster，例如 <code>[https://xx.com/image?cb=123](https://xx.com/image?cb=123)</code> 其中 <code>cb</code> 並非特殊參數，隨便的 key 都行。當 image 因為某些原因必須要更換時，我們只要上 code，讓網頁改抓 <code>[https://xx.com/image?cb=456](https://xx.com/image?cb=456)</code>，瀏覽器一看到網址不一樣，他就會去抓新的了</li>
</ul>
<h2 id="額外補充：S3-設定-metadata"><a href="#額外補充：S3-設定-metadata" class="headerlink" title="額外補充：S3 設定 metadata"></a>額外補充：S3 設定 metadata</h2><ul>
<li>取得檔案會自動在 header 加上 cache-control</li>
<li><strong>操作步驟</strong><ul>
<li><p>編輯 metadata</p>
<p>  <img src="/../images/aws/cache-image-by-cloudfront6.png" alt="cache-image-by-cloudfront6"></p>
</li>
<li><p>加上 cache-control</p>
<p>  <img src="/../images/aws/cache-image-by-cloudfront7.png" alt="cache-image-by-cloudfront7"></p>
</li>
<li><p>查看 object metadata</p>
<p>  <img src="/../images/aws/cache-image-by-cloudfront8.png" alt="cache-image-by-cloudfront8"></p>
</li>
</ul>
</li>
</ul>
<h2 id="延伸學習"><a href="#延伸學習" class="headerlink" title="延伸學習"></a>延伸學習</h2><ul>
<li><strong><a href="https://godleon.github.io/blog/AWS/AWS-CloudFront-Introduction/">[AWS] CloudFront 簡介</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 機器選型</title>
    <url>/choose-redis-node-type/</url>
    <content><![CDATA[<h2 id="AWS-建議"><a href="#AWS-建議" class="headerlink" title="AWS 建議"></a>AWS 建議</h2><ul>
<li>Cache node<ul>
<li>M5 cache nodes if you need more throughput with some increased memory</li>
<li>R5 cache nodes if you need more throughput and up to 35%–51% higher memory per cache node</li>
</ul>
</li>
<li>Memory<ul>
<li>You should keep at least 25% of the node size apart from containing your database size. Replication uses some memory from the primary node.</li>
</ul>
</li>
</ul>
<h2 id="ARM-vs-x86"><a href="#ARM-vs-x86" class="headerlink" title="ARM vs x86"></a>ARM vs x86</h2><ul>
<li>x86-based Redis provides higher single-CPU performance than Arm-based Redis in scenarios that involve complex commands, such as big keys or keys whose time complexity is larger than O(N)</li>
</ul>
<h2 id="綜合評估"><a href="#綜合評估" class="headerlink" title="綜合評估"></a>綜合評估</h2><ul>
<li>啟用 Redis Cluster 模式，建立的 node type 規格只要可以應付平均使用量即可，當遇到 peak demand 只要確保 Auto Scaling 機制可以正常伸縮機器即可</li>
<li>查看記憶體及 CPU 的 metrics 使用量，記得要預留 25% 的記憶體給 replication 使用</li>
<li>x86 效能比 arm 還要好</li>
</ul>
<h2 id="EC2-類型介紹"><a href="#EC2-類型介紹" class="headerlink" title="EC2 類型介紹"></a>EC2 類型介紹</h2><ul>
<li><strong><a href="https://www.nakivo.com/blog/the-definitive-guide-to-aws-ec2-instance-types/">The Definitive Guide to AWS EC2 Instance Types</a></strong></li>
<li><strong><strong><a href="https://medium.com/summers-life/aws-ec2-instance-e1d08316e712">AWS — EC2 instance</a></strong></strong></li>
</ul>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><a href="https://aws.amazon.com/tw/premiumsupport/knowledge-center/elasticache-redis-cluster-instance-type/"><strong>如何為我的 Redis 叢集選擇正確的執行個體類型和大小？</strong></a></li>
<li><a href="https://support.huaweicloud.com/intl/en-us/dcs_faq/dcs-faq-0515001.html"><strong>What Are the Differences Between Arm-based and x86-based DCS for Redis?</strong></a></li>
<li><a href="https://aws.amazon.com/tw/blogs/database/five-workload-characteristics-to-consider-when-right-sizing-amazon-elasticache-redis-clusters/"><strong>Five workload characteristics to consider when right sizing Amazon ElastiCache Redis clusters</strong></a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>設定 Helm 自動部署系列(一) - 設定 ECR</title>
    <url>/cicd-by-helm-ecr-setting/</url>
    <content><![CDATA[<h2 id="ECR-介紹"><a href="#ECR-介紹" class="headerlink" title="ECR 介紹"></a>ECR 介紹</h2><ul>
<li>全名為 Elastic Container Registry，字面上就可以清楚知道，就是放容器化的 image 倉庫</li>
<li>由於 Helm 有支援 OCI 機制，所以也可以存放在 ECR 上面</li>
</ul>
<h2 id="使用-Terraform-建立"><a href="#使用-Terraform-建立" class="headerlink" title="使用 Terraform 建立"></a>使用 Terraform 建立</h2><ul>
<li>透過 <code>principals_readonly_access</code>、<code>principals_full_access</code> 去限制哪些 aws 資源可以進行存取，由於我們專案主要是用 EKS 部署，所以這邊會去設定 node group 的 arn</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module <span class="string">&quot;laravel&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span>                     = <span class="string">&quot;cloudposse/ecr/aws&quot;</span></span><br><span class="line">  version                    = <span class="string">&quot;~&gt; 0.34.0&quot;</span></span><br><span class="line">  image_tag_mutability       = <span class="string">&quot;MUTABLE&quot;</span></span><br><span class="line">  image_names                = [<span class="string">&quot;laravel-nginx-chart&quot;</span>]</span><br><span class="line">  principals_readonly_access = var.principals_readonly_access</span><br><span class="line">  principals_full_access     = var.principals_full_access</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="建立完驗收"><a href="#建立完驗收" class="headerlink" title="建立完驗收"></a>建立完驗收</h2><p><img src="/../images/helm/cicd-by-helm-ecr-setting1.png" alt="cicd-by-helm-ecr-setting1"></p>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Helm</tag>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>設定 Helm 自動部署系列 (二) - GitLab CI/CD 設定</title>
    <url>/cicd-by-helm-gitlab-cicd/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Helm 支援使用提供 OCI(Open Container Initiative) 標準的 Helm Chart Repository，因此像 AWS ECR 也可以當作 Chart Repository</p>
<h2 id="手動部署"><a href="#手動部署" class="headerlink" title="手動部署"></a>手動部署</h2><ol>
<li>使用 SSO 登入 AWS 帳戶</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aws sso login --proflie &lt;permission-set&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>登入 ECR，讓 Helm 可以進行存取</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aws ecr get-login-password --region ap-northeast-1 | helm registry login --username AWS --password-stdin &lt;account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打包 chart<ul>
<li>chart_path：當前目錄指定 <code>.</code>，相對目錄則指定<code>相對路徑</code></li>
</ul>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm package &lt;chart_path&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>部署到 ECR 上<ul>
<li>chart_name：輸入在 Chart.yaml 檔案的 name 欄位</li>
</ul>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm push &lt;chart_name&gt;-*.tgz oci://&lt;account <span class="built_in">id</span>&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/</span><br></pre></td></tr></table></figure>

<h2 id="使用-GitLab-CI-自動化部署"><a href="#使用-GitLab-CI-自動化部署" class="headerlink" title="使用 GitLab CI 自動化部署"></a>使用 GitLab CI 自動化部署</h2><p>手動做完之後，就離自動化不遠了～</p>
<ol>
<li><p>設定 AWS User 或 Rule，並加上 CI&#x2F;CD 的 variables 內</p>
<p> <img src="/../images/helm/cicd-by-helm-gitlab-cicd1.png" alt="cicd-by-helm-gitlab-cicd1"></p>
</li>
<li><p>將手動指令寫成 .gitlab-ci.yml 檔案</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">image:</span><br><span class="line">  name: alpine/helm:3.9.4</span><br><span class="line">  entrypoint: [<span class="string">&quot;&quot;</span>]</span><br><span class="line"></span><br><span class="line">stages:</span><br><span class="line">  - <span class="string">&quot;build&quot;</span></span><br><span class="line">  - <span class="string">&quot;deploy&quot;</span></span><br><span class="line"></span><br><span class="line">workflow:</span><br><span class="line">  rules:</span><br><span class="line">    - <span class="keyword">if</span>: <span class="variable">$CI_COMMIT_BRANCH</span> == <span class="string">&#x27;master&#x27;</span></span><br><span class="line"></span><br><span class="line">variables:</span><br><span class="line">  AWS_REGION: ap-northeast-1</span><br><span class="line">  ECR_REGISTRY: YOUR_ECR_REGISTRY</span><br><span class="line">  CHART_NAME: YOUR_CHART_NAME</span><br><span class="line">  CHART_PATH: YOUR_CHART_PATH</span><br><span class="line"></span><br><span class="line">build-chart:</span><br><span class="line">  stage: build</span><br><span class="line">  script:</span><br><span class="line">    - helm package <span class="variable">$&#123;CHART_PATH&#125;</span></span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      - <span class="string">&quot;<span class="variable">$&#123;CHART_NAME&#125;</span>-*.tgz&quot;</span></span><br><span class="line">    expire_in: <span class="string">&quot;1hr&quot;</span></span><br><span class="line"></span><br><span class="line">deploy-ecr:</span><br><span class="line">  stage: deploy</span><br><span class="line">  before_script:</span><br><span class="line">    - apk add --no-cache aws-cli</span><br><span class="line">    - aws ecr get-login-password --region <span class="variable">$&#123;AWS_REGION&#125;</span> | helm registry login --username AWS --password-stdin <span class="variable">$&#123;ECR_REGISTRY&#125;</span></span><br><span class="line">  script:</span><br><span class="line">    - helm push <span class="variable">$&#123;CHART_NAME&#125;</span>-*.tgz oci://<span class="variable">$&#123;ECR_REGISTRY&#125;</span>/</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="專案架構"><a href="#專案架構" class="headerlink" title="專案架構"></a>專案架構</h2><ul>
<li>目前採取 monorepo 方式存放，stable 資料裡面存放共用的 charts</li>
<li>GitLab CI&#x2F;CD 採取用 Parent-Child Pipeline</li>
</ul>
<h3 id="調整後做法："><a href="#調整後做法：" class="headerlink" title="調整後做法："></a>調整後做法：</h3><ol>
<li><p>外層的 .gitlab-ci.yml</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stages:</span><br><span class="line">  - <span class="string">&quot;trigger&quot;</span></span><br><span class="line"></span><br><span class="line">larave-nginx-chart:</span><br><span class="line">  stage: trigger</span><br><span class="line">  trigger:</span><br><span class="line">    include: stable/laravel-nginx/.gitlab-ci.yml</span><br><span class="line">  rules:</span><br><span class="line">    - changes:</span><br><span class="line">      - stable/laravel-nginx/*</span><br></pre></td></tr></table></figure>
</li>
<li><p>內層的 .gitlab-ci.yml</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">include:</span><br><span class="line">  project: evolutivelabs/shared/ci-templates</span><br><span class="line">  file: /workflows/helm.gitlab-ci.yml</span><br><span class="line"></span><br><span class="line">variables:</span><br><span class="line">  AWS_REGION: ap-northeast-1</span><br><span class="line">  ECR_REGISTRY: &lt;account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com</span><br><span class="line">  CHART_NAME: laravel-nginx-chart</span><br><span class="line">  CHART_PATH: stable/laravel-nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>觸發後 pipeline 畫面</p>
<p> <img src="/../images/helm/cicd-by-helm-gitlab-cicd2.png" alt="cicd-by-helm-gitlab-cicd2"></p>
</li>
<li><p>AWS ECR 上可以看到部署後 Chart</p>
<p> <img src="/../images/helm/cicd-by-helm-gitlab-cicd3.png" alt="cicd-by-helm-gitlab-cicd3"></p>
</li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://betterprogramming.pub/using-gitlab-as-helm-chart-registry-ab4d4ef42833">Using GitLab As Helm Chart Registry</a></li>
<li><a href="https://docs.aws.amazon.com/zh_tw/AmazonECR/latest/userguide/push-oci-artifact.html">手動推送 Helm Chart 到 ECR</a></li>
</ul>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Helm</tag>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>設定 Helm 自動部署系列 (四) - ArgoCD 設定</title>
    <url>/cicd-by-helm-in-argocd/</url>
    <content><![CDATA[<p>設定前建議要先了解 <a href="https://argo-cd.readthedocs.io/en/stable/core_concepts/">ArgoCD 核心概念</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我們是使用 Dependency Chart，所以除了要設定本身專案的 manifest 還要設定 ECR Repo</p>
<h2 id="步驟一、設定-Repository-專案-Manifest"><a href="#步驟一、設定-Repository-專案-Manifest" class="headerlink" title="步驟一、設定 Repository - 專案 Manifest"></a>步驟一、設定 Repository - 專案 Manifest</h2><ul>
<li>選擇 type 為 <code>git</code>，代表該專案有變更就會觸發部署</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;kubernetes_secret_v1&quot;</span> <span class="string">&quot;this&quot;</span> &#123;</span><br><span class="line">  count = var.enable_oci? 0 : 1</span><br><span class="line">  metadata &#123;</span><br><span class="line">    name      = <span class="string">&quot;repo-<span class="variable">$&#123;var.repo&#125;</span>&quot;</span></span><br><span class="line">    namespace = <span class="string">&quot;argocd&quot;</span></span><br><span class="line">    labels = &#123;</span><br><span class="line">      <span class="string">&quot;argocd.argoproj.io/secret-type&quot;</span> : <span class="string">&quot;repository&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  data = &#123;</span><br><span class="line">    name     = <span class="string">&quot;<span class="variable">$&#123;var.repo&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">type</span>     = <span class="string">&quot;git&quot;</span></span><br><span class="line">    url      = data.aws_ssm_parameter.git_url.value</span><br><span class="line">    username = data.aws_ssm_parameter.git_username.value</span><br><span class="line">    password = data.aws_ssm_parameter.git_password.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步驟二、設定-Repository-ECR-Repo"><a href="#步驟二、設定-Repository-ECR-Repo" class="headerlink" title="步驟二、設定 Repository - ECR Repo"></a>步驟二、設定 Repository - ECR Repo</h2><ul>
<li>選擇 type 為 <code>helm</code>、enableOCI 為 <code>true</code>，設定為 helm registry，這樣在透過此 repo 建立 application</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;kubernetes_secret_v1&quot;</span> <span class="string">&quot;helm&quot;</span> &#123;</span><br><span class="line">  count = var.enable_oci? 1 : 0</span><br><span class="line">  metadata &#123;</span><br><span class="line">    name      = <span class="string">&quot;repo-<span class="variable">$&#123;var.repo&#125;</span>&quot;</span></span><br><span class="line">    namespace = <span class="string">&quot;argocd&quot;</span></span><br><span class="line">    labels = &#123;</span><br><span class="line">      <span class="string">&quot;argocd.argoproj.io/secret-type&quot;</span> : <span class="string">&quot;repository&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  data = &#123;</span><br><span class="line">    name      = <span class="string">&quot;<span class="variable">$&#123;var.repo&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">type</span>      = <span class="string">&quot;helm&quot;</span></span><br><span class="line">    enableOCI = <span class="string">&quot;true&quot;</span></span><br><span class="line">    url      = data.aws_ssm_parameter.git_url.value</span><br><span class="line">    username = data.aws_ssm_parameter.git_username.value</span><br><span class="line">    password = data.aws_ssm_parameter.git_password.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以發現建立 Repository 就是建立 K8S 的 Secret，主要是讓 argocd 有權限進行存取</p>
</blockquote>
<p><img src="/../images/helm/cicd-by-helm-in-argocd1.png" alt="cicd-by-helm-in-argocd1"></p>
<h2 id="步驟三、設定-Project"><a href="#步驟三、設定-Project" class="headerlink" title="步驟三、設定 Project"></a>步驟三、設定 Project</h2><ul>
<li>設定該群組權限，可以操作的 source repository 及部署的 destination cluster</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;kubernetes_manifest&quot;</span> <span class="string">&quot;caribou_project&quot;</span> &#123;</span><br><span class="line">  manifest = &#123;</span><br><span class="line">    apiVersion = <span class="string">&quot;argoproj.io/v1alpha1&quot;</span></span><br><span class="line">    kind       = <span class="string">&quot;AppProject&quot;</span></span><br><span class="line">    metadata = &#123;</span><br><span class="line">      name      = <span class="string">&quot;caribou&quot;</span></span><br><span class="line">      namespace = <span class="string">&quot;argocd&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    spec = &#123;</span><br><span class="line">      description = <span class="string">&quot;caribou Project&quot;</span></span><br><span class="line">      sourceRepos = [</span><br><span class="line">        module.repository_caribou_caribou-manifest.url,</span><br><span class="line">        module.repository_caribou_evolabs-charts.url</span><br><span class="line">      ]</span><br><span class="line">      destinations = [</span><br><span class="line">        &#123;</span><br><span class="line">          namespace = <span class="string">&quot;caribou&quot;</span></span><br><span class="line">          server    = module.cluster_el-internal_stag.server</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          namespace = <span class="string">&quot;caribou&quot;</span></span><br><span class="line">          server    = module.cluster_el-internal_prod.server</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步驟四、安裝-ArgoCD-ECR-Updater"><a href="#步驟四、安裝-ArgoCD-ECR-Updater" class="headerlink" title="步驟四、安裝 ArgoCD-ECR-Updater"></a>步驟四、安裝 ArgoCD-ECR-Updater</h2><p>由於 <code>aws ecr get-login-password</code> 取得的密碼，超過 12 小時就會過期，所以我們需要用 k8s 中的 cronjob 排程機制固定去更新密碼，剛好有別人寫好的 <a href="https://github.com/smcavallo/argocd-ecr-updater">argocd-ecr-updater</a> helm 可以使用 👍</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;helm_release&quot;</span> <span class="string">&quot;evolabs-charts-updater&quot;</span> &#123;</span><br><span class="line">  name             = <span class="string">&quot;argocd-ecr-updater&quot;</span></span><br><span class="line">  chart            = <span class="string">&quot;argocd-ecr-updater&quot;</span></span><br><span class="line">  repository       = <span class="string">&quot;https://mike7515.github.io/argocd-ecr-updater&quot;</span></span><br><span class="line">  version          = <span class="string">&quot;2.4.0&quot;</span></span><br><span class="line">  namespace        = <span class="string">&quot;argocd-ecr&quot;</span></span><br><span class="line">  recreate_pods    = <span class="literal">true</span></span><br><span class="line">  <span class="built_in">set</span> &#123;</span><br><span class="line">    name  = <span class="string">&quot;cronjob.name&quot;</span></span><br><span class="line">    value = <span class="string">&quot;evolabs-charts-updater&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">set</span> &#123;</span><br><span class="line">    name = <span class="string">&quot;cronjob.argoNamespace&quot;</span></span><br><span class="line">    value = <span class="string">&quot;argocd&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">set</span> &#123;</span><br><span class="line">    name = <span class="string">&quot;cronjob.awsRegion&quot;</span></span><br><span class="line">    value = <span class="string">&quot;ap-northeast-1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">set</span> &#123;</span><br><span class="line">    name = <span class="string">&quot;cronjob.awsAccount&quot;</span></span><br><span class="line">    value = <span class="string">&quot;672241579543&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">set</span> &#123;</span><br><span class="line">    name = <span class="string">&quot;cronjob.argocdRepoSecretName&quot;</span></span><br><span class="line">    value = <span class="string">&quot;repo-evolabs-charts&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步驟五、建立-Application"><a href="#步驟五、建立-Application" class="headerlink" title="步驟五、建立 Application"></a>步驟五、建立 Application</h2><ul>
<li>設定專案的 Manifest 當作 source repository</li>
<li>設定要部署的 cluster 當作 destination</li>
</ul>
<p><img src="/../images/helm/cicd-by-helm-in-argocd2.png" alt="cicd-by-helm-in-argocd2"></p>
<h2 id="步驟六、驗收"><a href="#步驟六、驗收" class="headerlink" title="步驟六、驗收"></a>步驟六、驗收</h2><p><img src="/../images/helm/cicd-by-helm-in-argocd3.png" alt="cicd-by-helm-in-argocd3"></p>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Helm</tag>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>設定 Helm 自動部署系列 (三) - 安裝 ECR 上面的 Helm</title>
    <url>/cicd-by-helm-in-ecr/</url>
    <content><![CDATA[<h2 id="步驟一、登入-AWS-ECR"><a href="#步驟一、登入-AWS-ECR" class="headerlink" title="步驟一、登入 AWS ECR"></a>步驟一、登入 AWS ECR</h2><ul>
<li>使用 SSO 登入 AWS 帳戶</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aws sso login --proflie &lt;permission-set&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>登入 ECR，讓 Helm 可以進行存取</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aws ecr get-login-password --region ap-northeast-1 | helm registry login --username AWS --password-stdin &lt;account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com</span><br></pre></td></tr></table></figure>

<h2 id="步驟二、建立-Manifest-資料夾"><a href="#步驟二、建立-Manifest-資料夾" class="headerlink" title="步驟二、建立 Manifest 資料夾"></a>步驟二、建立 Manifest 資料夾</h2><ul>
<li>建立專案後端的 staging 環境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> caribou-manifest/backend/staging</span><br></pre></td></tr></table></figure>

<ul>
<li>在該資料夾建立 Chart.yaml 檔案，定義 dependencies</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v2</span><br><span class="line">name: caribou-backend</span><br><span class="line">description: Helm chart used <span class="keyword">for</span> deploying Laravel Application.</span><br><span class="line"><span class="built_in">type</span>: application</span><br><span class="line">version: 0.1.0</span><br><span class="line"></span><br><span class="line">dependencies:</span><br><span class="line">  - name: laravel-nginx-chart</span><br><span class="line">    version: <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">    repository: <span class="string">&quot;oci://672241579543.dkr.ecr.ap-northeast-1.amazonaws.com&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>下載依賴的 chart</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm dependency build</span><br></pre></td></tr></table></figure>

<ul>
<li>更新依賴的 chart</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm dependency update</span><br></pre></td></tr></table></figure>

<h2 id="步驟三、安裝-Chart"><a href="#步驟三、安裝-Chart" class="headerlink" title="步驟三、安裝 Chart"></a>步驟三、安裝 Chart</h2><ul>
<li>建立 values.yaml<ul>
<li>要變更 chart 的 values，必須前面要多加一層 chart name，以下方例子就是 <code>laravel-nginx-chart</code></li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">laravel-nginx-chart:</span><br><span class="line">  nginxService:</span><br><span class="line">    repository: 672241579543.dkr.ecr.ap-northeast-1.amazonaws.com/caribou-backend-nginx</span><br><span class="line">    pullPolicy: IfNotPresent</span><br><span class="line">    tag: 2436e363</span><br><span class="line">    <span class="built_in">type</span>: NodePort</span><br><span class="line">    externalPort: 80</span><br><span class="line">    internalPort: 80</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 chart 建立環境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> caribou-manifest/backend/staging</span><br><span class="line"></span><br><span class="line">helm install caribou-backend-stag .</span><br></pre></td></tr></table></figure>

<ul>
<li>看到下方訊息即完成</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME: caribou-backend-stag</span><br><span class="line">LAST DEPLOYED: Thu Sep 15 17:27:10 2022</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Helm</tag>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeDeploy 錯誤盤查紀錄</title>
    <url>/codedeploy-error-log/</url>
    <content><![CDATA[<h2 id="問題一、CodeDeploy-agent-was-not-able-to-receive-the-lifecycle-event-的錯誤訊息"><a href="#問題一、CodeDeploy-agent-was-not-able-to-receive-the-lifecycle-event-的錯誤訊息" class="headerlink" title="問題一、CodeDeploy agent was not able to receive the lifecycle event 的錯誤訊息"></a>問題一、CodeDeploy agent was not able to receive the lifecycle event 的錯誤訊息</h2><p><strong>盤查問題</strong></p>
<ul>
<li><p>Code Deploy 錯誤訊息</p>
<p>  <img src="/../images/aws/codedeploy-error-log1.png" alt="codedeploy-error-log1"></p>
</li>
<li><p>連線到 EC2 查看 code deploy agent log</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$ cat /<span class="keyword">var</span>/log/aws/codedeploy-agent/codedeploy-agent.<span class="property">log</span></span><br></pre></td></tr></table></figure>

<p>  發現 code deploy 監聽 version 的 process，因為資源不夠而被關掉</p>
<p>  <img src="/../images/aws/codedeploy-error-log2.png" alt="codedeploy-error-log2"></p>
</li>
<li><p>查看 12&#x2F;12 那天的 CPU metric 高達 99%</p>
<p>  <img src="/../images/aws/codedeploy-error-log3.png" alt="codedeploy-error-log3"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>CodeDeploy</tag>
      </tags>
  </entry>
  <entry>
    <title>如何建立自己的 Helm</title>
    <url>/create-own-helm-chart/</url>
    <content><![CDATA[<h2 id="建立步驟"><a href="#建立步驟" class="headerlink" title="建立步驟"></a>建立步驟</h2><ol>
<li><p>透過 CLI 的 create 語法建立樣板</p>
<ul>
<li><code>helm create helm-demo</code></li>
</ul>
</li>
<li><p>修改 values.yaml</p>
<ul>
<li><p>nameOverride：<code>helm-demo-app</code></p>
</li>
<li><p>fullnameOverride：<code>helm-demo-chart</code></p>
</li>
<li><p>serviceAccount.name：<code>helm-demo-sa</code></p>
</li>
<li><p>service.type：<code>NodePort</code></p>
</li>
<li><p>resources</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">resources</span>:</span><br><span class="line">  <span class="attr">limits</span>:</span><br><span class="line">    <span class="attr">cpu</span>: 100m</span><br><span class="line">    <span class="attr">memory</span>: 128Mi</span><br><span class="line">  <span class="attr">requests</span>:</span><br><span class="line">    <span class="attr">cpu</span>: 100m</span><br><span class="line">    <span class="attr">memory</span>: 128Mi</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用 install 語法安裝元件</p>
<ul>
<li><code>cd helm-demo</code></li>
<li><code>helm install my-demo-chart . -n default</code></li>
</ul>
</li>
<li><p>查看部署狀態</p>
<ul>
<li>安裝過的 chart： <code>helm list</code></li>
<li>安裝過的元件：<code>kubectl get all -n default</code></li>
</ul>
</li>
<li><p>開啟瀏覽器檢查網頁</p>
<ul>
<li>取得 port：<code>kubectl get svc</code></li>
</ul>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">NAME</span>              <span class="variable constant_">TYPE</span>        <span class="variable constant_">CLUSTER</span>-<span class="variable constant_">IP</span>     <span class="variable constant_">EXTERNAL</span>-<span class="variable constant_">IP</span>   <span class="title function_">PORT</span>(S)        <span class="variable constant_">AGE</span></span><br><span class="line">helm-demo-chart   <span class="title class_">NodePort</span>    <span class="number">10.97</span><span class="number">.56</span><span class="number">.253</span>   &lt;none&gt;        <span class="number">80</span>:<span class="number">30559</span>/<span class="variable constant_">TCP</span>   2m15s</span><br></pre></td></tr></table></figure>

<ul>
<li>打開 <code>[localhost:30559](http://localhost:30559)</code> 網頁，可以看到 Welcome to nginx! 文字</li>
</ul>
</li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><strong><strong><a href="https://opensource.com/article/20/5/helm-charts">How to make a Helm chart in 10 minutes</a></strong></strong></li>
<li><strong><strong><a href="https://github.com/renoki-co/laravel-helm-demo">renoki-co&#x2F;laravel-helm-demo</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Helm</tag>
      </tags>
  </entry>
  <entry>
    <title>資料庫專有名詞(必讀)</title>
    <url>/database-attributes/</url>
    <content><![CDATA[<h2 id="資料庫擴展要點"><a href="#資料庫擴展要點" class="headerlink" title="資料庫擴展要點"></a>資料庫擴展要點</h2><p><strong>Heavy Read</strong></p>
<ul>
<li>Cache</li>
<li>Replica</li>
</ul>
<p><strong>高併發</strong></p>
<ul>
<li>Multi-Master RDS For Aurora</li>
</ul>
<p><strong>量太大</strong></p>
<ul>
<li>分資料表 (Partition)</li>
</ul>
<h2 id="線上交易處理-Online-Transactional-Processing-OLTP"><a href="#線上交易處理-Online-Transactional-Processing-OLTP" class="headerlink" title="線上交易處理(Online Transactional Processing OLTP)"></a>線上交易處理(Online Transactional Processing OLTP)</h2><ul>
<li>指系統能夠處理大量的更新以及新增的查詢</li>
<li>Transactional 代表處理讀和寫</li>
<li>數據的正確性及一致性是首要達到的目標之一，所以常在 OLTP 中聽到 ACID<ul>
<li>一個事務 (Transaction) 完成後才會執行下一筆，確保整個系統的資料一致性</li>
<li>OLTP 同時會有多位使用者操作，要確保每一個操作使用者能拿到最終的狀態，不然可能會有數據不一致以及不同步問題</li>
</ul>
</li>
</ul>
<h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><p><strong>Atomicity(原子性)</strong></p>
<ul>
<li>Transaction 要馬全部成功、要馬全部失敗，不能有部分結果</li>
</ul>
<p><strong>Consistency(一致性)</strong></p>
<ul>
<li>Transaction 前後，資料庫的完整性沒有被破壞</li>
<li>寫入的資料必須完全符合所有(Constraint, Trigger, Rollback)特性</li>
</ul>
<p><strong>Isolation(隔離性)</strong></p>
<ul>
<li>資料庫允許多個 Transaction 同時對其資料進行操作，但也同時確保這些 Transaction 的交叉執行，不會導致數據的不一致</li>
</ul>
<p><strong>Durability(耐久性)</strong></p>
<ul>
<li>Transaction 完成後，對資料的操作就是永久的，即便系統故障也不會丟失</li>
</ul>
<h2 id="線上分析處理-Online-Analytical-Processing-OLAP"><a href="#線上分析處理-Online-Analytical-Processing-OLAP" class="headerlink" title="線上分析處理(Online Analytical Processing OLAP)"></a>線上分析處理(Online Analytical Processing OLAP)</h2><ul>
<li><strong>讓數據聚合 (data aggregation) 以及批次處理 (Batch processing)</strong></li>
<li>大部分是用來做歷史資料的分析以及報告</li>
<li>可以快速使用 Query 去得到數據洞察得到數據聚合後的結果</li>
<li>銀行有 OLTP 系統確保資料一致性，就能用 OLAP 系統做報告及商業智慧分析等應用<ul>
<li>撈全台灣的使用者在過去一個月的交易做分析</li>
</ul>
</li>
</ul>
<h2 id="OLTP-與-OLAP-整合與差異"><a href="#OLTP-與-OLAP-整合與差異" class="headerlink" title="OLTP 與 OLAP 整合與差異"></a>OLTP 與 OLAP 整合與差異</h2><p><img src="/../images/learning/database-attributes8.png" alt="database-attributes8"><br><img src="/../images/learning/database-attributes9.png" alt="database-attributes9"></p>
<h2 id="關聯式資料庫-RDBMS"><a href="#關聯式資料庫-RDBMS" class="headerlink" title="關聯式資料庫 RDBMS"></a>關聯式資料庫 RDBMS</h2><ul>
<li><p><strong><strong><a href="https://www.youtube.com/watch?v=7yYbbKyyHvw&ab_channel=%E4%B8%8A%E7%8F%AD%E4%BA%86%E5%95%8A%E5%93%88">關聯式資料庫到底是什麼|生活中怎麼表達資料庫概念</a></strong></strong></p>
</li>
<li><p>MySQL &#x2F; MariaDB &#x2F; Postgresql 都支援 Transaction 並具備 ACID 特性</p>
</li>
<li><p>同時 ACID 保證可以到 Row 層級(MySQL5.5 後 InnoDB Default 是 Row Lock)</p>
</li>
<li><p>Transaction 是關聯式資料庫的強項</p>
</li>
<li><p>成本擴展的挑戰</p>
<p>  <img src="/../images/learning/database-attributes1.png" alt="database-attributes1"></p>
</li>
</ul>
<p><strong>存在缺點</strong></p>
<ul>
<li>Schema 擴展不方便(修改可能會長時間鎖表)</li>
<li>全文搜尋功能弱</li>
</ul>
<h2 id="讀寫分離-R-x2F-W-Separation"><a href="#讀寫分離-R-x2F-W-Separation" class="headerlink" title="讀寫分離 (R&#x2F;W Separation)"></a>讀寫分離 (R&#x2F;W Separation)</h2><ul>
<li>Master 拿來寫，Replica 拿來讀</li>
<li>通常是資料庫初步擴充手段 (適合 Read 大於 Write 的情境)</li>
<li>MySQL 複製延遲時間 1 ～ 60 秒都有可以</li>
</ul>
<h2 id="RDS-Proxy"><a href="#RDS-Proxy" class="headerlink" title="RDS Proxy"></a>RDS Proxy</h2><ul>
<li><p>用來處理資料庫流量無法預測的突增情況，避免 Connection Fail 情況發生</p>
</li>
<li><p>應用程式更具可擴展性、提高對數據庫遇故障時的恢復能力</p>
<p>  <img src="/../images/learning/database-attributes2.png" alt="database-attributes2"></p>
</li>
</ul>
<h2 id="分表-Partition"><a href="#分表-Partition" class="headerlink" title="分表 (Partition)"></a>分表 (Partition)</h2><ul>
<li><p>垂直或水平切割，複雜性都會大大提升</p>
<ul>
<li>提升 Query 數量</li>
<li>商業邏輯容易有所遺落，造成資料不一致</li>
</ul>
</li>
<li><p>業務資料集中在某些 Column上 ⇒ 適合垂直切割</p>
</li>
<li><p>業務資料較均勻分佈 ⇒ 適合水平切割</p>
<p>  <img src="/../images/learning/database-attributes3.png" alt="database-attributes3"></p>
</li>
</ul>
<h2 id="分片-Sharding"><a href="#分片-Sharding" class="headerlink" title="分片 (Sharding)"></a>分片 (Sharding)</h2><ul>
<li><p>Sharding Key 會是各節點平衡的重點</p>
<p>  <img src="/../images/learning/database-attributes4.png" alt="database-attributes4"></p>
</li>
</ul>
<h2 id="NewSQL"><a href="#NewSQL" class="headerlink" title="NewSQL"></a>NewSQL</h2><ul>
<li>NewSQL &#x3D; RDBMS (ACID) + SQL + NoSQL (擴展性)</li>
<li>擁有 SQL 的 ACID 交易特性，同時也想擁抱 NoSQL 的擴展性能</li>
<li>類似產品 Aurora 計算與儲存分離<ul>
<li>將 MySQL 本體弱化為無狀態節點(stateless)，儲存拆離至 EBS，Redo log 拆離至 S3</li>
<li>使用共享儲存層(EBS)解決擴展問題，將原本效能瓶頸為 I&#x2F;O 轉移為 Network</li>
<li>無狀態節點，讓升級更容易做到不停機升級 (Zero downtime patching)</li>
</ul>
</li>
<li>以 AWS 解決方案來看<ul>
<li>RDS 為 oldSQL</li>
<li>Aurora 為 NewSQL</li>
</ul>
</li>
</ul>
<h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><ul>
<li><p>本質上是犧牲 ACID 中的某幾個特性</p>
</li>
<li><p>不能盲目地迷信 NoSQL 是銀彈，而是應該將 NoSQL 作為 SQL 的一個加強方式</p>
</li>
<li><p>常見使用方案</p>
<ul>
<li>Key&#x2F;Value Store：解決 RDBMS  無法儲存資料結構的問題 e.g. redis</li>
<li>Document DB：解決 RDBMS 強 Schema 約束的問題 e.g. MongoDB</li>
<li>Colume-Basae DB：解決 RDBMS 大數據場景下的 I&#x2F;O 問題 e.g. HBase</li>
<li>全文搜尋引擎：解決 RDBMS 的全文搜尋性能問題 e.g. Elasticsearch</li>
</ul>
</li>
<li><p>AWS 產品類型</p>
<p>  <img src="/../images/learning/database-attributes5.png" alt="database-attributes5"></p>
</li>
</ul>
<h2 id="RDBMS-和-NoSQL-DB-的選型"><a href="#RDBMS-和-NoSQL-DB-的選型" class="headerlink" title="RDBMS 和 NoSQL DB 的選型"></a>RDBMS 和 NoSQL DB 的選型</h2><p><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E9%81%B8%E6%93%87%E8%B3%87%E6%96%99%E5%BA%AB-db-%E7%9A%84%E4%BA%94%E5%A4%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85-a719e134e7d">選擇資料庫 (DB) 的五大注意事項</a></strong></p>
<ul>
<li>管理型系統 (運營類系統)<ul>
<li>首選 RDBMS</li>
</ul>
</li>
<li>大流量系統 (電商單品頁的某個服務)<ul>
<li>後台選 RDBMS，前台選記憶體(Key&#x2F;Value) 儲存</li>
</ul>
</li>
<li>日誌型系統 (原始數據)<ul>
<li>選 Colume-Based DB，事件記錄搜尋選搜尋引擎</li>
</ul>
</li>
<li>搜尋型系統 (站內搜尋，非通用搜尋，如商品搜尋)<ul>
<li>後台選 RDBMS，前台選搜尋引擎</li>
</ul>
</li>
<li>事件型系統 (庫存、交易、記帳)<ul>
<li>選關聯型 + cache + 一致性協議，或新型 RDBMS</li>
</ul>
</li>
<li>離線計算 (大量數據分析)<ul>
<li>首選 Colume-Based DB，RDBMS 也可以</li>
</ul>
</li>
<li>即時計算 (即時監控)<ul>
<li>可以選 Time-Series DB，或 Colume-Based DB</li>
</ul>
</li>
</ul>
<h2 id="資料表正規化"><a href="#資料表正規化" class="headerlink" title="資料表正規化"></a>資料表正規化</h2><ul>
<li>使資料重複性(Redundancy)降到最低<ul>
<li>減少開發&#x2F;儲存成本</li>
<li>避免資料分歧(強一制性)</li>
</ul>
</li>
<li>通常做到 3NF</li>
<li>1NF<ul>
<li>一個欄位裡不能放多個值</li>
<li>每張表都要有 Primary Key(PK)</li>
</ul>
</li>
<li>2NF<ul>
<li>滿足 1NF</li>
<li>將部份對應的資料拆出來</li>
<li>取得文章資料也想同時得到作者名，如果把 user_name 欄位也開在 post table，這樣就不符合 2NF</li>
</ul>
</li>
<li>3NF<ul>
<li>滿足 2NF</li>
<li>各欄位與 PK 間沒有間接相依的關係</li>
<li>不要存放可被直接推算出的欄位<ul>
<li>舉例來說：訂單表格中，同時有單價(price)、數量(quantity)、總價(total)，但總價是可以被推算出來的所以不該出現</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="資料表反正規化"><a href="#資料表反正規化" class="headerlink" title="資料表反正規化"></a>資料表反正規化</h2><ul>
<li>正規化程度愈高，代表資料關聯性的約束性也愈高</li>
<li>資料被切分為多張關聯表格，DB 的 I&#x2F;O 將更加繁忙<ul>
<li>所以必要的時後也必須做 **”Denormalized”**，以避免無窮盡的 JOINs</li>
</ul>
</li>
</ul>
<h2 id="正規化與反正規化比較"><a href="#正規化與反正規化比較" class="headerlink" title="正規化與反正規化比較"></a>正規化與反正規化比較</h2><p><img src="/../images/learning/database-attributes6.png" alt="database-attributes6"></p>
<p><img src="/../images/learning/database-attributes7.png" alt="database-attributes7"></p>
<h2 id="資料表正規化考量"><a href="#資料表正規化考量" class="headerlink" title="資料表正規化考量"></a>資料表正規化考量</h2><ul>
<li>Heavy Read 拆解<ul>
<li>高頻查詢所用的表，建議把不相關的資料做正規劃拆解</li>
<li>舉例來說: 將一張 users 表拆成 users 及 user_profiles 兩張表</li>
</ul>
</li>
<li>Text 內容做拆表<ul>
<li>Text 索引與一般 Btree 不同，更新也會產生大量碎片</li>
<li>大部分的 Select Query 很有可能把不需要的 Text 資料也一同拉出來，建議可拆表做關聯</li>
</ul>
</li>
</ul>
<h2 id="資料表欄位設計"><a href="#資料表欄位設計" class="headerlink" title="資料表欄位設計"></a>資料表欄位設計</h2><ul>
<li>有標準的就按照開 ISO,RFC,Schema.org<ul>
<li>身分證、發票、幣值、區碼、電話號碼</li>
</ul>
</li>
<li>Char 比 Varchar 搜尋速度更快<ul>
<li>固定長度：選 Char</li>
<li>高頻更新：選 Char</li>
<li>彈性長度：選 Varchar(Size愈小愈好)</li>
</ul>
</li>
<li>單選 ENUM 可用數字(常數)替代<ul>
<li>數字型態比字串型態搜尋還快</li>
<li>Status 由程式控制常數定義(閱讀不易需查文件)</li>
<li>TINYINT 比 ENUM 省空間</li>
</ul>
</li>
</ul>
<h2 id="RDBMS-最討厭異動-Schema"><a href="#RDBMS-最討厭異動-Schema" class="headerlink" title="RDBMS 最討厭異動 Schema"></a>RDBMS 最討厭異動 Schema</h2><ul>
<li>隨著時間演進，資料會愈長愈多，業務需求會持續變化</li>
<li>當資料庫內筆數變多時，要異動 Scema 的成本就愈來愈高</li>
<li>設計 Schema 時觀察<ul>
<li>哪些需求會變成<strong>變數</strong>才是工程師在意的</li>
<li>當需求出現的時候要<strong>預想變數</strong>有可能是什麼</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title>如何部署到 Artifact Hub</title>
    <url>/deploy-helm-chart-to-artifact-hub/</url>
    <content><![CDATA[<h2 id="步驟一、打包現有的-Chart"><a href="#步驟一、打包現有的-Chart" class="headerlink" title="步驟一、打包現有的 Chart"></a>步驟一、打包現有的 Chart</h2><ol>
<li><p>使用 <code>helm package &lt;chart name&gt;</code> 進行打包</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Successfully</span> packaged chart and saved it <span class="attr">to</span>: <span class="regexp">/Users/u</span>ser/<span class="title class_">Desktop</span>/helm-demo-<span class="number">0.1</span><span class="number">.0</span>.<span class="property">tgz</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>建立空資料夾 <code>helm-demo-chart</code> ，將打包的壓縮檔搬移進去</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> helm-demo-0.1.0.tgz helm-demo-chart</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立 index.yaml 檔案，一個 valid helm chart 必須有這個檔案</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo index helm-demo-chart</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立 Readme.md 檔案，撰寫安裝方式及使用說明</p>
</li>
</ol>
<h2 id="步驟二、部署到-GitHub-並建立-Pages"><a href="#步驟二、部署到-GitHub-並建立-Pages" class="headerlink" title="步驟二、部署到 GitHub 並建立 Pages"></a>步驟二、部署到 GitHub 並建立 Pages</h2><ol>
<li><p>建立 GitHub 專案，名稱為 helm-demo-chart</p>
</li>
<li><p>本地專案切出 gh-pages 分支，並推到遠端</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;ssh url&gt;</span><br><span class="line">git checkout -b gh-pages</span><br><span class="line">git push -u origin gh-pages</span><br></pre></td></tr></table></figure>

<p> 推完後專案的架構</p>
<p> <img src="/../images/helm/deploy-helm-chart-to-artifact-hub1.png" alt="deploy-helm-chart-to-artifact-hub1"></p>
</li>
<li><p>到專案的 setting&#x2F;page 查看 url</p>
<p> <img src="/../images/helm/deploy-helm-chart-to-artifact-hub2.png" alt="deploy-helm-chart-to-artifact-hub2"></p>
</li>
</ol>
<h2 id="步驟三、新增到-Artifact-Hub"><a href="#步驟三、新增到-Artifact-Hub" class="headerlink" title="步驟三、新增到 Artifact Hub"></a>步驟三、新增到 Artifact Hub</h2><ol>
<li><p>登入完帳戶，點擊 Control Panel</p>
<p> <img src="/../images/helm/deploy-helm-chart-to-artifact-hub3.png" alt="deploy-helm-chart-to-artifact-hub3"></p>
</li>
<li><p>新增 Repository</p>
<p> <img src="/../images/helm/deploy-helm-chart-to-artifact-hub4.png" alt="deploy-helm-chart-to-artifact-hub4"></p>
</li>
<li><p>新增完後要等 Artifact Hub 發佈，大約 10 分鐘左右</p>
<p> <img src="/../images/helm/deploy-helm-chart-to-artifact-hub5.png" alt="deploy-helm-chart-to-artifact-hub5"></p>
</li>
<li><p>發佈完後會顯示綠色勾勾，並可以被其他人搜尋並安裝</p>
<p> <img src="/../images/helm/deploy-helm-chart-to-artifact-hub6.png" alt="deploy-helm-chart-to-artifact-hub6"></p>
<p> 搜尋結果</p>
<p> <img src="/../images/helm/deploy-helm-chart-to-artifact-hub7.png" alt="deploy-helm-chart-to-artifact-hub7"></p>
</li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://leeyoongti.medium.com/helm-in-kubernetes-part-4-publish-helm-chart-to-artifact-hub-using-github-pages-ab7f55904faa">Helm In Kubernetes — Part 4: Publish Helm Chart To Artifact Hub using Github Pages</a></li>
</ul>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Helm</tag>
      </tags>
  </entry>
  <entry>
    <title>如何部署前端專案(SPA)到 CloudFront</title>
    <url>/deploy-spa-project-by-cf-cdn/</url>
    <content><![CDATA[<h2 id="為何考慮-CDN"><a href="#為何考慮-CDN" class="headerlink" title="為何考慮 CDN"></a>為何考慮 CDN</h2><ul>
<li>純靜態資源用 CDN 可以壓縮內容並做快取，降低網路延遲及提升使用體驗</li>
<li>搭配 WAF 防火牆，提升安全性</li>
<li>使用 Signed URL 及 Signed Cookie 限制存取權限</li>
<li>設定 Behavior 串 Lambda 做 resize image 行為等其他應用</li>
</ul>
<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><p><strong>步驟一、建立 S3 Bucket</strong></p>
<ul>
<li>輸入 bucket name 及選擇 region</li>
<li>Object Ownership 勾選 ACL enabled 及 Bucket owner preferred</li>
</ul>
<p><img src="/../images/aws/deploy_spa_project_by_cf_cdn1.png" alt="deploy_spa_project_by_cf_cdn1"></p>
<ul>
<li>其他設定照預設即可</li>
</ul>
<p><strong>步驟二、撰寫 .gitlab-ci.yml</strong></p>
<ul>
<li><p>需先設定 CI&#x2F;CD variables (AWS Key&#x2F;Secret、Env)</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">public.ecr.aws/docker/library/node:18-alpine3.15</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">prepare</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span> <span class="meta">&amp;global_cache</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">node_cache</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line">  <span class="attr">policy:</span> <span class="string">pull</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">prepare</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*global_cache</span></span><br><span class="line">    <span class="attr">policy:</span> <span class="string">pull-push</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">=~</span> <span class="string">/\b(staging|production)\b/</span></span><br><span class="line"></span><br><span class="line"><span class="string">.build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*global_cache</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apk</span> <span class="string">add</span> <span class="string">gettext</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">envsubst</span> <span class="string">&lt;</span> <span class="string">.env.example</span> <span class="string">&gt;</span> <span class="string">.env</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:staging:</span></span><br><span class="line">  <span class="attr">extends:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.build</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">staging</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">==</span> <span class="string">&#x27;staging&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:production:</span></span><br><span class="line">  <span class="attr">extends:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.build</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">production</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">==</span> <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">.deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">public.ecr.aws/docker/library/python:latest</span></span><br><span class="line">  <span class="attr">before_script:</span> []</span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">awscli</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">aws</span> <span class="string">s3</span> <span class="string">sync</span> <span class="string">dist</span> <span class="string">$&#123;S3_PATH&#125;</span> <span class="string">--delete</span> <span class="string">--acl</span> <span class="string">bucket-owner-full-control</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:staging:</span></span><br><span class="line">  <span class="attr">extends:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.deploy</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">staging</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">S3_PATH:</span> <span class="string">s3://web2.rts-stag.be</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">==</span> <span class="string">&#x27;staging&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:production:</span></span><br><span class="line">  <span class="attr">extends:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.deploy</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">production</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">S3_PATH:</span> <span class="string">s3://web2.rts-stag.be</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">==</span> <span class="string">&#x27;production&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步驟三、設定 S3 Bucket Policy，允許 pipeline 可以部署</strong></p>
<ul>
<li><p>設定 Pipeline 執行角色操作 S3 權限</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Version&quot;:</span> <span class="string">&quot;2008-10-17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Id&quot;:</span> <span class="string">&quot;PolicyForCloudFrontPrivateContent&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Statement&quot;:</span> [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Effect&quot;:</span> <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Principal&quot;:</span> &#123;</span><br><span class="line">                <span class="attr">&quot;AWS&quot;:</span> <span class="string">&quot;arn:aws:iam::xxx:user/rts-frontend-pipeline&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;Action&quot;:</span> [</span><br><span class="line">                <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:PutObject&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:DeleteObject&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;Resource&quot;:</span> <span class="string">&quot;arn:aws:s3:::&lt;bucket name&gt;/*&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Effect&quot;:</span> <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Principal&quot;:</span> &#123;</span><br><span class="line">                <span class="attr">&quot;AWS&quot;:</span> <span class="string">&quot;arn:aws:iam::xxx:user/rts-frontend-pipeline&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;Action&quot;:</span> <span class="string">&quot;s3:ListBucket&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Resource&quot;:</span> <span class="string">&quot;arn:aws:s3:::&lt;bucket name&gt;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步驟四、建立 ACM</strong></p>
<ul>
<li><p>選擇 us-east-1 Region (CloudFront 只能選擇該 Region 的 SSL 憑證)</p>
</li>
<li><p>建立完到 route53 建立 CNAME 做驗證，驗證過才可以被 CF 使用</p>
<p>  <img src="/../images/aws/deploy_spa_project_by_cf_cdn2.png" alt="deploy_spa_project_by_cf_cdn2"></p>
</li>
</ul>
<p><strong>步驟五、建立 CloudFront 當作 CDN</strong></p>
<ul>
<li><p>Origin 區塊</p>
<ul>
<li>Origin Domain 選擇前面建立的 S3 Bucket</li>
<li>Origin Access 選擇 Origin access control settings (recommended)</li>
</ul>
</li>
<li><p>Default cache behavior 區塊</p>
<ul>
<li>Viewer protocol policy 選擇 Redirect HTTP to HTTPS</li>
</ul>
</li>
<li><p>Settings 區塊</p>
<ul>
<li>Alternate domain name (CNAME) 輸入 Custom Domain 對應到 Route53 對應</li>
<li>Custom SSL certificate 選擇前面建立的 SSL 憑證</li>
</ul>
</li>
<li><p>其他設定照預設即可</p>
</li>
<li><p>建立完後設定 Error Pages</p>
<ul>
<li><p>設定 403, 404 Status Code 要導引到 index.html</p>
<p>  <img src="/../images/aws/deploy_spa_project_by_cf_cdn3.png" alt="deploy_spa_project_by_cf_cdn3"></p>
</li>
</ul>
<blockquote>
<p>預設 HTTP Path 對應 S3 路徑，但前端使用 SPA 方式只會有 index.html 對應各種 HTTP Path，如果沒設定 error page 的 redirect 會出現 Access Denied 錯誤訊息 ⇒ 參考此<a href="https://dev.to/aws-builders/how-to-preserve-spa-route-path-in-the-browser-using-aws-cloudfront-oai">連結</a></p>
</blockquote>
</li>
</ul>
<p><strong>步驟六、設定 S3 Bucket Policy，允許 CDN 可以存取 S3</strong></p>
<ul>
<li><p>到 Cloudfront 複製 Policy，並貼到 S3 Bucket Policy</p>
<p>  <img src="/../images/aws/deploy_spa_project_by_cf_cdn4.png" alt="deploy_spa_project_by_cf_cdn4"></p>
</li>
</ul>
<p><strong>步驟七、設定 Route53 Alias 到 CDN</strong></p>
<ul>
<li><p>設定畫面</p>
<p>  <img src="/../images/aws/deploy_spa_project_by_cf_cdn5.png" alt="deploy_spa_project_by_cf_cdn5"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Google 作為第三方登入</title>
    <url>/google-login-auth/</url>
    <content><![CDATA[<h2 id="前後端常見溝通"><a href="#前後端常見溝通" class="headerlink" title="前後端常見溝通"></a>前後端常見溝通</h2><ul>
<li>使用 cookie-based session：後端把使用者資訊存到 session，前端對後端 API 發送請求時會自動帶上 cookie；但 Laravel API 無法使用 session guard，需要另外處理。</li>
<li>使用 token-based (e.g. JWT)：後端 render view 並把 token 存到前端 storage (e.g. local storage, cookie)，前端從 storage 拿到 token 用 bearer token 方式對後端 API 發送請求。</li>
</ul>
<h2 id="Laravel-Socialite-套件介紹"><a href="#Laravel-Socialite-套件介紹" class="headerlink" title="Laravel Socialite 套件介紹"></a>Laravel <strong><strong>Socialite 套件介紹</strong></strong></h2><ul>
<li>屬於 cookie-based session</li>
<li>實作 Google login 是用 <a href="https://developers.google.com/identity/oauth2/web/guides/how-user-authz-works#when_using_the_auth_code_flow">auth code flow</a>，此流程會是後端拿到 Google 發放的 access token</li>
</ul>
<h2 id="使用-token-based-做法"><a href="#使用-token-based-做法" class="headerlink" title="使用 token-based 做法"></a>使用 token-based 做法</h2><ul>
<li>由於 OAuth2 本身是一個授權框架，我們的使用情境只拿 Google 作身份認證，沒有要拿使用者在 Google 的資源，在這個情境下，Google 建議使用 <a href="https://developers.google.com/identity/gsi/web">Google Identity</a> 服務</li>
<li>前端可以使用 <a href="https://developers.google.com/identity/gsi/web/guides/overview">Sign in with Google</a> 拿到 Google 發放 OpenID connect 格式的 id token 後，傳給後端作 id token 的驗證，後端驗證 ok 後發放 JWT，整個流程的時序圖大致如下：</li>
</ul>
<p><img src="/../images/auth/google-login-auth.png" alt="google-login-auth"></p>
]]></content>
      <categories>
        <category>Auth</category>
      </categories>
      <tags>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title>建立 Google OAuth2.0 Client ID</title>
    <url>/google-oauth-setting/</url>
    <content><![CDATA[<h2 id="OAuth-流程"><a href="#OAuth-流程" class="headerlink" title="OAuth 流程"></a>OAuth 流程</h2><p><strong>前端與 Google 互動</strong></p>
<ol>
<li>使用者點下去 Google 登入，導向 Google 同意頁面</li>
<li>使用者點下同意授權，Google 會回傳 response 給前端</li>
</ol>
<p><strong>前端與後端互動</strong></p>
<ol>
<li>前端把 google 回應的 Id Token 呼叫後端 API 去驗證是否為 Google 身分</li>
<li>產生 JWT Token 給前端存在 local storage 或 cookie</li>
</ol>
<p><strong>程式範例</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">import</span> <span class="string">type</span> &#123; <span class="string">CallbackTypes</span> &#125; <span class="string">from</span> <span class="string">&#x27;vue3-google-login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google 回傳 callback 給前端</span></span><br><span class="line"><span class="attr">const callback:</span> <span class="string">CallbackTypes.CredentialCallback</span> <span class="string">=</span> <span class="string">async</span> <span class="string">(response)</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">  <span class="comment"># 使用者的 id token</span></span><br><span class="line">  <span class="string">const</span> <span class="string">idToken</span> <span class="string">=</span> <span class="string">response.credential</span></span><br><span class="line">  <span class="comment"># 呼叫後端 API 進行身分驗證</span></span><br><span class="line">  <span class="string">const</span> <span class="string">result</span> <span class="string">=</span> <span class="string">await</span> <span class="string">auth.login(idToken)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用者點下 Google 登入</span></span><br><span class="line"><span class="string">&lt;GoogleLogin</span> <span class="string">:callback=&quot;callback&quot;</span> <span class="string">/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="GCP-建立步驟"><a href="#GCP-建立步驟" class="headerlink" title="GCP 建立步驟"></a>GCP 建立步驟</h2><p><strong>步驟一、建立專案</strong></p>
<p><strong>步驟二、設定同意畫面</strong></p>
<ul>
<li><p>user type 選擇 外部</p>
</li>
<li><p>設定讓 Google 信任該網域</p>
<p>  <img src="/../images/google/google-oauth-setting1.png" alt="google-oauth-setting1"></p>
</li>
</ul>
<p><strong>步驟三、點擊 Google Search Console，驗證網域</strong></p>
<ul>
<li><p>輸入要驗證的網域</p>
<p>  <img src="/../images/google/google-oauth-setting2.png" alt="google-oauth-setting2"></p>
</li>
<li><p>產生 TXT 紀錄</p>
<p>  <img src="/../images/google/google-oauth-setting3.png" alt="google-oauth-setting3"></p>
</li>
<li><p>新增到 Route53 的網域</p>
<p>  <img src="/../images/google/google-oauth-setting4.png" alt="google-oauth-setting4"></p>
</li>
<li><p>新增完就可以驗證成功</p>
<p>  <img src="/../images/google/google-oauth-setting5.png" alt="google-oauth-setting5"></p>
</li>
</ul>
<p><strong>步驟四、建立 OAuth2.0 憑證</strong></p>
<p><img src="/../images/google/google-oauth-setting6.png" alt="google-oauth-setting6"></p>
<p><strong>最後、建立完成後可以下載金鑰</strong></p>
<p><img src="/../images/google/google-oauth-setting7.png" alt="google-oauth-setting7"></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10235929">Day 6 Google OAuth2</a></li>
</ul>
]]></content>
      <categories>
        <category>Google</category>
      </categories>
      <tags>
        <tag>OAuth</tag>
      </tags>
  </entry>
  <entry>
    <title>如何區分權限與授權</title>
    <url>/learning-auth/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>權限管理 &#x3D; Authentication (身份驗証，你是誰) + Authorization (授權，你可以做什麼)</p>
<h2 id="身份認證-Authentication"><a href="#身份認證-Authentication" class="headerlink" title="身份認證 (Authentication)"></a><strong>身份認證 (Authentication)</strong></h2><ul>
<li>account&#x2F;password</li>
<li>Token (API key)</li>
<li>OpenID</li>
</ul>
<h2 id="授權-Authorization"><a href="#授權-Authorization" class="headerlink" title="授權 (Authorization)"></a><strong>授權 (Authorization)</strong></h2><ul>
<li>JWT</li>
<li>OAuth 2.0: 用來授權給第三方網站使用自身網站資源，過程中使用者無須提供帳密給第三方網站</li>
</ul>
<h2 id="常見訪問控制模型-Access-Control-Model"><a href="#常見訪問控制模型-Access-Control-Model" class="headerlink" title="常見訪問控制模型 (Access Control Model)"></a><strong>常見訪問控制模型 (Access Control Model)</strong></h2><ul>
<li>ACL (Access Control List)<ul>
<li>以 user 出發，設定每個 user 可以有哪些 permission</li>
</ul>
</li>
<li>RBAC (Role-Based Access Control)<ul>
<li>以 role 出發，設定每個 role 可以有哪些 permission，一個 user 可以有多個 role</li>
</ul>
</li>
<li>ABAC (Attribute-Based Access Controll)<ul>
<li>透過定義來描述使用者、資源、操作等的屬性來設定訪問控制，顆粒度相較於 ACL、RBAC 更細</li>
</ul>
</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://hackmd.io/@coscup/rymNETD0O/%2F%40coscup%2Fry-7ETDAO">初試 Casbin - 快速搭建符合 99% 產品都需要的高彈性可維護之授權控制系統 - marcus</a></li>
</ul>
]]></content>
      <categories>
        <category>Auth</category>
      </categories>
      <tags>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 學習筆記</title>
    <url>/learning-hexo/</url>
    <content><![CDATA[<h2 id="為何要用-Hexo"><a href="#為何要用-Hexo" class="headerlink" title="為何要用 Hexo"></a>為何要用 Hexo</h2><ul>
<li><strong><a href="https://blog.kyomind.tw/my-own-blog-part-one/">不離開 Medium，我自架 blog 的理由與選擇（上）：理由篇</a></strong></li>
<li><strong><strong><a href="https://blog.kyomind.tw/my-markdown-writing-flow/">Notion + VS Code：我的 Markdown 寫作工作流</a></strong></strong></li>
</ul>
<h2 id="如何架設-Hexo"><a href="#如何架設-Hexo" class="headerlink" title="如何架設 Hexo"></a>如何架設 Hexo</h2><ul>
<li><strong><a href="https://magicdogguo.github.io/2019/01/19/%E6%9E%B6%E8%A8%ADHexo%E7%B6%B2%E7%AB%99%E8%8D%89%E7%A8%BF/">第一次架設Hexo網站</a></strong></li>
<li><strong><a href="https://isdaniel.github.io/github-hexo-appveyor/">建立自己Blog系列(一) 介紹 Github (hosting) + Hexo (Blog) + Appveyor(CICD)</a></strong></li>
</ul>
<h2 id="Hexo-CLI-使用"><a href="#Hexo-CLI-使用" class="headerlink" title="Hexo CLI 使用"></a>Hexo CLI 使用</h2><p>需先用 NPM 安裝 hexo-cli 在 Global 使用</p>
<ul>
<li><p>初始化專案</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;專案名稱&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立文章</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命名規則建議用英文 slug</span></span><br><span class="line">$ hexo new <span class="string">&quot;&lt;文章名稱&gt;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>啟動</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p>編譯成靜態檔案到 public 資料夾</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
</li>
<li><p>刪除暫存及 public 資料夾</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署到遠端 repo</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="使用-Hexo-next-主題"><a href="#使用-Hexo-next-主題" class="headerlink" title="使用 Hexo next 主題"></a>使用 Hexo next 主題</h2><ul>
<li><p>下載 <strong><a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a></strong> 主題</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改 <code>_config.yml</code> 設定檔</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
</li>
<li><p>要設定主題的樣式，要更改 <code>themes/next/_config.yml</code> 設定檔</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 主題樣式</span></span><br><span class="line">scheme: Gemini</span><br><span class="line"></span><br><span class="line"><span class="comment"># sidebar 目錄</span></span><br><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 個人頭像</span></span><br><span class="line">avatar:</span><br><span class="line">  url: https://avatars.githubusercontent.com/u/16631807?s=400&amp;v=4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程式區塊樣式</span></span><br><span class="line">codeblock:</span><br><span class="line">  highlight_theme: night</span><br><span class="line">  copy_button:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    show_result: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 圖片縮放</span></span><br><span class="line">mediumzoom: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>設定 search plugin</p>
<ul>
<li><p>安裝套件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改設定檔</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># themes/next/_config.yml</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: <span class="literal">true</span></span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>設定 symbols plugin</p>
<ul>
<li><p>安裝套件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改設定檔</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="部署-GitHub"><a href="#部署-GitHub" class="headerlink" title="部署 GitHub"></a>部署 GitHub</h2><ul>
<li><p>安裝套件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改 <code>_config.yml</code> 設定檔</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;GitHub</span> <span class="string">Repo</span> <span class="string">HTTP/SSH</span> <span class="string">URL&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">&lt;GitHUb</span> <span class="string">Repo</span> <span class="string">發佈使用的分支&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>手動部署</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 學習筆記</title>
    <url>/learning-laravel/</url>
    <content><![CDATA[<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><ul>
<li><strong><a href="https://medium.com/@reccatsai/laravel-model-reads-old-data-when-using-transaction-and-queue-9fa26a751f8e">Laravel Model reads old data when using Transaction and Queue</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
  </entry>
  <entry>
    <title>如何在 docker 的 ubuntu 環境中使用 php-fpm</title>
    <url>/install-phpfpm-by-ubuntu/</url>
    <content><![CDATA[<h2 id="為何需要"><a href="#為何需要" class="headerlink" title="為何需要"></a>為何需要</h2><ul>
<li>建立與線上環境一樣的 ubuntu 作業系統</li>
<li>有時 php-fpm 與 ubuntu 安裝的套件版本會不一致<ul>
<li>查看套件版本 <code>apt show &lt;package name&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="建立步驟"><a href="#建立步驟" class="headerlink" title="建立步驟"></a>建立步驟</h2><p><strong>步驟一、把在 ubuntu 安裝 php 的指令寫成 docker file</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:22.04</span><br><span class="line"></span><br><span class="line">RUN ln -fs &quot;/usr/share/zoneinfo/$TZ&quot; /etc/localtime</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -qqy software-properties-common \</span><br><span class="line">    &amp;&amp; add-apt-repository ppa:ondrej/php</span><br><span class="line"></span><br><span class="line">RUN apt-get install -qqy \</span><br><span class="line">    &quot;php$PHP_VERSION&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-fpm&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-common&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-gd&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-xml&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-curl&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-mbstring&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-gd&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-mysql&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-sqlite&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-redis&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-bcmath&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-tokenizer&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-zip&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-mongo&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-soap&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-intl&quot; \</span><br><span class="line">    &quot;php$PHP_VERSION-imagick&quot;</span><br><span class="line"></span><br><span class="line">RUN curl -sS https://getcomposer.org/installer | php</span><br><span class="line">RUN mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>

<p><strong>步驟二、將 php.ini , php-fpm.conf, <a href="http://www.conf/">www.conf</a> 從 docker 複製出來改，再 COPY 覆蓋原本設定</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -it rhitics-server-arm cat /etc/php/8.0/fpm/pool.d/www.conf &gt; deploy/docker/www.conf</span><br></pre></td></tr></table></figure>

<p><strong>步驟三、修改 php.ini，更改上傳檔案大小</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upload_max_filesize = 100M</span><br><span class="line"></span><br><span class="line">post_max_size = 100M</span><br></pre></td></tr></table></figure>

<p><strong>步驟四、修改 php-fpm.conf，註解 pid 及修改 error_log 路徑，不然非 root 沒有權限啟動 php-fpm</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;pid = /tmp/php8.0-fpm.pid</span><br><span class="line"></span><br><span class="line">error_log = /var/log/app/php8.0-fpm.log</span><br></pre></td></tr></table></figure>

<p><strong>步驟五、修改 <a href="http://www.conf,修改/">www.conf，修改</a> listen 值，與 NGINX 建立 stream</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen = /tmp/php8.0-fpm.sock =&gt; listen = 0.0.0.0:9000</span><br></pre></td></tr></table></figure>

<p><strong>步驟六、設定 docker 預設啟動的 port 及 command</strong></p>
<ul>
<li>特別注意 php-fpm 指令一定要加上 <code>--nodaemonize</code>參數，讓啟動之後可以一直背景執行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER app</span><br><span class="line">EXPOSE 9000</span><br><span class="line">CMD [&quot;php-fpm8.0&quot;, &quot;--nodaemonize&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>步驟七、設定 nginx.conf 可以與 php-fpm 建立 stream</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastcgi_pass &lt;docker_service&gt;:9000;</span><br></pre></td></tr></table></figure>

<h2 id="意外發現"><a href="#意外發現" class="headerlink" title="意外發現"></a>意外發現</h2><ul>
<li>程式執行速度比 php-fpm 為 image base 還快 6 倍</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://github.com/wildpeaks/docker-php-fpm">Ubuntu 20.04 + PHP-FPM</a></li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP-FPM</tag>
      </tags>
  </entry>
  <entry>
    <title>如何處理 horizon 出現 inactive 問題</title>
    <url>/horizon-inactive/</url>
    <content><![CDATA[<h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><ul>
<li>light-worker 會透過 redis queue 建立 worker，只要 horizon dashboard 可以存取相同的 redis 即可監聽 worker 執行狀況，反之沒有存取成功就會出現下圖的 inactive 狀態</li>
</ul>
<p><img src="/../images/laravel/horizon-inactive1.png" alt="horizon-inactive1"></p>
<h2 id="處理方式"><a href="#處理方式" class="headerlink" title="處理方式"></a>處理方式</h2><ol>
<li><p>設定好 .env 確認 redis 可以連線成功</p>
<ol>
<li><p>使用 php artisan tinker 測試建立 cache 並存取是否成功</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Cache::put(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jeff&#x27;</span>)</span><br><span class="line">=&gt; <span class="literal">true</span></span><br><span class="line">Cache::get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">=&gt; jeff</span><br></pre></td></tr></table></figure>
</li>
<li><p>進去到 redis 容器搜尋是否有剛建立的 key</p>
<p> <img src="/../images/laravel/horizon-inactive2.png" alt="horizon-inactive2"></p>
</li>
</ol>
</li>
<li><p>可以發現透過 Laravel 寫入到 redis 中 key 前面都會有 prefix</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># database.php</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;redis&#x27;</span> =&gt; [</span><br><span class="line">    <span class="string">&#x27;client&#x27;</span> =&gt; <span class="built_in">env</span>(<span class="string">&#x27;REDIS_CLIENT&#x27;</span>, <span class="string">&#x27;predis&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;options&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;cluster&#x27;</span> =&gt; <span class="built_in">env</span>(<span class="string">&#x27;REDIS_CLUSTER&#x27;</span>, <span class="string">&#x27;predis&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;prefix&#x27;</span> =&gt; Str::slug(<span class="built_in">env</span>(<span class="string">&#x27;APP_NAME&#x27;</span>, <span class="string">&#x27;laravel&#x27;</span>), <span class="string">&#x27;_&#x27;</span>) . <span class="string">&#x27;_database_&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">		...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>將兩個專案的 .env 檔案中的 <code>env(&#39;APP_NAME&#39;)</code> 改成相同就解決了</p>
<p> <img src="/../images/laravel/horizon-inactive3.png" alt="horizon-inactive3"></p>
</li>
</ol>
<h2 id="Horizon-註冊-queue"><a href="#Horizon-註冊-queue" class="headerlink" title="Horizon 註冊 queue"></a>Horizon 註冊 queue</h2><ul>
<li>horizon.php 會根據 APP_ENV 環境來判斷要啟動的 queue</li>
<li>特別注意當 <code>APP_ENV=local</code> ，要把 queue 新增到 local 的陣列，不然丟 queue 都不會被執行</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;environments&#x27;</span> <span class="string">=&gt;</span> [</span><br><span class="line">   <span class="string">&#x27;local&#x27;</span> <span class="string">=&gt;</span> [</span><br><span class="line">      <span class="string">&#x27;b2c_europe&#x27;</span> <span class="string">=&gt;</span> [</span><br><span class="line">          <span class="string">&#x27;queue&#x27;</span> <span class="string">=&gt;</span> [</span><br><span class="line">                <span class="string">&#x27;create-carrier-shipment-b2c-europe&#x27;</span>,</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Horizon</tag>
      </tags>
  </entry>
  <entry>
    <title>探討 Nginx 架構</title>
    <url>/learning-nginx-infra/</url>
    <content><![CDATA[<h2 id="Nginx-簡介"><a href="#Nginx-簡介" class="headerlink" title="Nginx 簡介"></a>Nginx 簡介</h2><ul>
<li>開源的 reverse proxy 和 web 伺服器</li>
<li>功能有 cache、api gateway、load balancer 等等</li>
<li>在多個 Worker Process 架構下，Nginx 允許跨多個 CPU 去分配連線及請求，讓資料更有效被利用</li>
</ul>
<h2 id="Worker-Processes"><a href="#Worker-Processes" class="headerlink" title="Worker Processes"></a><strong><strong>Worker Processes</strong></strong></h2><ul>
<li><p>啟動 Nginx 會有一個 master process 去管理其他 worker process</p>
</li>
<li><p>Nginx 預設會根據機器的 CPU 核心數量，來建立對應的 worker process</p>
</li>
<li><p>啟動 Hyper-Threading 功能，可以允許一個物理(physical)核心 CPU 當作兩個邏輯(logical)核心 CPU 來使用，來提供作業系統的使用效能</p>
<p>  <img src="/../images/web/learning-nginx-infra1.webp" alt="learning-nginx-infra1"></p>
</li>
</ul>
<h2 id="Connection-Management"><a href="#Connection-Management" class="headerlink" title="Connection Management"></a>Connection Management</h2><ul>
<li><p>Work process 會監聽設定的 port，預設是 80 port (HTTP)</p>
</li>
<li><p>監聽行為會使用 1 個 Socket 及 2 個 Queue (Kernel 管理)</p>
</li>
<li><p>Client 會使用 80 port 與 Nginx 建立 TCP 連線，背後連線原理是 Client 發送 SYN 企圖與 TCP 進行連線，Kernel 收到 SYN 會去比對 Nginx 監聽的 socket 並放入 SYN Queue，然後回應 SYN-ACK 完成 TCP 連線交握</p>
</li>
<li><p>一旦連線完成，Kernel 會將連線移動到 Accept Queue 給任一個 worker process 使用</p>
<p>  <img src="/../images/web/learning-nginx-infra2.webp" alt="learning-nginx-infra2"></p>
</li>
<li><p>一個 worker process 可以同時處理多個連線</p>
<p>  <img src="/../images/web/learning-nginx-infra3.webp" alt="learning-nginx-infra3"></p>
</li>
</ul>
<h2 id="Request-Processing"><a href="#Request-Processing" class="headerlink" title="Request Processing"></a>Request Processing</h2><ul>
<li>Client 連線到 Worker 3 從 disk 取的 HTML Page</li>
<li>Client 連線到 Worker 4 發請求呼叫 Backend API</li>
</ul>
<p><img src="/../images/web/learning-nginx-infra4.webp" alt="learning-nginx-infra4"></p>
<ul>
<li>Worker 3 請求流程<ol>
<li>Request 透過 TCP 連線當作 bytes 串流形式(stream) 來傳送</li>
<li>這個 bytes stream 會在 kernel 的 receive buffer 等待被 Worker 連線</li>
<li>Worker 3 讀取這個連線</li>
<li>資料被複製到 Worker 3 的記憶體中</li>
<li>Worker 3 將資料解析成 HTTP request</li>
<li>Worker 3 處理該請求，並從 disk 抓取 HTML 檔案</li>
<li>Worker 3 回應 HTTP response 到該連線</li>
<li>該 response byte 串流到 kernel 的 send buffer</li>
<li>Kernel 在回應給客戶端</li>
</ol>
</li>
<li>Worker 4 請求流程與 Worker 3 類似，需要多建立與 Backend 連線來轉送(forward) request</li>
</ul>
<h2 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h2><ul>
<li>不會主動 push 資料給 worker process，只會將資料保留在 recevie buffer，並告訴 worker process 有資料需要被處理</li>
</ul>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul>
<li>使用的 HTTP 版本取決於 TLS 是否被啟用</li>
<li>Worker process 需要解碼(decrypt)資料及解析(parse) protocol，來完成工作任務</li>
<li>有很多 process 會有 context switch (processes swapped in and out of the CPU) 問題，造成效能變差，所以這就是為何 NGINX 會根據 CPU 核心數量來固定 Worker Processes</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><strong><strong><a href="https://medium.com/@hnasr/the-architecture-of-nginx-2b32fc0b7877">The Architecture of NGINX</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>如何串接 Line Notify</title>
    <url>/line-notify-exercise/</url>
    <content><![CDATA[<p>LINE Notify API 文件可參考此<a href="https://notify-bot.line.me/doc/en/">連結</a></p>
<h2 id="步驟一、登入-Line-Notify-後台"><a href="#步驟一、登入-Line-Notify-後台" class="headerlink" title="步驟一、登入 Line Notify 後台"></a>步驟一、登入 Line Notify 後台</h2><ul>
<li><p>登入 <a href="https://notify-bot.line.me/zh_TW/">連結</a></p>
</li>
<li><p>進去管理服務</p>
<p>  <img src="/../images/line/line-notify-exercise1.png" alt="line-notify-exercise1"></p>
</li>
</ul>
<h2 id="步驟二、建立-Line-機器人"><a href="#步驟二、建立-Line-機器人" class="headerlink" title="步驟二、建立 Line 機器人"></a>步驟二、建立 Line 機器人</h2><ul>
<li><p>服務網址、callback url 要填入下個步驟要做授權用的 url</p>
<p>  <img src="/../images/line/line-notify-exercise2.png" alt="line-notify-exercise2"></p>
</li>
<li><p>到 Gmail 收信來允許授權</p>
<p>  <img src="/../images/line/line-notify-exercise3.png" alt="line-notify-exercise3"></p>
</li>
</ul>
<h2 id="步驟三、授權-Line-Notify-可以通知給自己或-line-群組"><a href="#步驟三、授權-Line-Notify-可以通知給自己或-line-群組" class="headerlink" title="步驟三、授權 Line Notify 可以通知給自己或 line 群組"></a>步驟三、授權 Line Notify 可以通知給自己或 line 群組</h2><ul>
<li><p>建立 index.html，並用 vscode 的 live server 啟動網頁 (預設 port <code>5500</code>)</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;!DOCTYPE</span> <span class="string">html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line">    <span class="string">&lt;head&gt;</span></span><br><span class="line">        <span class="string">&lt;title&gt;Notify&lt;/title&gt;</span></span><br><span class="line">        <span class="string">&lt;script&gt;</span></span><br><span class="line">            <span class="string">function</span> <span class="string">OAuth2()</span> &#123;</span><br><span class="line">                <span class="string">var</span> <span class="string">URL</span> <span class="string">=</span> <span class="string">&#x27;https://notify-bot.line.me/oauth/authorize?&#x27;</span><span class="string">;</span></span><br><span class="line">                <span class="string">URL</span> <span class="string">+=</span> <span class="string">&#x27;response_type=code&#x27;</span><span class="string">;</span></span><br><span class="line">                <span class="string">URL</span> <span class="string">+=</span> <span class="string">&#x27;&amp;client_id=&lt;YOUR_CLIENT_ID&gt;&#x27;</span><span class="string">;</span></span><br><span class="line">                <span class="string">URL</span> <span class="string">+=</span> <span class="string">&#x27;&amp;redirect_uri=http://localhost:5500&#x27;</span><span class="string">;</span></span><br><span class="line">                <span class="string">URL</span> <span class="string">+=</span> <span class="string">&#x27;&amp;scope=notify&#x27;</span><span class="string">;</span></span><br><span class="line">                <span class="string">URL</span> <span class="string">+=</span> <span class="string">&#x27;&amp;state=NO_STATE&#x27;</span><span class="string">;</span></span><br><span class="line">                <span class="string">window.location.href</span> <span class="string">=</span> <span class="string">URL;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="string">&lt;/script&gt;</span></span><br><span class="line">    <span class="string">&lt;/head&gt;</span></span><br><span class="line">    <span class="string">&lt;body&gt;</span></span><br><span class="line">        <span class="string">&lt;button</span> <span class="string">onclick=&quot;OAuth2();&quot;&gt;連結到</span> <span class="string">LineNotify</span> <span class="string">按鈕&lt;/button&gt;</span></span><br><span class="line">    <span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>點擊按鈕做 redirect 到 line 的授權頁面</p>
<p>  <img src="/../images/line/line-notify-exercise4.png" alt="line-notify-exercise4"></p>
<p>  <img src="/../images/line/line-notify-exercise5.png" alt="line-notify-exercise5"></p>
</li>
<li><p>點擊同意後會在 redirect 回來，要取得 authorize code 給下一個步驟做 login 使用</p>
<p>  <img src="/../images/line/line-notify-exercise6.png" alt="line-notify-exercise6"></p>
</li>
</ul>
<h2 id="步驟四、登入-Line-Notify-取得-access-token"><a href="#步驟四、登入-Line-Notify-取得-access-token" class="headerlink" title="步驟四、登入 Line Notify 取得 access token"></a>步驟四、登入 Line Notify 取得 access token</h2><ul>
<li><p>URL  <code>https://notify-bot.line.me/oauth/token</code></p>
</li>
<li><p>FormData</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">grant_type:</span> <span class="string">authorization_code</span></span><br><span class="line"><span class="attr">code:</span> <span class="string">&lt;上個步驟取得的</span> <span class="string">CODE&gt;</span></span><br><span class="line"><span class="attr">redirect_uri:</span> <span class="string">http://localhost:5500</span></span><br><span class="line"><span class="attr">client_id:</span> <span class="string">&lt;YOUR</span> <span class="string">CLIENT</span> <span class="string">ID&gt;</span></span><br><span class="line"><span class="attr">client_secret:</span> <span class="string">&lt;YOUR</span> <span class="string">CLIENT</span> <span class="string">SECRET&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>回應結果</p>
<p>  <img src="/../images/line/line-notify-exercise7.png" alt="line-notify-exercise7"></p>
</li>
</ul>
<h2 id="步驟五、發送訊息"><a href="#步驟五、發送訊息" class="headerlink" title="步驟五、發送訊息"></a>步驟五、發送訊息</h2><ul>
<li><p>URL <code>https://notify-api.line.me/api/notify</code></p>
</li>
<li><p>HEADER <code>Authorization Bearer&lt;YOUR TOKEN&gt;</code></p>
</li>
<li><p>FormData</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">message:</span> <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>驗收結果</p>
<p>  <img src="/../images/line/line-notify-exercise8.png" alt="line-notify-exercise8"></p>
</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://www.slideshare.net/JiaYuLin6/step-by-step-to-use-line-notify-20190527">step by step to use LINE Notify - 20190527</a></li>
</ul>
]]></content>
      <categories>
        <category>Line API</category>
      </categories>
  </entry>
  <entry>
    <title>深入認識 PHP-FPM</title>
    <url>/learning-phpfpm/</url>
    <content><![CDATA[<h2 id="認識-CGI-協議"><a href="#認識-CGI-協議" class="headerlink" title="認識 CGI 協議"></a>認識 CGI 協議</h2><p><strong>CGI 協議</strong></p>
<ul>
<li>為了保證 web server 傳過來的資料是標準格式(像是 post 或是 url 還有 http header 等)</li>
</ul>
<p><strong>FastCGI 協議</strong></p>
<ul>
<li>用來提高 CGI 處理 process 性能</li>
<li>當 php 啟動時，會去尋找 php.ini、進行環境的初始化，如果不使用 FastCGI 的情況下，每一個請求都會做這個動作，很明顯浪費系統資源</li>
<li>FastCGI 會先啟動一個 master，解析配置文件用，接下來再啟動 worker，當請求過來時 master 會遞資訊給 worker，然後接下來等下一個請求，有這個機制就不用每一次重新跑一次初始化的動作了</li>
</ul>
<h2 id="PHP-FPM-介紹"><a href="#PHP-FPM-介紹" class="headerlink" title="PHP-FPM 介紹"></a>PHP-FPM 介紹</h2><ul>
<li>實作 FastCGI 協議，php-fpm 會解析配置檔(php.ini)產生出 master 程式，並用來接收 nginx 請求，在 php-fpm 有 process manager 會自動增減 process 數量(worker 數量)，每啟動 worker 會 fork master 程式，所以每次如果有更改 php.ini 就一定要重啟 php-fpm</li>
</ul>
<h2 id="安裝後建議"><a href="#安裝後建議" class="headerlink" title="安裝後建議"></a>安裝後建議</h2><ul>
<li><p>設定檔路徑  ⇒ <code>/etc/php/$&#123;PHP_VERSION&#125;/fpm/pool.d/www.conf</code></p>
</li>
<li><p>根據現有機器的 Memory 去調整 process manager 相關設定，讓伺服器的效能更好一點</p>
<p>  ⇒ <a href="https://cmorrell.com/php-fpm/">線上換算參數</a></p>
</li>
<li><p>避免開太多 process，把系統的記憶體耗盡</p>
</li>
</ul>
<h2 id="設定檔規則"><a href="#設定檔規則" class="headerlink" title="設定檔規則"></a>設定檔規則</h2><p><strong>process manager 類型</strong> <code>pm=dynamic</code></p>
<ul>
<li>static：固定行程數量<ul>
<li>優點：效能很好</li>
<li>缺點：很吃記憶體資源</li>
</ul>
</li>
<li>dynamic：根據網路流量動態行程數量<ul>
<li>優點：讓流量大的時候開啟多一點工作行程，而在沒有流量時，也會保留一些行程等待隨時接收新的連線</li>
</ul>
</li>
<li>ondemand：根據網路流量動態行程數量<ul>
<li>優點：看需要多少行程就建立多少，沒用的就關閉，最節省記憶體</li>
<li>缺點：開關行程頻繁，所以效能較差</li>
</ul>
</li>
</ul>
<p><strong><strong>最大行程數量</strong></strong> <code>pm.max_children=50</code></p>
<ul>
<li>static：預設開啟數量</li>
<li>dynamic、ondemand：最多可以開啟數量</li>
</ul>
<p><strong>初始行程數量</strong> <code>pm.start_servers=5</code></p>
<ul>
<li>服務在一開始啟動時，要配置多少個行程</li>
</ul>
<p><strong><strong>最小閒置行程數量</strong></strong> <code>pm.min_spare_servers = 5</code></p>
<p><strong><strong>最大閒置行程數量</strong></strong> <code>pm.max_spare_servers = 35</code></p>
<p><strong><strong>單一行程可處理連線數</strong></strong> <code>pm.max_requests = 500</code></p>
<ul>
<li>當一個工作行程處理的連線數達到這個值的時候，就會強制關閉此行程，重新產生另一個新的行程</li>
</ul>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ul>
<li><a href="https://blog.gtwang.org/linux/nginx-php-fpm-configuration-optimization/">Nginx 與 PHP-FPM 最佳化效能設定教學與技巧</a></li>
<li><a href="https://www.astralweb.com.tw/what-is-differences-between-fastcgi-php-fpm/">秒懂PHP的FastCGI跟PHP-FPM有什麼關係</a></li>
<li><a href="https://iter01.com/581116.html">PHP-FPM 是什麼？</a></li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP-FPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 學習文章</title>
    <url>/learning-redis/</url>
    <content><![CDATA[<h2 id="資料類型及語法使用"><a href="#資料類型及語法使用" class="headerlink" title="資料類型及語法使用"></a>資料類型及語法使用</h2><ul>
<li><strong><strong><a href="https://clhjoe.github.io/post/redis-performance-optimization/">Redis Performance Optimization</a></strong></strong></li>
<li><strong><strong><a href="https://medium.com/happy-friday/%E5%88%9D%E8%AD%98-redis-%E4%BA%94%E5%A4%A7%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5-3c67c05238d0">初識 Redis : 五大資料型別</a></strong></strong></li>
</ul>
<h2 id="應用程式導入-Cache"><a href="#應用程式導入-Cache" class="headerlink" title="應用程式導入 Cache"></a>應用程式導入 Cache</h2><ul>
<li><strong><a href="https://acloud.devoteam.com/expert-view/how-to-optimise-application-performance-with-aws-elasticache/">How To Optimise Application Performance With Aws Elasticache</a></strong></li>
<li><strong><strong><a href="https://www.learnaws.org/2021/06/12/aws-elasticache-deep-dive/">AWS Elasticache Deep Dive: What is it and when to use it</a></strong></strong></li>
</ul>
<h2 id="Elasticache-系列文"><a href="#Elasticache-系列文" class="headerlink" title="Elasticache 系列文"></a>Elasticache 系列文</h2><ul>
<li><a href="https://medium.com/jerrynotes/elasticache-redis-and-memcached-822a72709c74"><strong>Jerry 大大 - ElastiCache, Redis and Memcached</strong></a></li>
<li><strong><strong><a href="https://ithelp.ithome.com.tw/users/20111658/ironman/4426">zeroandy 大大 - Redis還在學</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解決 php-fpm 造成 OOM 問題</title>
    <url>/phpfpm-oom-problem/</url>
    <content><![CDATA[<h2 id="問題釐清"><a href="#問題釐清" class="headerlink" title="問題釐清"></a>問題釐清</h2><p>發生問題的原因是因為 php8.0-fpm 的 process 開太多造成 OOM (Out Of Memory)問題發生，php8.0-fpm 程式自動關閉，所以 nginx 的 error.log 才會跳出 <code>/var/run/php/php8.0-fpm.sock</code><br>找不到檔案，瀏覽器才跳出 502 Bad Gateway</p>
<h2 id="查找問題"><a href="#查找問題" class="headerlink" title="查找問題"></a>查找問題</h2><ol>
<li>查看 php8.0-fpm 狀態  ⇒ <code>service php8.0-fpm status</code></li>
</ol>
<p><img src="/../images/PHP/phpfpm-oom-problem1.png" alt="phpfpm-oom-problem1"></p>
<ol>
<li>查看 php-fpm 進程 ⇒  <code>ps ax | grep php</code></li>
<li>查看系統 log ⇒ <code>cat /var/log/syslog</code></li>
</ol>
<p><img src="/../images/PHP/phpfpm-oom-problem2.png" alt="phpfpm-oom-problem2"></p>
<ol>
<li>查看 nginx error log ⇒ <code>cat /var/log/nginx/error.log</code></li>
</ol>
<h2 id="問題排解時間軸"><a href="#問題排解時間軸" class="headerlink" title="問題排解時間軸"></a>問題排解時間軸</h2><ol>
<li>緊急重啟 php-fpm 服務 ⇒ <code>sudo service php8.0-fpm restart</code></li>
<li>調整 instance 數量為 6 台</li>
<li>調整 php-fpm 的 <a href="http://www.conf/">www.conf</a> 參數</li>
</ol>
<p>線上公式換算參數 ⇒ <a href="https://cmorrell.com/php-fpm/">Tuning dynamic php-fpm settings</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm = dynamic  &lt;= 動態增減</span><br><span class="line">pm.max_children = 85  &lt;= process 上限</span><br><span class="line">pm.start_servers = 40 &lt;= 預設啟動的 process 數量</span><br><span class="line">pm.min_spare_servers = 40 &lt;= 最少會閒置的 process 數量</span><br><span class="line">pm.max_spare_servers = 65 &lt;= 最多會閒置的 process 數量</span><br><span class="line">pm.max_requests = 200 &lt;= 每個 process 最多可以處理的 request</span><br></pre></td></tr></table></figure>

<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ul>
<li><a href="https://mini.nidbox.com/diary/read/9924593">php-fpm：解決 memory leak 問題、 pm.max_children 相關設定</a></li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP-FPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 架構 - Cluster</title>
    <url>/redis-infra-cluster-mode/</url>
    <content><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><ul>
<li>透過 hash slot 處理 key，當使用者在搜尋 key 會自動從對應的分片上取得資料</li>
<li>透過 hash partitioning 將 keyspace 拆分為 16,384 key slots(鍵值)</li>
<li>每一個 master 只負責 a subset of those slots (鍵值的子集合)</li>
<li>每一個 slave 只複製特定的 master，也可以重新分配複製給其他 master，或是被選為 master</li>
<li>沒有提供 Select 指令，所以只支援 db 0</li>
<li>有提供 data partitioning 及 Online resharding</li>
<li>最多會有 500 個 shards 在 1 ~ 5 個 read replica nodes<ul>
<li>由於 shard 會分散在不同的 node，當遇到 overhead 可以平均分散且 node type 可以用較小規格</li>
</ul>
</li>
<li>當遇到高峰需求 (peak demand)<ul>
<li>data partitioning and sharding</li>
<li>autoscaling shards&#x2F;replicas</li>
</ul>
</li>
<li>透過 multiple shard 可以分散 read&#x2F;write 壓力<ul>
<li>只會有一個 endpoint，需要使用 -c 切換到 cluster mode</li>
</ul>
</li>
<li>實作可以參考文章 ⇒ <strong><a href="https://isdaniel.github.io/redis-cluster-introduce-01/">Redis Cluster 介紹</a></strong></li>
</ul>
<h2 id="Ports-Communication"><a href="#Ports-Communication" class="headerlink" title="Ports Communication"></a><strong><strong>Ports Communication</strong></strong></h2><ul>
<li>每一個 node 都要有兩個 TCP ports</li>
<li>第一個 port 給 client 端連線溝通，通常用在 Application 或 CLI</li>
<li>第二個 port 給 node 之間的連線溝通</li>
</ul>
<h2 id="Failover"><a href="#Failover" class="headerlink" title="Failover"></a>Failover</h2><ul>
<li>當 master 換掉，會從剩下 slave 投票選擇一個當作 master 來使用</li>
<li>當失敗的 master 重新加入 cluster，會被當作 slave 並複製其他 master</li>
<li>使用 gossiping 來確定整個 Cluster 的健康狀況，一般設計主節點與副本必須為奇數個，以實現最穩健的設置</li>
</ul>
<h2 id="Sharding"><a href="#Sharding" class="headerlink" title="Sharding"></a><strong><strong>Sharding</strong></strong></h2><ul>
<li>Redis 會自動將分片的資料，分配到個別 Server</li>
<li>Redis 透過 hash slots 拆分成小部分的資料，存放在個別的 slots</li>
<li>每個 slot 會存放在不同的 Server</li>
<li>多加一個 shard 就會重新做分片</li>
</ul>
<h2 id="Cluster-中的-Master-Slave-架構"><a href="#Cluster-中的-Master-Slave-架構" class="headerlink" title="Cluster 中的 Master-Slave 架構"></a>Cluster 中的 Master-Slave 架構</h2><p><strong>情況一、不同 Node</strong></p>
<ul>
<li><p>每一個 Node 都開放 6379 做溝通</p>
</li>
<li><p>當 Master Node 掛掉就會從 Slave Node 之中 Promote 出新的 Master Node</p>
</li>
<li><p>提高可用性，但也提高了成本</p>
<p>  <img src="/../images/redis/redis-infra-cluster-mode1.png" alt="redis-infra-cluster-mode1"></p>
</li>
</ul>
<p><strong>情況二、同一個 Node</strong></p>
<ul>
<li><p>同時會有 Master 及 Slave 的 Redis Service</p>
</li>
<li><p>同一個 Node 會開放兩個不同的 port 做溝通</p>
</li>
<li><p>每一個 Master 的 Slave 會在不同的 Node，避免同時故障</p>
</li>
<li><p>節省成本，但可用性不高，因為當一個 Node 掛掉會同時沒有 Master 及 Slave</p>
<p>  <img src="/../images/redis/redis-infra-cluster-mode2.png" alt="redis-infra-cluster-mode2"></p>
</li>
</ul>
<h2 id="Cluster-Scaling"><a href="#Cluster-Scaling" class="headerlink" title="Cluster Scaling"></a><strong>Cluster Scaling</strong></h2><p>參考文章 ⇒ <strong><a href="https://vearne.cc/archives/39908">REDIS-CLUSTER集群SLOT迁移过程分析</a></strong></p>
<ul>
<li>Online resharding<ul>
<li>增減 shards 或 replicas 數量，都會觸發 resharding (重新調整 slots)</li>
</ul>
</li>
<li>Shard rebalancing<ul>
<li>相同的 shards 或 replicas 數量，重新調整 slots</li>
<li>必須要有 1 個以上的 shards 才可以做 rebalancing</li>
<li>當 item 序列化 size 大於 256 MB 會無法有效 balancing</li>
</ul>
</li>
<li>Scaling 策略<ul>
<li>Scale out：增加 shards 提高讀寫</li>
<li>Scale in：減少 shards 降低讀寫</li>
<li>Rebalancing：重新調整 shards 之間的 keyspaces</li>
</ul>
</li>
</ul>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ul>
<li><strong><strong><a href="https://medium.com/opstree-technology/redis-cluster-architecture-replication-sharding-and-failover-86871e783ac0">Redis Cluster: Architecture, Replication, Sharding and Failover</a></strong></strong></li>
<li><strong><strong><a href="https://medium.com/opstree-technology/redis-cluster-setup-sharding-and-failover-testing-cbf12d063d2c">Redis Cluster: Setup, Sharding and Failover Testing</a></strong></strong></li>
<li><strong><strong><a href="https://aws.amazon.com/tw/premiumsupport/knowledge-center/elasticache-redis-minimize-time-scaling/">在 ElastiCache for Redis 擴展過程中，如何將停機時間降至最低？</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 連線逾時</title>
    <url>/redis-connection-timeout/</url>
    <content><![CDATA[<h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><ul>
<li><p>Laravel Job 讀取 redis 快取資料等待時間，超過 job 上限時間造成 timeout 程式無法執行完</p>
</li>
<li><p>查看 AWS metrics 發現 Network Bandwidth 超過限制，造成封包遺失或斷線問題</p>
<ul>
<li>redis 背後運行是一台 <a href="https://aws.amazon.com/tw/ec2/instance-types/">instance</a>，大部分網路頻寬上限都是 10 Gbps，所以當取得的值太大又同時被很多 client 存取，很容易就會達到上限</li>
</ul>
<p>  <img src="/../images/redis/redis-connection-timeout1.png" alt="redis-connection-timeout1"></p>
</li>
<li><p>現有 redis 架構是 standalone，隨著使用需求提高，如果沒有擴展機器數量或提升機器規格，容易機器回應較慢</p>
</li>
</ul>
<h2 id="AWS-提供解決方法"><a href="#AWS-提供解決方法" class="headerlink" title="AWS 提供解決方法"></a>AWS 提供解決方法</h2><ol>
<li>最簡單方式：就是提高機器等級</li>
<li>最佳方式：使用 redis cluster 架構，透過 data partition and sharding 將資料分成小部分並分散在不同機器，再透過 autoscaling 方式水平擴展 shards，降低單一機器的負載</li>
</ol>
<h2 id="Redis-架構：從-Standalone-改成-Cluster"><a href="#Redis-架構：從-Standalone-改成-Cluster" class="headerlink" title="Redis 架構：從 Standalone 改成 Cluster"></a>Redis 架構：從 Standalone 改成 Cluster</h2><ul>
<li>需要更了解 redis，可以參考 redis 系列筆記</li>
<li>standalone 支援多個 db，但 cluster 只支援 db0</li>
</ul>
<p><strong>操作步驟</strong></p>
<ol>
<li><p>建立 EC2</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安裝 redis-cli</span><br><span class="line">$ sudo amazon-linux-extras install redis6</span><br><span class="line"></span><br><span class="line"># 安裝 docker</span><br><span class="line">$ sudo yum install -y docker</span><br><span class="line">$ sudo service docker restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>將原本的 Redis 搬移資料到 db0</p>
<ul>
<li>如果只有一台 Redis 要搬遷資料，可以直接使用第 4 步加上 –db 參數</li>
<li>使用 redis-cli 指令連線或 <strong><a href="https://github.com/qishibo/AnotherRedisDesktopManager">AnotherRedisDesktopManager</a></strong> 應用程式</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># numkeys: 0</span><br><span class="line"># ARGV[1]: the cursor for SCAN, initially 0</span><br><span class="line"># ARGV[2]: the destination database. E.g. 0</span><br><span class="line"></span><br><span class="line">127.0.0.1 6379 &gt; EVAL &quot;local result = redis.call(&#x27;SCAN&#x27;, ARGV[1]) \n local conflict = &#123;&#125; \n local moved = &#123;&#125; \n for _,key in ipairs(result[2]) do \n     if redis.call(&#x27;MOVE&#x27;, key, ARGV[2]) == 0 then \n         table.insert(conflict, key) \n else \n     table.insert(moved, key) \n     end \n end \n result[2] = conflict \n result[3] = moved \n return result&quot; 0 0 0</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立 redis cluster</p>
<p> <img src="/../images/redis/redis-connection-timeout2.png" alt="redis-connection-timeout2"></p>
</li>
<li><p>連線到 EC2 執行同步指令(<strong><a href="https://developer.redis.com/riot/riot-redis/index.html#_install">RIOT-Redis</a></strong>)</p>
<ul>
<li>預設 db 0 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run fieldengineering/riot-redis -h &lt;source endpoint&gt; -p 6379 \</span><br><span class="line">replicate -h &lt;target endpoint&gt; -p 6379 --cluster --mode live</span><br></pre></td></tr></table></figure></li>
<li>指定其他 db <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run fieldengineering/riot-redis -h &lt;source endpoint&gt; -p 6379 --db &lt;db number&gt; \</span><br><span class="line">replicate -h &lt;target endpoint&gt; -p 6379 --cluster --mode live</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul>
<li><a href="https://docs.aws.amazon.com/zh_tw/AmazonElastiCache/latest/red-ug/TroubleshootingConnections.html#Network-limits"><strong>Elasticache 故障排除</strong></a></li>
<li><strong><strong><a href="https://repost.aws/questions/QUv105xDmfQMGUiBbfeYW-iQ/elasticache-shows-network-in-and-out-as-exceeded-but-how">Elasticache shows network in and out as exceeded, but how?</a></strong></strong></li>
<li><strong><a href="https://stackoverflow.com/questions/59936252/it-is-possible-to-merge-two-separate-dbs-e-g-db0-db1-running-in-one-single-r">It is possible to merge two separate DBs (e.g. db0, db1) running in one single Redis instance (6379) into one single DB (db0)?</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 架構 - 哨兵(Sentinel)</title>
    <url>/redis-infra-sentinel/</url>
    <content><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><ul>
<li><p>是一種系統設計，透過監控、通知、故障轉移、配置，幫助管理 redis instance，確保 master 與 slave 運行狀態</p>
</li>
<li><p>提供 instance failover 來提高可用性</p>
</li>
<li><p>所有行為都是透過 API 實作，所以需要注意 client 授權問題</p>
<p>  <img src="/../images/redis/redis-infra-sentinel.png" alt="redis-infra-sentinel"></p>
</li>
</ul>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><strong><strong><a href="https://cloudinfrastructureservices.co.uk/redis-sentinel-vs-cluster/">Redis Sentinel vs Cluster – Which is Better? (Pros and Cons)</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 架構 - Master/Slave(高可用性)</title>
    <url>/redis-infra-master-slave/</url>
    <content><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><ul>
<li>主從部署方式，當資料寫入到 master 後，會建立副本到 slave，提供故障轉移機制</li>
<li>1 個 Master 會有 0~1 個 Slave (replicas)</li>
<li>全部的寫入請求，都會經過 Master 節點</li>
<li>如果 Master 節點壞掉，就會出現 SPOF (Single point of failure)</li>
<li>此架構並不會隨著使用量而自動 scaling</li>
<li>是一種 active-passive 機制，由多個 master-slave 組成</li>
</ul>
<h2 id="使用情境"><a href="#使用情境" class="headerlink" title="使用情境"></a>使用情境</h2><ul>
<li><p>單一實例 (Standalone)</p>
<p>  <img src="/../images/redis/redis-infra-master-slave1.png" alt="redis-infra-master-slave1"></p>
</li>
<li><p>Cluster 模式</p>
<p>  <img src="/../images/redis/redis-infra-master-slave2.png" alt="redis-infra-master-slave2"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 架構 - 單一實例(Standalone)</title>
    <url>/redis-infra-standalone/</url>
    <content><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><ul>
<li>一個機器除了部署後端專案，還會安裝 redis 服務</li>
<li>有提供 Select 指令，可以自由選擇 db index</li>
<li>沒有提供 Data partitioning 及 Online resharding</li>
<li>只會有 1 個 shard，最多 5 個 read replica nodes<ul>
<li>當遇到 overhead 只能透過提高 node type</li>
</ul>
</li>
<li>當遇到高峰需求 (peak demand)<ul>
<li>scaling read replica nodes</li>
<li>scaling up node type</li>
</ul>
</li>
<li>只能透過 primary 來 read&#x2F;write，當遇到高峰要使用 read replica 來分散 read 壓力<ul>
<li>primary&#x2F;replica endpoint 是不同</li>
</ul>
</li>
</ul>
<h2 id="與-Cluster-比較"><a href="#與-Cluster-比較" class="headerlink" title="與 Cluster 比較"></a>與 Cluster 比較</h2><ul>
<li>只有單一個 shards (node group)，但 Cluster 可以有多個 shards (node group)</li>
</ul>
<p><img src="/../images/redis/redis-infra-standalone.png" alt="redis-infra-standalone"></p>
<h2 id="延伸學習"><a href="#延伸學習" class="headerlink" title="延伸學習"></a>延伸學習</h2><ul>
<li><strong><a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html">Comparing Memcached and Redis</a></strong></li>
<li><strong><a href="https://docs.amazonaws.cn/en_us/AmazonElastiCache/latest/red-ug/Replication.Redis-RedisCluster.html">Replication: Redis (Cluster Mode Disabled) vs. Redis (Cluster Mode Enabled)</a></strong></li>
<li><strong><strong><a href="https://medium.com/hepsiburadatech/redis-solutions-standalone-vs-sentinel-vs-cluster-f46e703307a9">Redis Solutions: Standalone vs Sentinel vs Cluster</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搜尋 ELB 的 Access Log</title>
    <url>/search-elb-log-by-cloudwatch/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li><p>ELB 存放 access log 預設只能存放在 S3</p>
<p>  <img src="/../images/aws/search-elb-log-by-cloudwatch1.png" alt="search-elb-log-by-cloudwatch1"></p>
</li>
<li><p>如果要做搜尋，官方提供解決方式是使用 <a href="https://docs.aws.amazon.com/zh_tw/athena/latest/ug/application-load-balancer-logs.html">AWS Athena 服務</a>，使用 SQL 語法去搜尋 S3 檔案，計費方式是按照搜尋次數及範圍資料量來計費，直接使用 <strong><a href="https://calculator.aws/">AWS Pricing Calculator</a></strong> 算一下</p>
</li>
<li><p>一天搜尋 10 次，範圍資料量為 10 GB，就要花費 14.84 USD，真的是坑錢</p>
<p>  <img src="/../images/aws/search-elb-log-by-cloudwatch2.png" alt="search-elb-log-by-cloudwatch2"></p>
</li>
<li><p>如果相同的條件使用 Cloudwatch log insight，只要 0.08 USD，比前一個方案價格省超多</p>
<p>  <img src="/../images/aws/search-elb-log-by-cloudwatch3.png" alt="search-elb-log-by-cloudwatch3"></p>
</li>
</ul>
<h2 id="使用-Cloudwatch-Log-Insight-限制"><a href="#使用-Cloudwatch-Log-Insight-限制" class="headerlink" title="使用 Cloudwatch Log Insight 限制"></a>使用 Cloudwatch Log Insight 限制</h2><ul>
<li>只能搜尋在 Cloudwatch 本身存放 log 的位置(log group, log stream)</li>
<li>log 只限於 JSON 格式</li>
<li>基於該限制，思考兩個方向<ul>
<li>方向一、監聽 S3 file event 觸發 Lambda 將 log 轉成 JSON 格式，並寫入到 CloudWatch Log Group 做查詢 ⇒ 參考<a href="https://github.com/rupertbg/aws-load-balancer-logs-to-cloudwatch">連結</a></li>
<li>方向二、EC2 安裝 cloudwatch agent 將 nginx 的 access log 收集到 cloudwatch log group 中 做查詢 ⇒ 由於之前就設定好 nginx log，就使用該方法</li>
</ul>
</li>
</ul>
<h2 id="設定-nginx-access-log-操作步驟"><a href="#設定-nginx-access-log-操作步驟" class="headerlink" title="設定 nginx access log 操作步驟"></a>設定 nginx access log 操作步驟</h2><p><strong>步驟一、安裝 cloudwatch agent</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install CloudWatch Agent</span></span><br><span class="line">wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y collectd</span><br><span class="line">sudo dpkg -i -E ./amazon-cloudwatch-agent.deb</span><br></pre></td></tr></table></figure>

<p><strong>步驟二、撰寫 JSON</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># amazon-cloudwatch-agent.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;agent&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;metrics_collection_interval&quot;:</span> <span class="number">60</span>,</span><br><span class="line">    <span class="attr">&quot;run_as_user&quot;:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;logs&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;logs_collected&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;files&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;collect_list&quot;:</span> [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;file_path&quot;:</span> <span class="string">&quot;/var/log/nginx/access.log&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;log_group_name&quot;:</span> <span class="string">&quot;/$APPLICATION_NAME/nginx/access.log&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;log_stream_name&quot;:</span> <span class="string">&quot;$DEPLOYMENT_GROUP_NAME-[&#123;instance_id&#125;]-[&#123;ip_address&#125;]&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;retention_in_days&quot;:</span> <span class="number">90</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;file_path&quot;:</span> <span class="string">&quot;/var/log/nginx/access.log.*&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;log_group_name&quot;:</span> <span class="string">&quot;/$APPLICATION_NAME/nginx/access.log&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;log_stream_name&quot;:</span> <span class="string">&quot;$DEPLOYMENT_GROUP_NAME-[&#123;instance_id&#125;]-[&#123;ip_address&#125;]&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;retention_in_days&quot;:</span> <span class="number">90</span></span><br><span class="line">          &#125;</span><br><span class="line">			 ]</span><br><span class="line">		 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步驟三、啟動 cloudwatch agent</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start cloudwatch agent</span></span><br><span class="line">envsubst <span class="string">&#x27;$APPLICATION_NAME $DEPLOYMENT_GROUP_NAME&#x27;</span> &lt; deploy/amazon-cloudwatch-agent.json &gt; /tmp/amazon-cloudwatch-agent.json</span><br><span class="line">/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/tmp/amazon-cloudwatch-agent.json</span><br></pre></td></tr></table></figure>

<p><strong>步驟四、查看 cloudwatch group</strong></p>
<p><img src="/../images/aws/search-elb-log-by-cloudwatch4.png" alt="search-elb-log-by-cloudwatch4"></p>
<h2 id="使用-Cloudwatch-Log-Insight-做查詢"><a href="#使用-Cloudwatch-Log-Insight-做查詢" class="headerlink" title="使用 Cloudwatch Log Insight 做查詢"></a>使用 Cloudwatch Log Insight 做查詢</h2><p>可以參考此文章 ⇒ <strong><strong><a href="https://yu-jack.github.io/2019/11/28/aws-cloudwatch-logs-insights/">AWS CloudWatch Logs Insights 介紹及教學</a></strong></strong></p>
<ul>
<li><p>按照時間來統計 status code 大於 400 的數量</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fields @timestamp, @message</span><br><span class="line">| <span class="built_in">sort</span> @timestamp desc</span><br><span class="line">| parse @message <span class="string">&quot;* * * * * * * * * *&quot;</span> as @ip, @c1, @c2, @<span class="built_in">date</span>, @c4, @method, @path, @c7, @status, @c9</span><br><span class="line">| filter @<span class="built_in">date</span> like <span class="string">&quot;28/Nov/2022&quot;</span></span><br><span class="line">| filter @status &gt;= 400</span><br><span class="line">| stats count(*) as <span class="built_in">sum</span> by @<span class="built_in">date</span>, @status</span><br></pre></td></tr></table></figure>

<p>  <img src="/../images/aws/search-elb-log-by-cloudwatch5.png" alt="search-elb-log-by-cloudwatch5"></p>
</li>
<li><p>可以去 ALB 的 4xx&#x2F;5xx metrics 比對數量</p>
<p>  <img src="/../images/aws/search-elb-log-by-cloudwatch6.png" alt="search-elb-log-by-cloudwatch6"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>ELB</tag>
        <tag>Cloudwatch</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 VSFTPD 架設 FTP  Server</title>
    <url>/setup-ftp-by-vsftpd/</url>
    <content><![CDATA[<h2 id="FTP-連線模式"><a href="#FTP-連線模式" class="headerlink" title="FTP 連線模式"></a>FTP 連線模式</h2><p><strong>主動 FTP：</strong></p>
<ul>
<li>命令連接：客戶端 &gt;1024 端口 → 服務器 21 端口</li>
<li>數據連接：客戶端 &gt;1024 端口 ← 服務器 20 端口</li>
</ul>
<p><strong>被動 FTP：</strong></p>
<ul>
<li>命令連接：客戶端 &gt;1024 端口 → 服務器 21 端口</li>
<li>數據連接：客戶端 &gt;1024 端口 ← 服務器 &gt;1024 端口</li>
</ul>
<h2 id="建立步驟"><a href="#建立步驟" class="headerlink" title="建立步驟"></a>建立步驟</h2><ol>
<li><p>建立 ubuntu 作業系統的 EC2，設定 security group</p>
<ul>
<li>新增inbound rule 新增 20,21(ftp)、 22(ssh) port</li>
</ul>
</li>
<li><p>安裝 vsftpd</p>
<ul>
<li>安裝指令 <code>sudo apt update -y &amp;&amp; sudo apt install vsftpd -y</code></li>
<li>查看狀態 <code>sudo service vsftpd status</code></li>
</ul>
</li>
<li><p>編輯 vsftpd 設定檔</p>
<ul>
<li>編輯完要重啟服務 <code>sudo service vsftpd restart</code></li>
</ul>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不接受匿名用戶</span></span><br><span class="line"><span class="string">anonymous_enable=NO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允許用戶上傳檔案或建立資料夾</span></span><br><span class="line"><span class="string">write_enable=YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鎖定使用者只可以操作家目錄</span></span><br><span class="line"><span class="string">chroot_local_user=YES</span></span><br><span class="line"><span class="string">allow_writeable_chroot=YES**</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新增使用者</p>
<ul>
<li>預設只有該用戶才可以在該家目錄建立資料夾跟建立檔案 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo adduser ata</span><br></pre></td></tr></table></figure></li>
<li>建立完後，使用 <code>su ata</code> 切換到該用戶</li>
<li>使用 <code>sudo</code> 指令透過 root 也可以，不過建立的資料夾就不能給 ata 用戶使用</li>
</ul>
</li>
</ol>
<h2 id="使用-Filezilla-進行連線"><a href="#使用-Filezilla-進行連線" class="headerlink" title="使用 Filezilla 進行連線"></a>使用 Filezilla 進行連線</h2><ul>
<li><p>由於只開放 20, 21 port 所以要切換主動模式進行連線</p>
</li>
<li><p>到 <strong>編輯 → 設定</strong>選擇主動模式</p>
<p>  <img src="/../images/linux/ftp1.png" alt="ftp1"></p>
</li>
<li><p>建立<strong>新站台</strong>的連線</p>
<p>  <img src="/../images/linux/ftp2.png" alt="ftp2"></p>
</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><strong><strong><a href="https://adamtheautomator.com/vsftpd/#Opening_Ports_for_FTP_Client_Connections">How to Setup FTP Server with VSFTPD</a></strong></strong></li>
<li><strong><strong><a href="https://ithelp.ithome.com.tw/questions/10190157">filezilla 一直連不上伺服器？</a></strong></strong></li>
<li><strong><strong><a href="http://blog.udn.com/nigerchen/2261345#ixzz20seS3Qm6">ubuntu FTP SERVER 安裝設置( vsftp 版本 )</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VSFTPD</tag>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 SQS + Lambda - Laravel 篇</title>
    <url>/sqs-lambda-for-laravel/</url>
    <content><![CDATA[<h2 id="前言提要"><a href="#前言提要" class="headerlink" title="前言提要"></a>前言提要</h2><ul>
<li>Lambda 預設沒有提供 PHP 語言，需要透過 bref 套件引用 custom runtime 才可以跑 Laravel</li>
</ul>
<h2 id="雲端前置步驟"><a href="#雲端前置步驟" class="headerlink" title="雲端前置步驟"></a>雲端前置步驟</h2><p><strong>步驟一、建立 IAM</strong></p>
<ul>
<li>名稱為 role-for-lambda</li>
<li>use case 選擇 Lambda</li>
<li>加入 Policy<ul>
<li>讓 Lambda 使用 CloudWatch 服務 <code>AWSLambdaBasicExecutionRole</code></li>
<li>讓 Lambda 使用 SQS 服務 <code>AmazonSQSFullAccess</code></li>
</ul>
</li>
</ul>
<p><strong>步驟二、建立兩個 SQS</strong></p>
<ul>
<li>名稱分別為 <code>default-queue</code>、<code>another-queue</code></li>
<li>其他設定照預設即可</li>
</ul>
<blockquote>
<p>serverless 整合 CDK 可以使用 <a href="https://github.com/getlift/lift">Lift Plugin</a>，可以省去手動建立的時間</p>
</blockquote>
<h2 id="專案啟動到部署步驟"><a href="#專案啟動到部署步驟" class="headerlink" title="專案啟動到部署步驟"></a>專案啟動到部署步驟</h2><p><strong>步驟一、建立 Laravel 專案</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安裝 composer</span></span><br><span class="line">brew install composer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立專案</span></span><br><span class="line">composer create-project laravel/laravel &lt;專案名稱 ex: sqs-lambda-for-laravel&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 啟動專案測試</span></span><br><span class="line">php artisan serve</span><br></pre></td></tr></table></figure>

<p><strong>步驟二、使用 bref 套件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安裝 bref 套件</span></span><br><span class="line">composer require bref/bref bref/laravel-bridge</span><br><span class="line"></span><br><span class="line"><span class="comment"># 套用 bref 的 serverless.yml</span></span><br><span class="line">php artisan vendor:publish --tag=serverless-config</span><br></pre></td></tr></table></figure>

<p><strong>步驟三、建立 worker.php，用來當作 Lambda 的入口</strong></p>
<p>參考專案 ⇒ <strong><strong><a href="https://github.com/brefphp/examples">Bref example applications</a></strong></strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Bref</span>\<span class="title">LaravelBridge</span>\<span class="title">Queue</span>\<span class="title">LaravelSqsHandler</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Application</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> Application $app */</span></span><br><span class="line"><span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/bootstrap/app.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$kernel</span> = <span class="variable">$app</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="title class_">Illuminate\Contracts\Console\Kernel</span>::<span class="variable language_">class</span>);</span><br><span class="line"><span class="variable">$kernel</span>-&gt;<span class="title function_ invoke__">bootstrap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$app</span>-&gt;<span class="title function_ invoke__">makeWith</span>(<span class="title class_">LaravelSqsHandler</span>::<span class="variable language_">class</span>, [</span><br><span class="line">    <span class="string">&#x27;connection&#x27;</span> =&gt; <span class="string">&#x27;sqs&#x27;</span>, // this is the Laravel Queue connection</span><br><span class="line">    <span class="string">&#x27;queue&#x27;</span> =&gt; <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;SQS_QUEUE&#x27;</span>),</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p><strong>步驟四、修改 serverless.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 當作建立 AWS 服務的 prefix</span></span><br><span class="line"><span class="attr">service:</span> <span class="string">sqs-lambda-for-laravel</span></span><br><span class="line"></span><br><span class="line"><span class="attr">provider:</span></span><br><span class="line">    <span class="comment"># 設定 Lambda execute role</span></span><br><span class="line">    <span class="attr">iam:</span></span><br><span class="line">      <span class="attr">role:</span> <span class="string">arn:aws:iam::&lt;account</span> <span class="string">id&gt;:role/example-sqs-lambda-for-laravel</span></span><br><span class="line">    <span class="comment"># 設定 Lambda 環境變數</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">APP_ENV:</span> <span class="string">local</span></span><br><span class="line">      <span class="attr">APP_DEBUG:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">APP_KEY:</span> <span class="string">&#x27;base64:WQUEgE4Jjbn4ixFeyxLFkYi03gYM4Kl6Q9WgzZpThh8=&#x27;</span></span><br><span class="line">      <span class="attr">SQS_PREFIX:</span> <span class="string">https://sqs.&lt;region&gt;.amazonaws.com/&lt;account</span> <span class="string">id&gt;</span></span><br><span class="line">      <span class="attr">SQS_QUEUE:</span> <span class="string">&lt;default</span> <span class="string">queue</span> <span class="string">name&gt;</span></span><br><span class="line">      <span class="attr">QUEUE_CONNECTION:</span> <span class="string">sqs</span></span><br><span class="line">      <span class="attr">LOG_CHANNEL:</span> <span class="string">stderr</span>     <span class="string">&lt;=</span> <span class="string">將</span> <span class="string">log</span> <span class="string">傳送到</span> <span class="string">cloudwatch</span></span><br><span class="line">      <span class="attr">CACHE_DRIVER:</span> <span class="string">array</span></span><br><span class="line">      <span class="attr">SESSION_DRIVER:</span> <span class="string">array</span></span><br><span class="line">    <span class="attr">apiGateway:</span></span><br><span class="line">      <span class="attr">shouldStartNameWithService:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定打包 zip 略過的資料夾或檔案</span></span><br><span class="line"><span class="attr">package:</span></span><br><span class="line">    <span class="attr">patterns:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;!node_modules/**&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;!public/storage&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;!resources/assets/**&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;!storage/**&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;!tests/**&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;!.env&#x27;</span>    <span class="string">&lt;=</span> <span class="string">不要包</span> <span class="string">.env</span> <span class="string">檔案</span></span><br><span class="line"></span><br><span class="line"><span class="attr">functions:</span></span><br><span class="line">    <span class="comment"># 設定後端 API (此範例用來發 job 給 SQS)</span></span><br><span class="line">    <span class="attr">api:</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">public/index.php</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="number">28</span></span><br><span class="line">      <span class="attr">layers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$&#123;bref:layer.php-81-fpm&#125;</span></span><br><span class="line">      <span class="attr">events:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">httpApi:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="comment"># 設定 default lambda worker 及監聽對應的 Queue</span></span><br><span class="line">    <span class="attr">defaultWorker:</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">worker.php</span></span><br><span class="line">      <span class="attr">layers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$&#123;bref:layer.php-81&#125;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SQS_QUEUE:</span> <span class="string">default-queue</span></span><br><span class="line">      <span class="attr">events:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">sqs:</span></span><br><span class="line">            <span class="attr">arn:</span> <span class="string">arn:aws:sqs:us-west-2:&lt;account</span> <span class="string">id&gt;:default-queue</span></span><br><span class="line">            <span class="attr">batchSize:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 設定 another lambda worker 及監聽對應的 Queue</span></span><br><span class="line">    <span class="attr">anotherWorker:</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">worker.php</span></span><br><span class="line">      <span class="attr">layers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$&#123;bref:layer.php-81&#125;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SQS_QUEUE:</span> <span class="string">another-queue</span></span><br><span class="line">      <span class="attr">events:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">sqs:</span></span><br><span class="line">            <span class="attr">arn:</span> <span class="string">arn:aws:sqs:us-west-2:&lt;account</span> <span class="string">id&gt;:another-queue</span></span><br><span class="line">            <span class="attr">batchSize:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>步驟五、修改 queue.php</strong></p>
<ul>
<li><p>加上 token 參數</p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;sqs&#x27;</span> =&gt; [</span><br><span class="line">		...</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(<span class="string">&#x27;AWS_SESSION_TOKEN&#x27;</span>)</span><br><span class="line">		...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步驟六、建立 Job</strong></p>
<ul>
<li><p>建立 CreateOrder Job</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">php</span> <span class="string">artisan</span> <span class="string">make:job</span> <span class="string">CreateOrder</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 CreateOrder Job 程式碼</p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Jobs</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>\<span class="title">Queueable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Queue</span>\<span class="title">ShouldBeUnique</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Queue</span>\<span class="title">ShouldQueue</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Bus</span>\<span class="title">Dispatchable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">InteractsWithQueue</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">SerializesModels</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateOrder</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Dispatchable</span>, <span class="title">InteractsWithQueue</span>, <span class="title">Queueable</span>, <span class="title">SerializesModels</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> int <span class="doctag">@orderId</span> */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orderId</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new job instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$orderId</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;orderId = <span class="variable">$orderId</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the job.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title class_">Log</span>::<span class="title function_ invoke__">info</span>(<span class="string">&quot;建立 Order ID: $&#123;orderId&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步驟七、發送 Job 到 SQS</strong></p>
<ul>
<li><p>修改 routes&#x2F;web.php</p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/create-order/&#123;id&#125;/&#123;queue&#125;&#x27;</span>, function(<span class="variable">$id</span>, <span class="variable">$queue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$queue</span>, [<span class="string">&#x27;default-queue&#x27;</span>, <span class="string">&#x27;another-queue&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">response</span>()-&gt;<span class="title function_ invoke__">json</span>([</span><br><span class="line">            <span class="string">&#x27;error_message&#x27;</span> =&gt; <span class="string">&quot;目前沒有提供 $&#123;queue&#125; Queue&quot;</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">CreateOrder</span>::<span class="title function_ invoke__">dispatch</span>(<span class="variable">$id</span>)-&gt;<span class="title function_ invoke__">onQueue</span>(<span class="variable">$queue</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>()-&gt;<span class="title function_ invoke__">json</span>([</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>    =&gt; <span class="string">&#x27;done&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;orderId&#x27;</span>   =&gt; <span class="variable">$id</span>,</span><br><span class="line">        <span class="string">&#x27;queue&#x27;</span>     =&gt; <span class="variable">$queue</span></span><br><span class="line">    ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步驟八、使用 serverless 部署</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安裝 serverless</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">serverless</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定 credentials</span></span><br><span class="line"></span><br><span class="line"><span class="string">serverless</span> <span class="string">config</span> <span class="string">credentials</span> <span class="string">--provider</span> <span class="string">aws</span> <span class="string">--key</span> <span class="string">&lt;key&gt;</span> <span class="string">--secret</span> <span class="string">&lt;secret&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除快取</span></span><br><span class="line"><span class="string">php</span> <span class="string">artisan</span> <span class="string">config:clear</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line"><span class="string">serverless</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>原始碼可參考 <a href="https://github.com/jefferylee73/sqs-lambda-for-laravel">sqs-lambda-for-laravel</a></p>
</blockquote>
<h2 id="SQS-Lambda-整合測試"><a href="#SQS-Lambda-整合測試" class="headerlink" title="SQS + Lambda 整合測試"></a>SQS + Lambda 整合測試</h2><ul>
<li><p>呼叫前面建立的 api</p>
<p>  <img src="/../images/laravel/sqs-lambda-for-laravel1.png" alt="sqs-lambda-for-laravel1"></p>
</li>
<li><p>查看 SQS receive message 數量</p>
<p>  <img src="/../images/laravel/sqs-lambda-for-laravel2.png" alt="sqs-lambda-for-laravel2"></p>
</li>
<li><p>查看 Lambda Log 結果</p>
<p>  <img src="/../images/laravel/sqs-lambda-for-laravel3.png" alt="sqs-lambda-for-laravel3"></p>
</li>
</ul>
<h2 id="Laravel-注意事項"><a href="#Laravel-注意事項" class="headerlink" title="Laravel 注意事項"></a>Laravel 注意事項</h2><ul>
<li>Lambda 的 &#x2F;tmp 資料夾是 read-only</li>
<li>FILESYSTEM_DRIVER 建議改成用 S3</li>
<li>當程式碼 size 增加，也會增加 Cold Star 時間</li>
</ul>
<h2 id="TroubleShoot"><a href="#TroubleShoot" class="headerlink" title="TroubleShoot"></a>TroubleShoot</h2><p><strong>問題一、當遇到權限問題可以使用 StsClient 類別查看 IAM 身份</strong></p>
<ul>
<li>Classes 相關使用可參考 ⇒ <strong><a href="https://docs.aws.amazon.com/aws-sdk-php/v3/api/index.html">AWS SDK for PHP 3.x</a></strong></li>
<li>可參考下方程式碼</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">StsClient</span>([</span><br><span class="line">    <span class="string">&#x27;region&#x27;</span> =&gt; <span class="string">&#x27;us-west-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span> =&gt; <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">getCallerIdentity</span>();</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><strong><strong><a href="https://aws.plainenglish.io/serverless-laravel-made-easy-with-bref-cdbeeed53ef4">Serverless Laravel Made Easy with Bref</a></strong></strong></li>
<li><strong><strong><a href="https://azole.medium.com/%E7%94%A8-bref-1-0-%E8%AE%93-laravel-8-serverless-%E8%B5%B7%E4%BE%86-6f2b5416c372">用 Bref 1.0 讓 Laravel 8 serverless 起來</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>SQS</tag>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 SQS + Lambda - NodeJS 篇</title>
    <url>/sqs-lambda-for-nodejs/</url>
    <content><![CDATA[<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><p><strong>步驟一、建立 IAM Role</strong></p>
<ul>
<li>名稱為 role-for-sqs-lambda</li>
<li>use case 選擇 Lambda</li>
<li>加入 Policy<ul>
<li>讓 Lambda 使用 CloudWatch 服務 <code>AWSLambdaBasicExecutionRole</code></li>
<li>讓 Lambda 使用 SQS 服務 <code>AmazonSQSFullAccess</code></li>
</ul>
</li>
</ul>
<p><strong>步驟二、建立 Lambda Function</strong></p>
<ul>
<li><p>名稱為 sqs-lambda</p>
</li>
<li><p>Runtime 選擇 Node.js</p>
</li>
<li><p>Permission 選擇前面建立的 role</p>
</li>
<li><p>到 Configuraion 更改 timeout 為 20 秒，切記不要超過 SQS Visibility Timeout 時間</p>
</li>
<li><p>撰寫 Node.js Code</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">handler</span> = <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; event.<span class="property">Records</span>.<span class="property">length</span> ; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> record = event.<span class="property">Records</span>[i]</span><br><span class="line">        <span class="keyword">let</span> &#123; body &#125; = record;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;body: &quot;</span>, body);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;type of body: &quot;</span> + (<span class="keyword">typeof</span> body))</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> body === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            body = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(body)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;body.process_time_ms: &quot;</span>, body.<span class="property">process_time_ms</span>);</span><br><span class="line">        <span class="keyword">let</span> &#123; process_time_ms &#125; = body;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start processing: &quot;</span> + process_time_ms);</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">delay</span>(process_time_ms);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ends processing.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> response = &#123;</span><br><span class="line">        <span class="attr">statusCode</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="string">&#x27;Successfully finished! &#x27;</span>),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, time));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步驟三、建立 SQS</strong></p>
<ul>
<li>名稱為 sqs-for-lambda</li>
</ul>
<p><strong>步驟四、設定 Lambda trigger</strong></p>
<ul>
<li>選擇前面建立的 SQS  queue</li>
<li>batch size 設定為 1 來測試即可<ul>
<li>設定啟動一個 Lambda 一次要抓取多少個 message 數量</li>
<li>數值設定越高，Lambda 效能越好</li>
</ul>
</li>
</ul>
<p>步驟五、整合測試 SQS + Lambda</p>
<ul>
<li><p>到 SQS 發送 message</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;process_time_ms&quot;: 1001</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>到 Lambda 的 Monitor 連到 Cloudwatch 查看 log stream</p>
</li>
</ul>
<h2 id="發送高流量請求的步驟"><a href="#發送高流量請求的步驟" class="headerlink" title="發送高流量請求的步驟"></a>發送高流量請求的步驟</h2><p><strong>步驟一、建立 IAM</strong></p>
<ul>
<li>名稱為 role-for-sqs-ec2</li>
<li>use case 選擇 EC2</li>
<li>加入 Policy<ul>
<li>讓 EC2 使用 SQS 服務 <code>AmazonSQSFullAccess</code></li>
</ul>
</li>
</ul>
<p><strong>步驟二、建立 EC2</strong></p>
<ul>
<li>AMI 選擇預設 Amazon Linux AMI</li>
<li>選擇前面建立的 role</li>
<li>建立新的 security group 開發 22, 8080 port</li>
</ul>
<p><strong>步驟三、進去 EC2 安裝套件</strong></p>
<ul>
<li><p>安裝指令</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y git</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/uopsdod/aws-advanced-course-project.git</span><br><span class="line">$ <span class="built_in">cd</span> aws-advanced-course-project</span><br><span class="line">$ git checkout sqs_lambda</span><br><span class="line">$ git branch</span><br><span class="line">$ sudo amazon-linux-extras install -y docker</span><br><span class="line">$ sudo service docker start</span><br><span class="line">$ sudo docker build --no-cache -t myapp001 .</span><br><span class="line">$ sudo docker images</span><br><span class="line">$ sudo docker run -d -p 8080:8080 myapp001</span><br><span class="line">$ sudo docker ps</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步驟四、批次發送訊息到 SQS</strong></p>
<ul>
<li>複製 Instance DNS URL 到瀏覽器，進行開啟</li>
<li>選擇 SQS + Lambda 後，更改設定<ul>
<li>backend url 為 <code>&lt;instance dns url&gt;:8080</code></li>
<li>sqs url 為前面建立的 SQS url</li>
<li>message batch 為批次發送的數量</li>
</ul>
</li>
<li>點 Track SQS Message Count 追蹤 SQS 變化<ul>
<li>會有大幅度起伏是因為 SQS 背後的 server 是分散式架構，同步會需要一段時間</li>
<li>同步過一段時間後，就會穩定成一個數量</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>SQS</tag>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>推薦Architecture文章</title>
    <url>/suggest-architecture-article/</url>
    <content><![CDATA[<h2 id="Project-Cases"><a href="#Project-Cases" class="headerlink" title="Project Cases"></a>Project Cases</h2><ul>
<li><strong><a href="https://medium.com/%E5%BE%8C%E7%AB%AF%E6%96%B0%E6%89%8B%E6%9D%91/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%AD%B8%E7%BF%92%E5%9C%B0%E5%9C%96-de216ab211fb">系統設計學習地圖</a></strong></li>
<li><strong><a href="https://medium.com/jkopay-frontend/%E5%AF%A6%E8%B8%90%E4%B8%80%E5%80%8B%E5%94%AE%E7%A5%A8%E5%BE%8C%E5%8F%B0%E7%9A%84%E6%80%9D%E8%B7%AF-f6015cd897aa">實踐一個售票後台的思路</a></strong></li>
<li><strong><a href="https://www.slideshare.net/kylinfish/ss-80020439">與設計架構當朋友</a></strong></li>
</ul>
<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul>
<li><strong><a href="https://blog.wu-boy.com/2022/09/three-tools-design-system-architecture-and-flow/?fbclid=IwAR1WotPK4u_Vfr1fK_A7wmU1TYo7pE3FiYDsHZ41kWhNQO4fqo5ztJYpCIU&fs=e&s=cl">三款好用的繪圖工具來解決系統架構或流程圖</a></strong></li>
</ul>
<h2 id="Code-Style"><a href="#Code-Style" class="headerlink" title="Code Style"></a>Code Style</h2><ul>
<li><strong><a href="https://medium.com/@steph.c/%E4%B8%89%E5%B1%A4%E6%9E%B6%E6%A7%8B%E6%98%AF%E4%BB%80%E9%BA%BC-%E6%88%91%E5%8F%AA%E7%9F%A5%E9%81%93%E4%B8%89%E5%B1%A4%E8%82%89-efe542c38aaf">MVC 三層架構 是什麼? 我只知道三層肉</a></strong></li>
<li><strong><a href="https://igouist.github.io/post/2021/10/newbie-5-3-layer-architecture/">菜雞新訓記 (5): 使用 三層式架構 來切分服務的關注點和職責吧</a></strong></li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E8%BB%9F%E9%AB%94%E6%9E%B6%E6%A7%8B-%E5%88%86%E5%B1%A4%E6%9E%B6%E6%A7%8B%E6%A8%A1%E5%BC%8F-layered-architecture-a959da09d1c6">軟體架構：分層架構模式 ( Layered Architecture )</a></strong></li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E4%BB%80%E9%BA%BC%E6%98%AFoo-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E8%88%87%E5%B0%81%E8%A3%9D-80379c24e62">什麼是OO？物件導向與封裝</a></strong></li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E4%BB%80%E9%BA%BC%E6%98%AFoo-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E8%88%87%E7%B9%BC%E6%89%BF-6955239576af">什麼是OO？物件導向與繼承</a></strong></li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E4%BB%80%E9%BA%BC%E6%98%AFoo-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E8%88%87%E5%A4%9A%E5%9E%8B-30690aa3934c">什麼是OO？物件導向與多型</a></strong></li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E4%B8%AD%E7%9A%84%E4%BB%8B%E9%9D%A2%E8%88%87%E6%8A%BD%E8%B1%A1%E9%A1%9E%E5%88%A5%E6%98%AF%E4%BB%80%E9%BA%BC-1199804ccc5f">物件導向中的介面與抽象類別是什麼 ?</a></strong></li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E4%BD%BF%E4%BA%BA%E7%98%8B%E7%8B%82%E7%9A%84-solid-%E5%8E%9F%E5%89%87-%E7%9B%AE%E9%8C%84-b33fdfc983ca">使人瘋狂的 SOLID 原則：目錄</a></strong></li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E8%AE%8A%E6%95%B8%E5%91%BD%E5%90%8D-f53cd1115076">基礎但不簡單: 變數命名規則</a></strong></li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E5%9F%BA%E7%A4%8E%E4%BD%86%E4%B8%8D%E7%B0%A1%E5%96%AE-%E4%BD%BF%E7%94%A8function-a3f6561cc9bd">基礎但不簡單：函數設計方法</a></strong></li>
<li><strong><a href="https://github.com/Kantai235/php-design-pattern">設計模式 Design Pattern</a></strong></li>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20111119/ironman/3269">PHP 大師之路 - 開源的技術淬練</a></strong></li>
</ul>
<h2 id="Microservices"><a href="#Microservices" class="headerlink" title="Microservices"></a>Microservices</h2><ul>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E8%BB%9F%E9%AB%94%E6%9E%B6%E6%A7%8B-%E5%BE%AE%E6%9C%8D%E5%8B%99%E6%A8%A1%E5%BC%8F-microservice-9fbb15bdeeed">軟體架構 : 微服務模式 (Microservice)</a></strong></li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E5%BE%AE%E6%9C%8D%E5%8B%99-%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87-bounded-context-75cee43278af">微服務：限界上下文(Bounded Context)</a></strong></li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E5%BE%AE%E6%9C%8D%E5%8B%99-%E5%A6%82%E4%BD%95%E7%A2%BA%E5%AE%9A%E8%B3%87%E6%96%99%E4%B8%80%E8%87%B4%E6%80%A7-2adab03fdc7f">微服務：如何確定資料一致性？</a></strong></li>
<li><strong><a href="https://cloud.google.com/learn/what-is-microservices-architecture?hl=zh-tw">什麼是微服務架構？</a></strong></li>
<li><strong><a href="https://columns.chicken-house.net/2017/04/15/microservice8-case-study/#%E5%89%8D%E8%A8%80-%E5%BE%AE%E6%9C%8D%E5%8B%99%E6%9E%B6%E6%A7%8B-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E5%B0%8E%E8%AE%80">微服務架構 系列文章導讀</a></strong></li>
<li><strong><a href="https://aws.amazon.com/tw/microservices/">AWS 提供產品的 Solution</a></strong></li>
</ul>
<h2 id="API-Gateway-Pattern"><a href="#API-Gateway-Pattern" class="headerlink" title="API Gateway Pattern"></a>API Gateway Pattern</h2><ul>
<li><strong><a href="https://medium.com/starbugs/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC%E8%80%85%E8%A9%B2%E8%B2%A0%E8%B2%AC%E5%AF%AB-api-endpoints-%E5%97%8E-the-backend-for-frontend-pattern-bff-in-microservices-world-1368362c141c">前端開發者該負責寫 API Endpoints 嗎？The Backend For Frontend Pattern (BFF) In Microservices World</a></strong></li>
<li><strong><a href="https://medium.com/tech-tajawal/backend-for-frontend-using-graphql-under-microservices-5b63bbfcd7d9">Backend-For-Frontend using GraphQL under Microservices</a></strong></li>
</ul>
<h2 id="Event-Driven-Pattern"><a href="#Event-Driven-Pattern" class="headerlink" title="Event-Driven Pattern"></a>Event-Driven Pattern</h2><ul>
<li><strong><a href="https://medium.com/tech-tajawal/rabbitmq-at-your-servers-775d3dbd36e8">RabbitMQ At your Service</a></strong></li>
<li><strong><a href="https://medium.com/peerone-technology-%E7%9A%AE%E5%81%B6%E7%8E%A9%E4%BA%92%E5%8B%95%E7%A7%91%E6%8A%80/%E5%9F%BA%E6%96%BC-event-driven-architecture-%E7%82%BA%E5%BE%AE%E6%9C%8D%E5%8B%99%E6%9E%B6%E6%A7%8B%E6%89%93%E9%80%A0-auth-service-a81aac364b21">基於 Event-Driven Architecture 為微服務架構打造 Auth Service</a></strong></li>
<li><strong><a href="https://www.readfog.com/a/1649430324632981504">EDA 事件驅動架構與 EventBridge 二三事</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>推薦Backend文章</title>
    <url>/suggest-backend-article/</url>
    <content><![CDATA[<h2 id="必讀文章"><a href="#必讀文章" class="headerlink" title="必讀文章"></a>必讀文章</h2><ul>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20103256/ironman/4227">全端工程師生存筆記</a></strong></li>
<li><strong><a href="https://www.cakeresume.com/resources/backend-engineers-salary-jobs-interview#backend-salary-report">後端工程師求職／自學之前，先懂後端薪水、熱門職缺與履歷面試技巧！</a></strong></li>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20113277/ironman/2937?page=1">前端工程師一起來種一棵後端技能樹吧！</a></strong></li>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20119970/ironman/2774?page=1">前端工程師也該會的後端技倆</a></strong></li>
<li><strong><a href="https://www.maxlist.xyz/">Max行銷誌</a></strong></li>
</ul>
<h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><ul>
<li><p><strong><a href="https://ithelp.ithome.com.tw/users/20130701/ironman/3783">作者超囉嗦，但一天只要十分鐘的MYSQL真．新手教學 </a></strong></p>
</li>
<li><p><strong><a href="https://ithelp.ithome.com.tw/articles/10229472">Day 32 資料庫正規化(一~三)</a></strong></p>
</li>
<li><p><strong><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/mysql-innodb-%E6%95%99%E6%88%91%E7%9A%84%E4%BA%8B-index-%E7%B4%A2%E5%BC%95-%E9%8E%96-%E8%B3%87%E6%BA%90%E5%90%84%E5%8F%B8%E5%85%B6%E8%81%B7-5c5747bc988f">MySQL🐬 InnoDB 教我的事： Index 索引、鎖、資源各司其職</a></strong></strong></p>
</li>
<li><p><strong><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/mysql-innodb-%E6%95%99%E6%88%91%E7%9A%84%E4%BA%8B-%E6%9C%80%E8%BF%91%E6%9C%80%E5%B0%91%E4%BD%BF%E7%94%A8-lru-%E4%B8%B2%E5%88%97%E7%9A%84%E5%84%AA%E5%8C%96-fb1781cdc90e">MySQL🐬 InnoDB 教我的事： 最近最少使用 LRU 串列的優化</a></strong></strong></p>
</li>
<li><p><strong><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/%E4%BD%B5%E7%99%BC%E7%B7%A8%E7%A8%8B-%E8%AB%87%E8%AB%87%E9%8E%96%E8%88%87%E8%B3%87%E6%BA%90-ac0acdba24c4">併發編程⚡談談鎖與資源</a></strong></strong></p>
</li>
<li><p><strong><a href="https://blog.scottchayaa.com/post/2019/01/09/how-to-handle-the-high-concurrency-on-laravel/">在laravel上處理高併發問題</a></strong></p>
</li>
<li><p><a href="https://oldmo860617.medium.com/database-transaction-acid-156a3b75845e"><strong>Database Transaction &amp; ACID</strong></a></p>
</li>
<li><p><a href="https://oldmo860617.medium.com/transaction-%E4%BD%B5%E7%99%BC%E9%8C%AF%E8%AA%A4%E8%88%87%E9%9A%94%E9%9B%A2%E5%B1%A4%E7%B4%9A-51b8af6178ae"><strong>Transaction 併發錯誤與隔離層級</strong></a></p>
</li>
<li><p><a href="https://oldmo860617.medium.com/%E8%B3%87%E6%96%99%E5%BA%AB%E6%87%89%E7%94%A8%E7%B6%93%E5%85%B8%E5%95%8F%E9%A1%8C-double-booking-problem-ccde5267b26f"><strong>資料庫應用經典問題 — Double Booking Problem</strong></a></p>
</li>
<li><p><strong><strong><a href="https://oldmo860617.medium.com/%E4%BB%A5-postgressql-%E7%82%BA%E4%BE%8B%E4%BA%86%E8%A7%A3%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84-query-plans-abd8b5f54c66">以 PostgresSQL 為例了解資料庫的 Query Plans</a></strong></strong></p>
</li>
<li><p><strong><strong><a href="https://blog.twjoin.com/%E9%8E%96-lock-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%AD%BB%E9%8E%96%E5%88%86%E6%9E%90-19833c18baab">鎖( Lock )的介紹與死鎖分析</a></strong></strong></p>
</li>
<li><p><strong><strong><a href="https://blog.twjoin.com/%E9%AB%98%E4%BD%B5%E7%99%BC%E6%83%85%E6%B3%81%E4%B8%8B%E6%AD%A3%E7%A2%BA%E8%99%95%E7%90%86%E5%85%B1%E4%BA%AB%E8%B3%87%E6%96%99%E7%AD%86%E8%A8%98-5e80ab488686">高併發情況下正確處理共享資料筆記</a></strong></strong></p>
</li>
<li><p><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E6%84%9B%E5%A5%BD%E8%80%85/%E4%BB%80%E9%BA%BC%E6%98%AF-olap-2c7cccf55c42">什麼是 OLAP ？</a></strong></p>
</li>
</ul>
<h2 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h2><ul>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20105865/ironman/2466">iThome 鐵人賽 - 使用 Laravel 打造 RESTful API </a></strong></li>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20130722/ironman/3818?page=1">iThome 鐵人賽 - Laravel 實戰經驗分享</a></strong> ⇒ 還會介紹如何手動建立 GitLab Runner</li>
<li><a href="https://slides.com/lili668668/deck-21de46/?fbclid=IwAR2pM2g5JuGBnWsColwvL2SzWds2cPXl1Elt07qgD41pkxjXmE7IJvKOQjM&fs"><strong>探索 Laravel 源碼 發現好用的小工具</strong></a></li>
<li><strong><a href="https://growingdna.com/php-laravel-opay-api/">PHP + Laravel 雞排聯盟API實作: 串接歐付寶金流API</a></strong></li>
</ul>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20140721/ironman/4944">資料三十-那些最基本的資料處理與分析技能</a></strong></li>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20107514/ironman/1399">使用Python進行資料分析</a></strong></li>
<li><strong><a href="https://myapollo.com.tw/zh-tw/python-typing-module/">使用 Python typing 模組對你的同事好一點</a></strong><ul>
<li><strong><a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html">Type hints cheat sheet</a></strong></li>
</ul>
</li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E4%B9%BE%E8%B2%A8/python-redis-v-s-mysql-%E6%9F%A5%E8%A9%A2%E5%AF%A6%E4%BD%9C-9f0cc0d9b32b">[Python] Redis v.s Mysql 查詢實作</a></strong></li>
<li><strong><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E4%B9%BE%E8%B2%A8/python-%E4%B8%A6%E8%A1%8C%E8%88%87%E5%B9%B3%E8%A1%8C-%E5%BD%B1%E5%88%86%E8%BA%AB%E4%B9%8B%E8%A1%93-2b8238916297">[Python] 並行與平行 — 影分身之術！</a></strong></li>
</ul>
<h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><ul>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20107247/ironman/1312?page=1">從無到有，打造一個漂亮乾淨俐落的 RESTful API</a></strong></li>
<li><strong><a href="https://ithelp.ithome.com.tw/articles/10274828">DAY18: 淺談Stream</a></strong></li>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20119338/ironman/3880">NestJS 帶你飛！</a></strong></li>
<li><strong><a href="https://blog.typeart.cc/using-puppeteer-crawler-common-skills/">Puppeteer爬蟲常用技巧</a></strong></li>
</ul>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ul>
<li><strong><a href="https://linyencheng.github.io/2019/07/13/tool-nginx/">Nginx Config 與常用指令教學</a></strong></li>
<li><strong><a href="https://www.javatpoint.com/nginx-minimal-configuration">NGINX Minimal Configuration</a></strong></li>
</ul>
<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><ul>
<li><strong><a href="https://blog.kenwsc.com/posts/2020/a-full-duplex-protocol-websocket/">雙向互動的即時訊息：Websocket 入門</a></strong></li>
<li><strong><a href="https://blog.twjoin.com/websocket-%E6%8A%80%E8%A1%93-2c46ae5f1cfd">WebSocket 技術</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title>推薦DevOps文章</title>
    <url>/suggest-devops-article/</url>
    <content><![CDATA[<h2 id="DevOps-文化"><a href="#DevOps-文化" class="headerlink" title="DevOps 文化"></a>DevOps 文化</h2><ul>
<li><strong><a href="https://www.cakeresume.com/resources/what-is-devops?locale=zh-TW">DevOps 介紹 》建立 DevOps 文化，消除開發、營運、品保斷層</a></strong></li>
</ul>
<h2 id="iThome-鐵人賽"><a href="#iThome-鐵人賽" class="headerlink" title="iThome 鐵人賽"></a>iThome 鐵人賽</h2><ul>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20130511/ironman/3644">AWS新手的30天之旅</a></strong></li>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20072606/ironman/3827">用 GitLab CI 玩轉自動化測試與佈署</a></strong></li>
</ul>
<h2 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a>AWS</h2><ul>
<li><strong><a href="https://godleon.github.io/blog/AWS/learn-AWS-IAM-3-assuming-role/">[AWS IAM] 學習重點節錄(3) - Assuming IAM Role</a></strong></li>
<li><strong><a href="https://jason-kao-blog.medium.com/aws%E7%9A%84%E9%9B%B2%E7%AB%AF%E6%9E%B6%E6%A7%8B%E6%A1%86%E6%9E%B6-%E6%95%88%E8%83%BD%E7%AF%87-8139e744a4b7">AWS的雲端架構框架-效能篇</a></strong></li>
<li><strong><a href="https://www.nakivo.com/blog/the-definitive-guide-to-aws-ec2-instance-types/">The Definitive Guide to AWS EC2 Instance Types</a></strong></li>
<li><strong><a href="https://medium.com/starbugs/coding-your-cdn-%E5%85%85%E6%BB%BF%E9%A9%9A%E5%A5%87%E7%9A%84-aws-lambda-edge-763d9dd1f00d">Coding your CDN ! 充滿驚奇的 AWS Lambda@Edge</a></strong></li>
<li><strong><a href="https://ikala.cloud/google-cloud-pub-sub-aws-sqs-comparison/">拆解雲端 Message Service：Google Cloud Pub&#x2F;Sub vs. AWS SQS 優劣分析</a></strong></li>
</ul>
<h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><ul>
<li><strong><a href="https://medium.com/starbugs/multi-tenancy-kubernetes-cluster-part-1-%E8%AA%8D%E5%91%BD%E5%90%A7-%E6%9C%89%E4%B8%80%E5%A5%BD-%E5%B0%B1%E6%B2%92%E5%85%A9%E5%A5%BD-3eddb75eeb4c">Multi-Tenancy Kubernetes Cluster Part 1: 認命吧！有一好，就沒兩好！</a></strong></li>
<li><strong><a href="https://medium.com/@pavanbelagatti/kubernetes-service-types-explained-2709cde3bc0c">Kubernetes Service Types Explained</a></strong></li>
</ul>
<h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><ul>
<li><strong><a href="https://pavolkutaj.medium.com/using-cloudwatch-dimension-values-as-grafana-variables-45c2c09f9fdd">Using Cloudwatch Dimension Values As Grafana Variables</a></strong></li>
</ul>
<h2 id="Domain"><a href="#Domain" class="headerlink" title="Domain"></a>Domain</h2><ul>
<li><strong><a href="https://its-okay.medium.com/%E6%90%9E%E6%87%82-ip-fqdn-dns-name-server-%E9%BC%A0%E5%B9%B4%E5%85%A8%E9%A6%AC%E9%90%B5%E4%BA%BA%E6%8C%91%E6%88%B0-05-aa60f45496fb">搞懂 IP、FQDN、DNS、Name Server</a></strong></li>
</ul>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul>
<li><strong><a href="https://totoroliu.medium.com/http-2-%E6%98%AF%E4%BB%80%E9%BA%BC-d7de699bdbae">Http&#x2F;2 是什麼?</a></strong></li>
<li><strong><a href="https://its-okay.medium.com/%E9%97%9C%E6%96%BC-http-request-%E7%9A%84%E6%BC%8F%E6%B4%9E-%E9%BC%A0%E5%B9%B4%E5%85%A8%E9%A6%AC%E9%90%B5%E4%BA%BA%E6%8C%91%E6%88%B0-23-d215b1e819a7">關於 HTTP Request 的漏洞</a></strong></li>
<li><strong><a href="https://yu-jack.github.io/2017/10/20/secure-header/">增加安全性的 HTTP Headers</a></strong></li>
<li><strong><a href="https://notfalse.net/48/http-status-codes#302-Found-8212">HTTP 狀態碼 (Status Codes)</a></strong></li>
<li><strong><a href="https://kknews.cc/news/yegpn6g.html">看圖學 HTTPS</a></strong></li>
<li><strong><a href="https://codecharms.me/posts/security-ssl-https">[Security] SSL—HTTPS 背後功臣</a></strong></li>
</ul>
<h2 id="Session-amp-Cookie"><a href="#Session-amp-Cookie" class="headerlink" title="Session &amp; Cookie"></a>Session &amp; Cookie</h2><ul>
<li><strong><a href="https://yu-jack.github.io/2019/06/02/ajax-with-session/">前後端分離下之使用 session</a></strong></li>
<li><strong><a href="https://its-okay.medium.com/same-origin-policy-%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%AD%86%E8%A8%98-%E9%BC%A0%E5%B9%B4%E5%85%A8%E9%A6%AC%E9%90%B5%E4%BA%BA%E6%8C%91%E6%88%B0-22-eb9f38bf902b">Same Origin Policy 同源政策筆記</a></strong></li>
<li><strong><a href="https://its-okay.medium.com/%E8%AA%8D%E8%AD%98%E7%B6%B2%E7%AB%99%E4%B8%89%E5%B1%A4%E5%BC%8F%E6%9E%B6%E6%A7%8B-cookie-%E9%BC%A0%E5%B9%B4%E5%85%A8%E9%A6%AC%E9%90%B5%E4%BA%BA%E6%8C%91%E6%88%B0-21-c3dddde1e5c4">認識網站三層式架構 、Cookie</a></strong></li>
<li><strong><a href="https://blog.kenwsc.com/posts/2023/jwt-vs-session/">更好的選擇？用 JWT 取代 Session 的風險</a></strong></li>
</ul>
<h2 id="密碼學"><a href="#密碼學" class="headerlink" title="密碼學"></a>密碼學</h2><ul>
<li><strong><a href="https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c">一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash</a></strong></li>
<li><strong><a href="https://medium.com/starbugs/how-to-store-password-in-database-sefely-6b20f48def92">聽說不能用明文存密碼，那到底該怎麼存？</a></strong></li>
</ul>
<h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><ul>
<li><strong><a href="https://giboss.pixnet.net/blog/post/26798748-osi%E4%B8%83%E5%B1%A4%E7%B0%A1%E4%BB%8B">OSI七層簡介</a></strong></li>
</ul>
<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><ul>
<li><strong><a href="https://kknews.cc/zh-tw/code/34mlvqg.html">圖解 SSH 原理</a></strong></li>
<li><strong><a href="https://codecharms.me/posts/security-ssh">[Security] 你該知道所有關於 SSH 的那些事</a></strong></li>
<li><strong><a href="https://hackmd.io/@CynthiaChuang/Generating-a-Ssh-Key-and-Adding-It-to-the-Github">使用 SSH 金鑰與 GitHub 連線</a></strong></li>
<li><strong><a href="https://huataihuang.gitbooks.io/cloud-atlas/content/service/ssh/ssh_key.html">SSH 密鑰</a></strong></li>
<li><strong><a href="https://wangdoc.com/ssh/key">SSH 密钥登录</a></strong></li>
<li><strong><a href="https://terryl.in/zh/ssh-key-login-without-password/">SSH Login 使用 Key 驗證，免密碼登入的設定方法</a></strong></li>
<li><strong><a href="https://medium.com/%E6%B5%A6%E5%B3%B6%E5%A4%AA%E9%83%8E%E7%9A%84%E6%B0%B4%E6%97%8F%E7%BC%B8/how-to-setup-ssh-config-%E4%BD%BF%E7%94%A8-ssh-%E8%A8%AD%E5%AE%9A%E6%AA%94-74ad46f99818">How to setup SSH config ：使用 SSH 設定檔簡化指令與連線網址</a></strong></li>
</ul>
<h2 id="Load-Testing"><a href="#Load-Testing" class="headerlink" title="Load Testing"></a>Load Testing</h2><ul>
<li><strong><a href="https://clouding.city/tool/k6/">k6 - 現代負載測試工具</a></strong></li>
<li><strong><a href="https://ithelp.ithome.com.tw/articles/10305862">[Day24][負載測試] K6 使用上常見的參數設定(options)有哪些？</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>推薦Frontend文章</title>
    <url>/suggest-frontend-article/</url>
    <content><![CDATA[<h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><ul>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20113277/ironman/3877?page=1">今晚，我想來點 Web 前端效能優化大補帖！</a></strong></li>
</ul>
<h2 id="CORS-amp-Cookie"><a href="#CORS-amp-Cookie" class="headerlink" title="CORS &amp; Cookie"></a>CORS &amp; Cookie</h2><ul>
<li><strong><a href="https://shubo.io/what-is-cors/">[教學] CORS 是什麼? 如何設定 CORS?</a></strong></li>
<li><strong><a href="https://shubo.io/cookies/#samesite">[教學] Cookie 是什麼？如何用 JavaScript get&#x2F;set document.cookie?</a></strong></li>
</ul>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><ul>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20131472/ironman/4100?page=3">前端是該來學一下 TypeScript 了</a></strong></li>
</ul>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul>
<li><strong><a href="https://medium.com/dean-lin/3%E5%88%86%E9%90%98%E5%B8%B6%E4%BD%A0%E6%90%9E%E6%87%82-vue-vuex-vuetify-nuxt-js-%E4%B9%8B%E9%96%93%E7%9A%84%E9%97%9C%E4%BF%82-875a9c69d3fd">5 分鐘帶你搞懂 Vue、Vuex、Vuetify、Nuxt.js 之間的關係</a></strong></li>
</ul>
<h2 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h2><ul>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20129729/ironman/5297">Nuxt 3 - 因為還不穩定，所以來踩地雷</a></strong></li>
<li><strong><a href="https://ithelp.ithome.com.tw/users/20152617/ironman/5934">Nuxt 3 學習筆記</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>提升生產力的文章</title>
    <url>/suggest-knowledge-article/</url>
    <content><![CDATA[<h2 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h2><ul>
<li><strong><a href="https://www.explainthis.io/zh-hant/chatgpt/website">我用 ChatGPT 寫了一個 ChatGPT 指令大全網站</a></strong></li>
<li><strong><a href="https://www.holakevinfang.com/video-filiming/chatgpt-related-tool-increase-productivity/">ChatGPT 還有其他 AI 兄弟姊妹！利用 ChatGPT 衍生工具讓你變成生產力之王</a></strong></li>
<li><strong><a href="https://www.futurepedia.io/">使用FUTUREPEDIA尋找其他AI工具</a></strong></li>
</ul>
<h2 id="Video-Editor"><a href="#Video-Editor" class="headerlink" title="Video Editor"></a>Video Editor</h2><ul>
<li><strong><a href="https://www.flexclip.com/">Flexclip</a></strong></li>
</ul>
<h2 id="文字轉圖片"><a href="#文字轉圖片" class="headerlink" title="文字轉圖片"></a>文字轉圖片</h2><ul>
<li><strong><a href="https://openai.com/product/dall-e-2">DALL·E</a></strong></li>
</ul>
<h2 id="電商平台"><a href="#電商平台" class="headerlink" title="電商平台"></a>電商平台</h2><ul>
<li><strong><a href="https://www.holakevinfang.com/online-earning/make-money-via-shopify/">【電商平台創業】7種利用Shopify創業賺錢的方式</a></strong></li>
</ul>
<h2 id="軟實力"><a href="#軟實力" class="headerlink" title="軟實力"></a>軟實力</h2><ul>
<li><strong><a href="https://rock070.me/thinks/soft-skills/2023-01-04-learn-in-public">如何在公開場合學習</a></strong></li>
<li><strong><a href="https://www.meepshop.com/blog/2022/05/13/ec-shop-platform-compare/">2023年電商平台比較指南，教你如何選擇開店平台</a></strong></li>
<li><strong><a href="https://haoeasy.fami.life/">全家電商開店</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Knowledge</tag>
      </tags>
  </entry>
  <entry>
    <title>如何設定 Supervisor 用 app 執行</title>
    <url>/supervisor-use-app-user/</url>
    <content><![CDATA[<h2 id="步驟一、建立-Supervisord-conf"><a href="#步驟一、建立-Supervisord-conf" class="headerlink" title="步驟一、建立 Supervisord.conf"></a>步驟一、建立 Supervisord.conf</h2><ul>
<li><p>資料夾路徑改成自定義，來放執行檔 ⇒ supervisor.sock</p>
<ul>
<li>將原本定義 <code>/var/run</code> 改成 <code>/var/supervisor</code></li>
</ul>
</li>
<li><p>更改原因：<code>/var/run</code> 資料夾必須是用 root 使用者才可以讀取</p>
</li>
<li><p>修改 supervisord.conf 檔案的 unix_http_server、supervisord 區塊</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">;</span> <span class="string">supervisor</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line"></span><br><span class="line">[<span class="string">unix_http_server</span>]</span><br><span class="line"><span class="string">file=/var/supervisor/supervisor.sock</span>   <span class="string">;</span> <span class="string">(the</span> <span class="string">path</span> <span class="string">to</span> <span class="string">the</span> <span class="string">socket</span> <span class="string">file)</span></span><br><span class="line"><span class="string">chmod=0700</span>                       <span class="string">;</span> <span class="string">sockef</span> <span class="string">file</span> <span class="string">mode</span> <span class="string">(default</span> <span class="number">0700</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line">[<span class="string">supervisord</span>]</span><br><span class="line"><span class="string">;logfile=/var/log/supervisor/supervisord.log</span> <span class="string">;</span> <span class="string">(main</span> <span class="string">log</span> <span class="string">file;default</span> <span class="string">$CWD/supervisord.log)</span></span><br><span class="line"><span class="string">pidfile=/var/supervisor/supervisord.pid</span> <span class="string">;</span> <span class="string">(supervisord</span> <span class="string">pidfile;default</span> <span class="string">supervisord.pid)</span></span><br><span class="line"><span class="string">;childlogdir=/var/log/supervisor</span>            <span class="string">;</span> <span class="string">(&#x27;AUTO&#x27;</span> <span class="string">child</span> <span class="string">log</span> <span class="string">dir,</span> <span class="string">default</span> <span class="string">$TEMP)</span></span><br><span class="line"></span><br><span class="line"><span class="string">;</span> <span class="string">the</span> <span class="string">below</span> <span class="string">section</span> <span class="string">must</span> <span class="string">remain</span> <span class="string">in</span> <span class="string">the</span> <span class="string">config</span> <span class="string">file</span> <span class="string">for</span> <span class="string">RPC</span></span><br><span class="line"><span class="string">;</span> <span class="string">(supervisorctl/web</span> <span class="string">interface)</span> <span class="string">to</span> <span class="string">work,</span> <span class="string">additional</span> <span class="string">interfaces</span> <span class="string">may</span> <span class="string">be</span></span><br><span class="line"><span class="string">;</span> <span class="attr">added by defining them in separate rpcinterface:</span> <span class="string">sections</span></span><br><span class="line">[<span class="string">rpcinterface:supervisor</span>]</span><br><span class="line"><span class="string">supervisor.rpcinterface_factory</span> <span class="string">=</span> <span class="string">supervisor.rpcinterface:make_main_rpcinterface</span></span><br><span class="line"></span><br><span class="line">[<span class="string">supervisorctl</span>]</span><br><span class="line"><span class="string">serverurl=unix:///var/supervisor/supervisor.sock</span> <span class="string">;</span> <span class="string">use</span> <span class="string">a</span> <span class="string">unix://</span> <span class="string">URL</span>  <span class="string">for</span> <span class="string">a</span> <span class="string">unix</span> <span class="string">socket</span></span><br><span class="line"></span><br><span class="line"><span class="string">;</span> <span class="string">The</span> [<span class="string">include</span>] <span class="string">section</span> <span class="string">can</span> <span class="string">just</span> <span class="string">contain</span> <span class="string">the</span> <span class="string">&quot;files&quot;</span> <span class="string">setting.</span>  <span class="string">This</span></span><br><span class="line"><span class="string">;</span> <span class="string">setting</span> <span class="string">can</span> <span class="string">list</span> <span class="string">multiple</span> <span class="string">files</span> <span class="string">(separated</span> <span class="string">by</span> <span class="string">whitespace</span> <span class="string">or</span></span><br><span class="line"><span class="string">;</span> <span class="string">newlines).</span>  <span class="string">It</span> <span class="string">can</span> <span class="string">also</span> <span class="string">contain</span> <span class="string">wildcards.</span>  <span class="string">The</span> <span class="string">filenames</span> <span class="string">are</span></span><br><span class="line"><span class="string">;</span> <span class="string">interpreted</span> <span class="string">as</span> <span class="string">relative</span> <span class="string">to</span> <span class="string">this</span> <span class="string">file.</span>  <span class="string">Included</span> <span class="string">files</span> <span class="string">*cannot*</span></span><br><span class="line"><span class="string">;</span> <span class="string">include</span> <span class="string">files</span> <span class="string">themselves.</span></span><br><span class="line"></span><br><span class="line">[<span class="string">include</span>]</span><br><span class="line"><span class="string">files</span> <span class="string">=</span> <span class="string">/etc/supervisor/conf.d/*.conf</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="步驟二、更改-Dockerfile-的指令"><a href="#步驟二、更改-Dockerfile-的指令" class="headerlink" title="步驟二、更改 Dockerfile 的指令"></a>步驟二、更改 Dockerfile 的指令</h2><ul>
<li>複製 supervisord.conf 到 <code>/etc/supervisor</code> 資料夾</li>
<li>使用 root 角色建立資料夾並更改資料夾的 owner 使用者為 app</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">USER</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="string">COPY</span> <span class="string">deploy/supervisord.conf</span> <span class="string">/etc/supervisor/supervisord.conf</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">mkdir</span> <span class="string">/var/supervisor</span> <span class="string">&amp;&amp;</span> <span class="string">chown</span> <span class="string">-R</span> <span class="string">app:app</span> <span class="string">/var/supervisor</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="string">USER</span> <span class="string">app</span></span><br></pre></td></tr></table></figure>

<h2 id="最後步驟、設定容器啟動指令"><a href="#最後步驟、設定容器啟動指令" class="headerlink" title="最後步驟、設定容器啟動指令"></a>最後步驟、設定容器啟動指令</h2><ul>
<li>用 <code>supervisord</code> 指令去執行第一步建立的設定檔， <code>-n</code> 代表用 dameon 背景執行</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">heavy-worker:</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">common-services.yml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">server</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rhitics-heavy-worker</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;SERVER_PATH&#125;/deploy/heavy_workers/laravel-worker.conf:/etc/supervisor/conf.d/laravel-worker.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;SERVER_PATH&#125;/deploy/heavy_workers/horizon.php:/var/www/api.rhitics.com/config/horizon.php</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;supervisord&quot;</span>, <span class="string">&quot;-n&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/etc/supervisor/supervisord.conf&quot;</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 presigned url 限制上傳 S3 權限</title>
    <url>/upload-s3-by-presigned-url/</url>
    <content><![CDATA[<h2 id="為何需要"><a href="#為何需要" class="headerlink" title="為何需要"></a>為何需要</h2><ul>
<li>後端透過 AWS SDK 產生已簽名的 URL 給前端上傳檔案，可以省下從前端上傳檔案到後端的錢</li>
<li>已簽名的 URL 可以限制 Client 上傳的時間，相對安全</li>
</ul>
<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><p><strong>步驟一、建立 NodeJS 專案</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化專案</span></span><br><span class="line"><span class="string">npm</span> <span class="string">init</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝 aws-sdk 套件</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">@aws-sdk/client-s3</span> <span class="string">@aws-sdk/s3-request-presigner</span></span><br></pre></td></tr></table></figure>

<p><strong>步驟二、使用 SSO 進行登入</strong></p>
<ul>
<li>操作方式可以參考這篇文章 ⇒ <a href="/access-s3-from-cross-account">如何設定跨帳戶存取 S3 權限</a></li>
</ul>
<p><strong>步驟三、撰寫產生 presigned url 程式碼</strong></p>
<ul>
<li><p>如果要在程式碼使用 module 方式，需要在 package.json 檔案裡面加上 <code>&quot;type&quot;: &quot;module&quot;</code></p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">import</span> &#123; <span class="string">PutObjectCommand</span> &#125; <span class="string">from</span> <span class="string">&quot;@aws-sdk/client-s3&quot;</span><span class="string">;</span></span><br><span class="line"><span class="string">import</span> &#123; <span class="string">S3Client</span> &#125; <span class="string">from</span> <span class="string">&quot;@aws-sdk/client-s3&quot;</span><span class="string">;</span></span><br><span class="line"><span class="string">import</span> &#123; <span class="string">getSignedUrl</span> &#125; <span class="string">from</span> <span class="string">&quot;@aws-sdk/s3-request-presigner&quot;</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="string">const</span> <span class="string">s3Client</span> <span class="string">=</span> <span class="string">new</span> <span class="string">S3Client(&#123;</span> <span class="attr">region:</span> <span class="string">&quot;us-west-2&quot;</span> <span class="string">&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="string">export</span> <span class="string">const</span> <span class="string">bucketParams</span> <span class="string">=</span> &#123;</span><br><span class="line">    <span class="attr">Bucket:</span> <span class="string">&#x27;s3.rhinoshield.io&#x27;</span>,</span><br><span class="line">    <span class="attr">Key:</span> <span class="string">&#x27;customcase/customer/png/123.png&#x27;</span>,</span><br><span class="line">    <span class="attr">ACL:</span> <span class="string">&#x27;bucket-owner-full-control&#x27;</span></span><br><span class="line">&#125;<span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="string">export</span> <span class="string">const</span> <span class="string">run</span> <span class="string">=</span> <span class="string">async</span> <span class="string">()</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">    <span class="string">try</span> &#123;</span><br><span class="line">        <span class="string">const</span> <span class="string">command</span> <span class="string">=</span> <span class="string">new</span> <span class="string">PutObjectCommand(bucketParams);</span></span><br><span class="line">        <span class="string">const</span> <span class="string">signedUrl</span> <span class="string">=</span> <span class="string">await</span> <span class="string">getSignedUrl(s3Client</span>, <span class="string">command</span>, &#123;</span><br><span class="line">          <span class="attr">expiresIn:</span> <span class="number">60</span>,</span><br><span class="line">        &#125;<span class="string">);</span></span><br><span class="line">        <span class="string">console.log(signedUrl);</span></span><br><span class="line">    &#125; <span class="string">catch</span> <span class="string">(err)</span> &#123;</span><br><span class="line">        <span class="string">console.log(&quot;Error</span> <span class="string">creating</span> <span class="string">presigned</span> <span class="string">URL&quot;</span>, <span class="string">err);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">run();</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步驟四、執行程式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node generate.js</span><br></pre></td></tr></table></figure>

<p><img src="/../images/aws/upload_s3_by_presigned_url1.png" alt="upload_s3_by_presigned_url1"></p>
<p><strong>步驟五、使用 Postman 上傳檔案</strong></p>
<ul>
<li><p>HTTP Method 選擇 PUT</p>
</li>
<li><p>Body 選擇 binary</p>
</li>
<li><p>上傳檔案的檔名需跟簽章 URL 的檔名一樣</p>
<p>  <img src="/../images/aws/upload_s3_by_presigned_url2.png" alt="upload_s3_by_presigned_url2"></p>
</li>
</ul>
<p><strong>步驟六、前端頁面使用 PUT 上傳檔案，要設定 S3 CORS 規則</strong></p>
<p><img src="/../images/aws/upload_s3_by_presigned_url3.png" alt="upload_s3_by_presigned_url3"></p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>S3</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Redis Benchmark 進行壓力測試</title>
    <url>/use-redis-benchmark-stress-test/</url>
    <content><![CDATA[<h2 id="Redis-Benchmark"><a href="#Redis-Benchmark" class="headerlink" title="Redis Benchmark"></a>Redis Benchmark</h2><ul>
<li>Redis 版本 6 才會有 <code>--cluster</code> 參數使用</li>
<li>Cluster 的 master node 必須要 2 台以上，才可以進行壓測</li>
<li>只會針對 master node 進行壓測，slave node 則不會</li>
<li>用來模擬 N 個客戶端同時發出 M 個請求</li>
<li>參數認識<ul>
<li><code>-n &lt;requests&gt;</code>：要發送的 request 數量 (預設 100,000)</li>
<li><code>-d &lt;data size&gt;</code>：執行 SET&#x2F;GET 指令操作的資料大小 (預設 2 bytes )</li>
<li><code>-c &lt;clients&gt;</code>：平行的連線數 (預設 50)</li>
<li><code>-t &lt;tests&gt;</code>：指定要執行的指令(預設是全跑)</li>
<li><code>-r &lt;random keyspacelen&gt;</code>：使用隨機的 key (指定範圍)</li>
<li><code>-P &lt;pipeline&gt;</code>：發送 Request 的 Pipeline 數量 (預設 1 條)</li>
<li><code>-q &lt;quite&gt;</code>：只顯示 query&#x2F;sec 值 (預設會顯示詳細報告)</li>
<li><code>-h &lt;host&gt;</code>：Redis Endpoint</li>
<li><code>-p &lt;port&gt;</code>：開放 Port</li>
<li><code>--cluster</code>：指定 Redis Cluster 模式</li>
</ul>
</li>
</ul>
<h2 id="Elasticache-AutoScaling-Limit"><a href="#Elasticache-AutoScaling-Limit" class="headerlink" title="Elasticache AutoScaling Limit"></a>Elasticache AutoScaling Limit</h2><p>參考連結 ⇒ <strong><a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoScaling.html">Auto Scaling ElastiCache for Redis clusters</a></strong></p>
<ul>
<li>Redis 版本必須 6 以上</li>
<li>Instance Family：R5, R6g, M5, M6g</li>
<li>Instance size：large, xlarge, 2xlarge</li>
</ul>
<h2 id="Elasticache-AutoScaling-Policy"><a href="#Elasticache-AutoScaling-Policy" class="headerlink" title="Elasticache AutoScaling Policy"></a>Elasticache AutoScaling Policy</h2><ul>
<li>每一個 target metrics 只會有一個 auto scaling policy</li>
<li>Target metrics 支援 memory 及 primary cpu utilization</li>
<li>Scale 類型可以選擇 shards 或 replicas</li>
<li>Minimum and maximum capacity 設定區間，如果要調整上限可以到 aws service limit 填寫<ul>
<li>shards 設定區間為 1~250</li>
<li>replicas 設定區間為 1~5</li>
</ul>
</li>
<li>Cold Down 預設 scale-out 為 600 秒，scale-in 為 900 秒</li>
<li>Target Value 設定區間為 35~70</li>
</ul>
<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><ul>
<li><p><strong>步驟一、設定 auto scaling policy</strong></p>
<ul>
<li>當 memory 使用量達到 50% 可以增加到 3 個 shards，沒在使用可以縮減為 1 個 shard</li>
</ul>
</li>
<li><p><strong>步驟二、確認 Cluster 的 Node 數量</strong></p>
<ul>
<li>使用 redis-benchmark 工具需要至少兩台 Node</li>
</ul>
</li>
<li><p><strong>步驟三、建立 EC2 環境</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安裝 redis 6</span></span><br><span class="line">$ sudo amazon-linux-extras install redis6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看工具版本</span></span><br><span class="line">$ redis-benchmark -v</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>步驟四、連線到 EC2 執行壓測指令</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 連線 redis 測試</span></span><br><span class="line">$ redis-cli -h &lt;endpoint&gt; -p 6379 -c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 連線進去 redis 查看 cluster 節點</span></span><br><span class="line">$ cluster nodes</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用set,get指令，來操作10240Bytes(10MB)資料大小，預設一次並行50個client總共會發十萬個請求</span></span><br><span class="line">$ redis-benchmark -t <span class="built_in">set</span>,get -d 10240 -h &lt;redis endpoint&gt; -p 6379 --cluster</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>步驟五、查看執行結果</strong></p>
<ul>
<li><p>執行完出現 <code>ERROR: ERR unknown command ‘Config’</code> 錯誤訊息，是因為 Elasticache 不支援該語法(<a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/RestrictedCommands.html">Restricted Redis Commands</a>)，但不影響壓測功能</p>
</li>
<li><p>顯示呼叫 SET 指令的資料(request數量、並行數量、資料大小等等)</p>
<p>  <img src="/../images/redis/use-redis-benchmark-stress-test1.png" alt="use-redis-benchmark-stress-test1"></p>
</li>
<li><p>回報全部請求的平均速度(msec)</p>
<p>  <img src="/../images/redis/use-redis-benchmark-stress-test2.png" alt="use-redis-benchmark-stress-test2"></p>
</li>
</ul>
</li>
<li><p><strong>步驟六、觸發 Scale Out 機制</strong></p>
<ul>
<li><p>將壓測的資料大小改成 200 KB、並發 100 個且總共發 1百萬個請求</p>
<p>  <img src="/../images/redis/use-redis-benchmark-stress-test3.png" alt="use-redis-benchmark-stress-test3"></p>
</li>
<li><p>伸縮機器都會觸發 resharding 機制，設定完大約會花費 17 分鐘左右，還是可以正常使用</p>
</li>
</ul>
</li>
<li><p><strong>步驟七、觸發 Scale In 機制</strong></p>
<ul>
<li><p>使用 flushall 將 Redis 資料清掉</p>
<p>  <img src="/../images/redis/use-redis-benchmark-stress-test4.png" alt="use-redis-benchmark-stress-test4"></p>
</li>
</ul>
</li>
</ul>
<h2 id="影響-Redis-效能"><a href="#影響-Redis-效能" class="headerlink" title="影響 Redis 效能"></a>影響 Redis 效能</h2><ul>
<li><strong>Network bandwidth and latency</strong><ul>
<li>建議提高機器的網卡速度(1 GBits&#x2F;s → 10 GBits&#x2F;s)，來提高吞吐量</li>
</ul>
</li>
<li><strong>CPU</strong><ul>
<li>Redis 是單線程模型，適合大緩存快速 CPU 而不是多核，官方推薦 Intel CPU (AMD CPU 只有 Intel CPU 效能的一半)</li>
</ul>
</li>
<li><strong>VM</strong><ul>
<li>Redis 在 VM 上會變慢，因為虛擬化對普通操作會有額外的消耗</li>
<li>建議把 Redis 運行在物理機器上，特別是很在意延遲</li>
</ul>
</li>
<li><strong>Server 和 Client 都運行在同一個機器上</strong><ul>
<li>同一台機器上，TCP&#x2F;IP loopback 和 unix domain sockets 都可以使用，對 Linux 來說，使用unix socket 可以比 TCP&#x2F;IP loopback 快 50%，Redis 預設會使用 TCP&#x2F;IP loopback</li>
<li>使用大量的 pipeline，unix domain sockets 優勢就沒這麼明顯</li>
<li>建議把 Server 和 Clinet 運行在不同機器上</li>
</ul>
</li>
<li><strong>Memory</strong><ul>
<li>盡可能大內存，千萬不要使用SWAP。注意32 位和64 位Redis 有不同的內存限制</li>
</ul>
</li>
</ul>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><strong><a href="https://medium.com/jerrynotes/redis-benchmark-316dca7d91a8">Jerry - Redis Benchmark</a></strong></li>
<li><strong><a href="http://www.redis.cn/topics/benchmarks.html">Redis有多快?</a></strong></li>
<li><strong><a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoScaling-Scaling-Adding-Policy-Shards.html">Adding a scaling policy</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis - Replication 運作機制</title>
    <url>/what-is-redis-replication/</url>
    <content><![CDATA[<h2 id="Replica-類型"><a href="#Replica-類型" class="headerlink" title="Replica 類型"></a>Replica 類型</h2><ul>
<li>整台機器：單一實例</li>
<li>Shard：Cluster 模式</li>
</ul>
<h2 id="運作流程"><a href="#運作流程" class="headerlink" title="運作流程"></a>運作流程</h2><p><strong>名詞解釋</strong></p>
<ul>
<li>主節點(primary node )<ul>
<li>主要用來 read&#x2F;write</li>
</ul>
</li>
<li>從節點(replica node)<ul>
<li>只能 read 不能 write，負責與主節點同步資料</li>
</ul>
</li>
<li>Replication ID(runId)<ul>
<li>每一個主節點都會有自己的 Replication ID，由 40 個隨機的十六進制字符組成</li>
<li>當從節點初次複製主節點時，主節點會把 Replication ID 發給從節點保存，這樣從節點重新連線，主節點會拿 Replication ID 與自己的 ID 做比對來判斷是否為同一個</li>
</ul>
</li>
<li>Replication id 和 offset (偏移量)<ul>
<li>Replication ID 用來標記 data set 的歷史紀錄</li>
<li>主從節點會各自維護 record (offset) 記錄</li>
<li>offset 記錄的偏移量，用於判斷主從之間的數據差</li>
</ul>
</li>
<li>Replication backlog<ul>
<li>backlog buffer 是緩衝區，主節點只會有一個 backlog 與所有的從節點共用</li>
<li>backlog 會累積主節點最近沒有同步給從節點的資料</li>
<li>大小透過 repl-backlog-size 設置，預設大小為 1 MB</li>
<li>TTL 透過 repl-backlog-ttl 設置，預設為 3600 秒</li>
</ul>
</li>
</ul>
<p><strong>流程</strong></p>
<ul>
<li>從節點使用**非同步(asynchronous)**的方式，從主節點複制資料到從節點上，當從節點加入到 redis cluster 後，從節點會拿 replication-id 及 offset 向主節點發起 psync (增量&#x2F;部分同步)，此時主節點會比對 replication-id 是否一致，若不一致 ，則會 reject psync，而執行 full-sync (全同步)，若 replication-id 一致，則會比對 offset 資料是否在 backlog buffer 中，若 offset 資料在 backlog buffer 中則執行 psync，反之 reject psync 而執行 full-sync。</li>
<li>當主節點與從節點連線成功，主節點會持續送指令給從節點，當某些原因造成連線異常會延遲複製，之後從節點 reconnect 主節點會要求 partial sync (又稱為 psync)，如果 partial sync 失敗則會用 full sync 方式來同步</li>
</ul>
<h2 id="Replica-特性"><a href="#Replica-特性" class="headerlink" title="Replica 特性"></a><strong>Replica 特性</strong></h2><ul>
<li>Replica 節點使用異步方式與 Primary 節點保持同步</li>
<li>應用程式可以從任一節點(Primary&#x2F;Replica)進行讀取，但只能從主節點寫入資料</li>
<li>Read Replicas 透過多個不同的 endpoints 來增加擴展性</li>
<li>Read Replicas 透過複製主節點資料來改善容錯機制</li>
</ul>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><strong><strong><a href="https://medium.com/jerrynotes/redis-replication-%E5%90%8C%E6%AD%A5%E5%A6%82%E4%BD%95%E5%9F%B7%E8%A1%8C-ef48675f6918">Redis Replication 同步如何執行？</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用 AWS RDS Proxy</title>
    <url>/use-mariadb-with-rds-proxy/</url>
    <content><![CDATA[<h2 id="發生問題"><a href="#發生問題" class="headerlink" title="發生問題"></a>發生問題</h2><ul>
<li>資料庫有 max_connection 參數來限制最大連線數</li>
<li>當 Worker 數量變多與資料庫的連線達到上限值，新 worker 機器就會出現 connection fail</li>
</ul>
<h2 id="RDS-Proxy"><a href="#RDS-Proxy" class="headerlink" title="RDS Proxy"></a>RDS Proxy</h2><ul>
<li><p>用來處理資料庫流量無法預測的突增情況，避免 Connection Fail 情況發生</p>
</li>
<li><p>應用程式更具可擴展性、提高對數據庫遇故障時的恢復能力</p>
</li>
<li><p>實作原理</p>
<p>  <img src="/../images/aws/use-mariadb-with-rds-proxy1.png" alt="use-mariadb-with-rds-proxy1"></p>
</li>
</ul>
<h2 id="Connection-Pool"><a href="#Connection-Pool" class="headerlink" title="Connection Pool"></a>Connection Pool</h2><p>主要功能是<strong>降低對資料庫連線&#x2F;關閉的次數</strong>，讓每次的 connection 都可以從 pool 中取得，為了達到該主要功能需要了解以下三個元素：</p>
<ul>
<li><strong>multiplexing:</strong> 為 transaction-level reuse，就是 session 中的每個 transaction 做完後可以在被重複使用，連線不會因此而中斷</li>
<li><strong>borrowing connection:</strong> 移除現有的 connection，重新將連線在加入到 pool 中，根據 Connection borrow timeout 參數來做動</li>
<li><strong>pinning:</strong> 當 Proxy 判斷該目前的 session 不安全無法共用連線就會進行鎖定，直到該 session 結束就會恢復可共用</li>
</ul>
<blockquote>
<p>注意：RDS Proxy 不會主動去關閉 connection，所以才會一直處於一樣的連線數，透過 Connection Pool 去達到 connection reuse ，讓每次請求進來不用重新建立連線加快執行效率</p>
</blockquote>
<p><strong>參考連結</strong></p>
<ul>
<li><strong><strong><a href="https://vocus.cc/article/5f800406fd89780001365d17">Connection Pool (連線池)</a></strong></strong></li>
<li><strong><a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-proxy.howitworks.html">RDS Proxy concepts and terminology</a></strong></li>
</ul>
<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><p>詳細步驟可參考此 <a href="https://aws.amazon.com/tw/getting-started/hands-on/set-up-shared-database-connection-amazon-rds-proxy/">link</a></p>
<p><strong>步驟一、建立 VPC</strong></p>
<ul>
<li>兩個 public 及 private subnet</li>
</ul>
<p><strong>步驟二、建立 DB</strong></p>
<ul>
<li>建立 subnet group 只包含 private subnet</li>
<li>建立允許 RDS port 的 security group<ul>
<li>inbound rule 允許 vpc 的 CIDR block</li>
</ul>
</li>
<li>DB engine 選擇 Mariadb<ul>
<li><a href="https://aws.amazon.com/tw/about-aws/whats-new/2022/07/amazon-rds-proxy-mariadb-version-10-support/">Proxy 只支援 Mariadb 版本 10.3, 10.4, 10.5</a></li>
</ul>
</li>
</ul>
<p><strong>步驟三、建立 EC2</strong></p>
<ul>
<li>建立 key-pair</li>
<li>允許 SSH port 的 security group</li>
</ul>
<p><strong>步驟四、測試無 Proxy RDS</strong></p>
<ul>
<li>連線到 EC2</li>
<li>安裝 mysql-client<ul>
<li><code>sudo yum install mysql</code></li>
</ul>
</li>
<li>連線 mysql<ul>
<li><code>mysql -h rds-test-2.xxx.us-west-2.rds.amazonaws.com -u admin -p</code></li>
</ul>
</li>
</ul>
<p><strong>步驟五、建立 Secret Manager</strong></p>
<ul>
<li>secret type 選擇 Credentials for Amazon RDS database</li>
<li>輸入 DB 的 username, password</li>
<li>選擇前面建立的 Database</li>
</ul>
<p><strong>步驟六、建立 RDS Proxy (Read&#x2F;Write)</strong></p>
<ul>
<li>Engine Family 選擇 MySQL</li>
<li>Idle client connection timeout 改成 30 分鐘<ul>
<li>用戶端如果在時間內沒有丟新任務，DB 會判定為閒置將連線斷掉，給其它 client 使用</li>
</ul>
</li>
<li>Target group 選擇前面建立的 Database</li>
<li>Connection 選擇前面建立的 secret manager、自動建立 IAM Role</li>
<li>選擇 private subnet</li>
<li>選擇前面建立允許 RDS port 的 security group<ul>
<li><strong>rds proxy 的 port 必須為 3306</strong></li>
</ul>
</li>
</ul>
<p><img src="/../images/aws/use-mariadb-with-rds-proxy2.png" alt="use-mariadb-with-rds-proxy2"></p>
<p><strong>步驟七、建立 RDS Proxy Endpoint For Read-only</strong></p>
<ul>
<li>同一個 Proxy 建立 Read-only 的 endpoint</li>
<li>target role 選擇 read-only</li>
</ul>
<p><img src="/../images/aws/use-mariadb-with-rds-proxy3.png" alt="use-mariadb-with-rds-proxy3"></p>
<p><strong>步驟八、測試有 Proxy RDS</strong></p>
<ul>
<li>連線 Proxy<ul>
<li><code>mysql -h &lt;proxy endpoint&gt; -u admin -p</code></li>
</ul>
</li>
</ul>
<h2 id="Sysbench-簡介"><a href="#Sysbench-簡介" class="headerlink" title="Sysbench 簡介"></a>Sysbench 簡介</h2><ul>
<li><p>用來做 MySQL &#x2F; Mariadb &#x2F; PostgreSQL 資料庫的壓力測試</p>
</li>
<li><p>安裝方式 ⇒ <a href="https://github.com/akopytov/sysbench">link</a></p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">curl</span> <span class="string">-s</span> <span class="string">https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh</span> <span class="string">|</span> <span class="string">sudo</span> <span class="string">bash</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">yum</span> <span class="string">-y</span> <span class="string">install</span> <span class="string">sysbench</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>預設提供的壓力測試腳本</p>
<ul>
<li>bulk_insert</li>
<li>oltp_delete</li>
<li>oltp_insert  ⇒ 下方壓測例子用此腳本</li>
<li>oltp_point_select</li>
<li>oltp_read_only</li>
<li>oltp_read_write</li>
<li>oltp_update_index</li>
<li>oltp_update_non_index</li>
<li>oltp_write_only</li>
<li>select_random_points</li>
<li>select_random_ranges</li>
</ul>
</li>
<li><p>測試前可以先建立資料庫 <code>create database test</code></p>
</li>
<li><p>指令介紹</p>
<ul>
<li>第一次執行跑 <code>prepare</code> 建立測試 Table 及 RowData</li>
<li>做壓力測試跑 <code>run</code></li>
<li>測試完跑 <code>cleanup</code> 清除測試 Table 及 RowData</li>
</ul>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">sysbench</span> <span class="string">--threads=&lt;並行執行緒數量&gt;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--time=&lt;持續執行時間&gt;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--report-interval=&lt;間隔執行時間&gt;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--db-driver=mysql</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--mysql-user=&lt;資料庫使用者&gt;</span> <span class="string">\l</span></span><br><span class="line">    <span class="string">--mysql-password=&lt;資料庫密碼&gt;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--mysql-port=&lt;資料庫</span> <span class="string">port&gt;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--mysql-host=&lt;資料庫</span> <span class="string">endpoint&gt;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--mysql-db=&lt;資料庫名稱&gt;</span> <span class="string">&lt;測試腳本名稱&gt;</span> <span class="string">&lt;執行腳本的指令名稱&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看現有資料庫的 max_connection</p>
<p>  <img src="/../images/aws/use-mariadb-with-rds-proxy4.png" alt="use-mariadb-with-rds-proxy4"></p>
</li>
</ul>
<h2 id="無-Proxy-做壓測"><a href="#無-Proxy-做壓測" class="headerlink" title="無 Proxy 做壓測"></a>無 Proxy 做壓測</h2><ul>
<li><p>執行指令</p>
<ul>
<li>要注意使用 DB endpoint 及 port</li>
</ul>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">sysbench</span> <span class="string">--threads=1000</span> <span class="string">--db-driver=mysql</span> <span class="string">--mysql-user=&lt;YOUR_DB_USER&gt;</span> <span class="string">--mysql-password=&lt;YOUR_DB_PASSWORD&gt;</span> <span class="string">--mysql-port=&lt;YOUR_DB_PORT&gt;</span> <span class="string">--mysql-host=&lt;YOUR_DB_HOST&gt;</span> <span class="string">--mysql-db=&lt;YOUR_DB&gt;</span> <span class="string">oltp_insert</span> <span class="string">prepare</span></span><br><span class="line"><span class="string">sysbench</span> <span class="string">--threads=1000</span> <span class="string">--db-driver=mysql</span> <span class="string">--mysql-user=&lt;YOUR_DB_USER&gt;</span> <span class="string">--mysql-password=&lt;YOUR_DB_PASSWORD&gt;</span> <span class="string">--mysql-port=&lt;YOUR_DB_PORT&gt;</span> <span class="string">--mysql-host=&lt;YOUR_DB_HOST&gt;</span> <span class="string">--mysql-db=&lt;YOUR_DB&gt;</span> <span class="string">oltp_insert</span> <span class="string">run</span></span><br><span class="line"><span class="string">sysbench</span> <span class="string">--threads=1000</span> <span class="string">--db-driver=mysql</span> <span class="string">--mysql-user=&lt;YOUR_DB_USER&gt;</span> <span class="string">--mysql-password=&lt;YOUR_DB_PASSWORD&gt;</span> <span class="string">--mysql-port=&lt;YOUR_DB_PORT&gt;</span> <span class="string">--mysql-host=&lt;YOUR_DB_HOST&gt;</span> <span class="string">--mysql-db=&lt;YOUR_DB&gt;</span> <span class="string">oltp_insert</span> <span class="string">cleanup</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>執行成果</p>
<p>  <img src="/../images/aws/use-mariadb-with-rds-proxy5.png" alt="use-mariadb-with-rds-proxy5"></p>
</li>
</ul>
<h2 id="有-Proxy-做壓測"><a href="#有-Proxy-做壓測" class="headerlink" title="有 Proxy 做壓測"></a>有 Proxy 做壓測</h2><ul>
<li><p>執行指令</p>
<ul>
<li>要注意使用 DB Proxy endpoint 及 port</li>
</ul>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">sysbench</span> <span class="string">--threads=1000</span> <span class="string">--db-driver=mysql</span> <span class="string">--mysql-user=&lt;YOUR_DB_USER&gt;</span> <span class="string">--mysql-password=&lt;YOUR_DB_PASSWORD&gt;</span> <span class="string">--mysql-port=3306</span> <span class="string">--mysql-host=&lt;YOUR_DB_HOST&gt;</span> <span class="string">--mysql-db=&lt;YOUR_DB&gt;</span> <span class="string">oltp_insert</span> <span class="string">prepare</span></span><br><span class="line"><span class="string">sysbench</span> <span class="string">--threads=1000</span> <span class="string">--db-driver=mysql</span> <span class="string">--mysql-user=&lt;YOUR_DB_USER&gt;</span> <span class="string">--mysql-password=&lt;YOUR_DB_PASSWORD&gt;</span> <span class="string">--mysql-port=3306</span> <span class="string">--mysql-host=&lt;YOUR_DB_HOST&gt;</span> <span class="string">--mysql-db=&lt;YOUR_DB&gt;</span> <span class="string">oltp_insert</span> <span class="string">run</span></span><br><span class="line"><span class="string">sysbench</span> <span class="string">--threads=1000</span> <span class="string">--db-driver=mysql</span> <span class="string">--mysql-user=&lt;YOUR_DB_USER&gt;</span> <span class="string">--mysql-password=&lt;YOUR_DB_PASSWORD&gt;</span> <span class="string">--mysql-port=3306</span> <span class="string">--mysql-host=&lt;YOUR_DB_HOST&gt;</span> <span class="string">--mysql-db=&lt;YOUR_DB&gt;</span> <span class="string">oltp_insert</span> <span class="string">cleanup</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>執行成果</p>
<p>  <img src="/../images/aws/use-mariadb-with-rds-proxy6.png" alt="use-mariadb-with-rds-proxy6"></p>
</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><strong><a href="https://isdaniel.github.io/aws-rds-proxy/">AWS Postgres RDS Proxy</a></strong></li>
<li><a href="https://hktw-resources.awscloud.com/aws-hands-on-tutorial-hk/amazon-rds-proxy-%E7%B0%A1%E4%BB%8B%E5%8F%8A%E7%A4%BA%E7%AF%84"><strong>AWS實戰工作坊：Amazon RDS Proxy 簡介及示範</strong></a></li>
<li><strong><strong><a href="https://www.programmersought.com/article/86587579173/">sysbench stress test–mysql</a></strong></strong></li>
<li><strong><a href="https://stackoverflow.com/questions/39199173/difference-between-session-and-connection-in-sql-server">Difference between Session and Connection in SQL Server</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>RDS</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 簡介</title>
    <url>/what-is-redis/</url>
    <content><![CDATA[<h2 id="什麼是-Redis"><a href="#什麼是-Redis" class="headerlink" title="什麼是 Redis"></a>什麼是 Redis</h2><ul>
<li>用 C 語言開發的一個開源高性能 key-value 的 NoSQL(非關聯式資料庫)</li>
<li>Redis 是一個內存數據庫，用作另一個<strong>真實</strong>數據庫（如 MySQL 或 PostgreSQL）前面的緩存，以幫助提高應用程序性能</li>
<li>支持數據持久化到磁盤</li>
<li>Redis 是單進程單線程的模型，完全基於內存的操作</li>
</ul>
<h2 id="使用情境"><a href="#使用情境" class="headerlink" title="使用情境"></a>使用情境</h2><ul>
<li>Cache 緩存<ul>
<li>不經常更改且經常被請求的數據</li>
<li>任務關鍵性較低且經常變動的數據</li>
</ul>
</li>
<li><a href="https://www.readfog.com/a/1635361097659813888">分佈式鎖(Lock)</a>、Message Stream、Pub&#x2F;Sub、Geospatial(地理位置)</li>
</ul>
<h2 id="為何-Redis-速度如此快"><a href="#為何-Redis-速度如此快" class="headerlink" title="為何 Redis 速度如此快"></a>為何 Redis 速度如此快</h2><ul>
<li>Redis 官方介紹，速度可以達到 10W + 的 QPS，這個數據不比 MemCache 差</li>
<li>Redis 的瓶頸是內存及網絡頻寬，而不是 CPU</li>
</ul>
<p><strong>特點</strong></p>
<ul>
<li>使用類似於 HashMap 的原理，HashMap 的查詢及操作的時間複雜度是 O(1)</li>
<li>基於 key-value，數據結構簡單，對數據操作也簡單</li>
<li>採用單線程操作不會有死鎖現象，避免了不必要的上下文切換及競爭條件，不存在 CPU 切換現象，也就不存在考慮各種鎖的問題</li>
<li>使用非阻塞 IO，多路複用 IO 模型</li>
</ul>
<h2 id="緩存問題"><a href="#緩存問題" class="headerlink" title="緩存問題"></a>緩存問題</h2><ul>
<li><strong>數據一致性</strong><ul>
<li>在分散式架構會常遇到一致性問題，如果要強一致性就要避免使用緩存</li>
</ul>
</li>
<li><strong>緩存雪崩</strong><ul>
<li>當請求高峰時，緩存機器掛掉，造成全部請求打到資料庫也跟著掛掉，整個服務無法使用</li>
<li>解決方法<ul>
<li>使用主從式架構或 Sentinel 或 Cluster 等，避免全面崩潰</li>
<li>做資料持久化，讓 Redis 重啟可以快速恢復資料</li>
</ul>
</li>
</ul>
</li>
<li><strong>緩存穿透</strong><ul>
<li>黑客發起大量資料查詢請求，且該請求在緩存及資料庫中都沒有資料，導致請求直接攻擊資料庫，造成資料庫掛掉，整個服務無法使用</li>
<li>解決方法<ul>
<li>在請求接口層可以做一些驗證(ID、身分、參數等)</li>
</ul>
</li>
</ul>
</li>
<li><strong>緩存擊穿</strong><ul>
<li>黑客發起針對一個 key 的大量請求，當這個 key 時效過期，大量請求就會擊穿緩存，直接攻擊資料庫，就像在屏障中鑿開了一個洞</li>
<li>解決方法<ul>
<li>緩存的值不會更新，就設定永不過期</li>
<li>緩存的值會更新，就要在到期之前主動更新值或延長時效</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="資料持久化"><a href="#資料持久化" class="headerlink" title="資料持久化"></a>資料持久化</h2><p><img src="/../images/redis/what-is-redis.jpeg" alt="what-is-redis"></p>
<p><strong>無持久化</strong></p>
<ul>
<li>Redis 在重新啓動或故障轉移時數據會丟失資料</li>
</ul>
<p><strong>RDB 文件</strong></p>
<ul>
<li>指定的時間間隔執行數據集的時間點快照(snapshot)，<strong>異步拷貝</strong>內存中的數據來做持久化</li>
<li>依賴主進程的 fork，可能會導致服務請求的瞬間延遲</li>
<li>優點<ul>
<li>RDB 文件在內存中的加載速度要比 AOF 快得多</li>
<li>災難恢復較快</li>
</ul>
</li>
<li>缺點<ul>
<li>建立快照資料可能會有丟失</li>
</ul>
</li>
</ul>
<p><strong>AOF(Append Only File)</strong></p>
<ul>
<li>將 Redis 執行的每一條命令追加到磁盤中，處理巨大的寫入會降低 Redis 的性能</li>
<li>優點<ul>
<li>持久性能夠比 RDB 快照更持久，因爲它是一個僅附加文件</li>
<li>資料較少機率會丟失</li>
</ul>
</li>
<li>缺點<ul>
<li>格式不緊湊，並且比 RDB 文件使用更多的磁盤</li>
<li>會降低 Redis 的性能</li>
</ul>
</li>
</ul>
<h2 id="資料淘汰策略"><a href="#資料淘汰策略" class="headerlink" title="資料淘汰策略"></a>資料淘汰策略</h2><ul>
<li>volatile 爲前綴的策略都是從已過期的數據集中進行淘汰</li>
<li>allkeys 爲前綴的策略都是面向所有 key 進行淘汰</li>
<li>LRU（least recently used）最近最少用到的</li>
<li>LFU（least frequently used）最不常用的</li>
<li>以下為現有策略，觸發條件為使用的內存達到閾值時<ul>
<li>allkeys-random：隨機刪除</li>
<li>allkeys-lru：使用 LRU 算法進行篩選刪除</li>
<li>allkeys-lfu：使用 LFU 算法進行篩選刪除</li>
<li>volatile-random：隨機刪除</li>
<li>volatile-ttl：根據過期時間先後進行刪除，越早過期的越先被刪除</li>
<li>volatile-lru：使用 LRU 算法進行篩選刪除</li>
<li>volatile-lfu：使用 LFU 算法進行篩選刪除</li>
<li>noevition：不進行淘汰 (Redis 預設策略)</li>
</ul>
</li>
</ul>
<h2 id="數據庫"><a href="#數據庫" class="headerlink" title="數據庫"></a>數據庫</h2><ul>
<li>預設創建 16 個 (db0 ~ db15)，但 Cluster 模式只會有一個 (db0)</li>
<li>Redis 是字典結構(Dictionary Structure)的儲存服務，Client 端可以指定要將數據儲存在哪一個字典(db)裡面，每一個 db 都是獨立的，類似關聯式資料庫實例中可以創建多個 db</li>
<li>Client 端與 Redis 建立連線，預設會選擇 db 0 數據庫，可以使用 <code>select &lt;db index&gt;</code> 做切換</li>
<li>預設值都可以利用 <code>/redis/redis.conf</code> 檔案來做修改</li>
<li>redis 不支援自定義 db，所以使用者只能透過 db編號來操作，且權限上只能要馬全部看到要馬全部看不到</li>
<li>每一個數據庫可以用命名空間(namespace) 來給一個應用程式做切分使用，例如 prod&#x2F;stag 環境</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><strong><strong><a href="https://www.readfog.com/a/1681013780987875328">圖解 Redis</a></strong></strong></li>
<li><strong><strong><a href="https://www.readfog.com/a/1666648997847207936">一文讀懂 Redis</a></strong></strong></li>
<li><strong><strong><a href="https://www.readfog.com/a/1636087731802181632">Redis 爲什麼要分 16 個庫</a></strong></strong></li>
<li><strong><strong><a href="https://www.readfog.com/a/1678019908615639040">Redis 內存淘汰機制詳解</a></strong></strong></li>
<li><strong><strong><a href="https://www.readfog.com/a/1657226667469410304">Redis 多線程演進</a></strong></strong></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Helm 語法筆記</title>
    <url>/write-helm-chart/</url>
    <content><![CDATA[<h2 id="Template-語法使用"><a href="#Template-語法使用" class="headerlink" title="Template 語法使用"></a>Template 語法使用</h2><h3 id="第一、賦值並取值"><a href="#第一、賦值並取值" class="headerlink" title="第一、賦值並取值"></a>第一、賦值並取值</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># deployment.yaml</span></span><br><span class="line"></span><br><span class="line">xxx: &#123;&#123; .Values.xxxx &#125;&#125;    &lt;= 在 values.yaml 檔案定義</span><br><span class="line">name: &#123;&#123; .Chart.name &#125;&#125;    &lt;= 在 chart.yaml 檔案定義</span><br><span class="line"></span><br><span class="line">name: &#123;&#123; include <span class="string">&quot;test.name&quot;</span> . &#125;&#125;  &lt;= 在 _helpers.tpl 檔案定義</span><br></pre></td></tr></table></figure>

<h3 id="第二、陣列使用"><a href="#第二、陣列使用" class="headerlink" title="第二、陣列使用"></a>第二、陣列使用</h3><ul>
<li>如果要在 range scope 裡面使用其他變數，<ul>
<li>取用 <code>values.yaml</code> 檔案的值，必須在前面加上 <code>$</code> 改用全域變數方式取得</li>
<li>取用 <code>_helpers.tpl</code> 檔案的值，必須把 <code>.</code> 改成 <code>$</code> 才可以正常取值</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># deployment.yaml</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;- range .Values.list &#125;&#125;</span><br><span class="line">		name: &#123;&#123; . &#125;&#125;</span><br><span class="line">		othervalue: &#123;&#123; $.Values.othervalue &#125;&#125;</span><br><span class="line">		somename: &#123;&#123; include <span class="string">&quot;test.name&quot;</span> $ &#125;&#125;</span><br><span class="line">&#123;&#123;- end&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># values.yaml</span></span><br><span class="line">othervalue: cool</span><br><span class="line">list:</span><br><span class="line">  - name</span><br></pre></td></tr></table></figure>

<h3 id="第三、Pipeline-應用"><a href="#第三、Pipeline-應用" class="headerlink" title="第三、Pipeline 應用"></a>第三、Pipeline 應用</h3><ul>
<li>透過 pipeline 讓 value 套用多個 function</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 pipeline 套用多個 function</span></span><br><span class="line">projectCode2: &#123;&#123; .Values.projectCode | upper | quote &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中間的 date function 其實只是指定時間的格式而已，不會修改 now 的結果</span></span><br><span class="line">now: &#123;&#123; now | <span class="built_in">date</span> <span class="string">&quot;2006-01-02&quot;</span> | quote &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若是 values.yaml 中沒有 contact 的值，就使用預設的</span></span><br><span class="line">contact: &#123;&#123; .Values.contact | default <span class="string">&quot;1-123-456-7890&quot;</span> | quote &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第四、Flow-Control-if-x2F-else"><a href="#第四、Flow-Control-if-x2F-else" class="headerlink" title="第四、Flow Control- if &#x2F; else"></a>第四、Flow Control- if &#x2F; else</h3><h3 id="第五、使用-with-限定變數範圍"><a href="#第五、使用-with-限定變數範圍" class="headerlink" title="第五、使用 with 限定變數範圍"></a>第五、使用 with 限定變數範圍</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># deployment.yam</span></span><br><span class="line">&#123;&#123;- with .Values.course &#125;&#125;</span><br><span class="line">		k8s: &#123;&#123; .k8s | upper | quote &#125;&#125;</span><br><span class="line">		python: &#123;&#123; .python | repeat 3 | quote &#125;&#125;</span><br><span class="line">		release: &#123;&#123; .Release.Name &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># values.yaml</span></span><br><span class="line">course:</span><br><span class="line">	k8s: devops</span><br><span class="line">	python: django</span><br></pre></td></tr></table></figure>

<h3 id="第六、自訂-variable"><a href="#第六、自訂-variable" class="headerlink" title="第六、自訂 variable"></a>第六、自訂 variable</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: &#123;&#123; .Release.Name &#125;&#125;-configmap</span><br><span class="line">data:</span><br><span class="line">	&#123;&#123;- <span class="variable">$releaseName</span> := .Release.Name -&#125;&#125;</span><br><span class="line">	release: &#123;&#123; <span class="variable">$releaseName</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第七、自訂-template"><a href="#第七、自訂-template" class="headerlink" title="第七、自訂 template"></a>第七、自訂 template</h3><ul>
<li>透過 define 關鍵字可以自訂一個 template</li>
<li>可以定義在獨立的檔案、也可以與引用它的檔案放一起</li>
<li>自訂的 template 建議放在獨立的檔案，一般會定義在 <code>_helpers.tpl</code> 檔案中</li>
<li>使用 <code>template</code> 或 <code>include</code> 語法，引用 define 定義的 template</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _helpers.tpl</span></span><br><span class="line">&#123;&#123;- define <span class="string">&quot;mychart.labels&quot;</span> &#125;&#125;</span><br><span class="line">  labels:</span><br><span class="line">    generator: helm</span><br><span class="line">    <span class="built_in">date</span>: &#123;&#123; now | htmlDate &#125;&#125;</span><br><span class="line">    chart: &#123;&#123; .Chart.Name &#125;&#125;</span><br><span class="line">    version: &#123;&#123; .Chart.Version &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># deployment.yaml</span></span><br><span class="line">&#123;&#123;- template <span class="string">&quot;mychart.labels&quot;</span> . &#125;&#125;  &lt;= 正確的引用方式(<span class="string">&quot;.&quot;</span> 即為 scope)</span><br><span class="line">&#123;&#123; include <span class="string">&quot;mychart.labels&quot;</span> . | indent 4 &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第八、Sub-Chart"><a href="#第八、Sub-Chart" class="headerlink" title="第八、Sub Chart"></a>第八、Sub Chart</h3><ul>
<li>一個 Helm Chart 內再包一個 Helm Chart</li>
<li>一個 Sub Chart  可以定義自己的 value，但 parent chart 中可以 override Sub Chart 中設定的值</li>
<li>在 parent chart 中可以定義 global variable，讓 parent chart &amp; sub chart 都可以使用</li>
</ul>
<h2 id="指令介紹"><a href="#指令介紹" class="headerlink" title="指令介紹"></a>指令介紹</h2><h3 id="Repo"><a href="#Repo" class="headerlink" title="Repo"></a>Repo</h3><ul>
<li>新增： <code>helm repo add &lt;repo name&gt; &lt;repo url&gt;</code></li>
<li>列出清單： <code>helm repo list</code></li>
<li>更新：<code>helm repo update</code></li>
<li>搜尋該 repo 底下全部的 chart：<code>helm search repo &lt;repo name&gt;</code></li>
</ul>
<h3 id="Chart"><a href="#Chart" class="headerlink" title="Chart"></a>Chart</h3><ul>
<li>安裝: <code>helm install &lt;release name&gt; &lt;chart path&gt;</code><ul>
<li><code>-n</code>：指定 namespace</li>
<li><code>-f</code>：指定 values.yaml</li>
<li><code>--dry-run --debug</code>：用來驗證設定是否正確</li>
</ul>
</li>
<li>列出清單：<code>helm list</code></li>
<li>顯示建立的內容：<code>helm get all &lt;release name&gt;</code></li>
<li>顯示 value：<code>helm get values &lt;release name&gt;</code></li>
<li>升級：<code>helm upgrade &lt;release name&gt; &lt;chart repo name&gt;/&lt;chart name&gt; --version=0.2.1</code></li>
<li>升級並安裝：<code>helm upgrade &lt;release name&gt; &lt;chart repo name&gt;/&lt;chart name&gt;</code><ul>
<li><code>--values</code> ：指定 values.yaml</li>
<li><code>--install</code> ：先安裝再升級</li>
<li><code>--set</code> ：指定 key&#x3D;value，範例 <code>--set database.password=&quot;laravel_password&quot;</code></li>
</ul>
</li>
<li>查詢歷史紀錄：<code>helm history &lt;release name&gt;</code></li>
<li>退版：<code>helm rollback &lt;release name&gt; &lt;revision no&gt;</code></li>
<li>測試&amp;驗證語法：<code>helm lint &lt;chart folder&gt;</code></li>
</ul>
<h3 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h3><ul>
<li>打包：<code>helm package &lt;helm chart folder&gt;</code></li>
<li>部署到 S3：<code>helm s3 push &lt;helm chart name&gt;-0.1.0.tgz &lt;repo name&gt;</code></li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://yu-jack.github.io/2021/11/24/helm-note/">helm 語法筆記</a></li>
<li><a href="https://godleon.github.io/blog/DevOps/learn-Helm/">Helm 學習筆記</a></li>
</ul>
]]></content>
      <categories>
        <category>Helm</category>
      </categories>
      <tags>
        <tag>Helm</tag>
      </tags>
  </entry>
</search>
